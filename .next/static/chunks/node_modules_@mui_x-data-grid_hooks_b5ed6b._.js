(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@mui_x-data-grid_hooks_b5ed6b._.js", {

"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "GridPrivateApiContext": (()=>GridPrivateApiContext),
    "useGridPrivateApiContext": (()=>useGridPrivateApiContext)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
;
const GridPrivateApiContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.createContext(undefined);
if ("TURBOPACK compile-time truthy", 1) {
    GridPrivateApiContext.displayName = 'GridPrivateApiContext';
}
function useGridPrivateApiContext() {
    const privateApiRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useContext(GridPrivateApiContext);
    if (privateApiRef === undefined) {
        throw new Error([
            'MUI X: Could not find the Data Grid private context.',
            'It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.',
            'This can also happen if you are bundling multiple versions of the Data Grid.'
        ].join('\n'));
    }
    return privateApiRef;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRootProps": (()=>useGridRootProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$context$2f$GridRootPropsContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/context/GridRootPropsContext.js [app-client] (ecmascript)");
;
;
const useGridRootProps = ()=>{
    const contextValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useContext(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$context$2f$GridRootPropsContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRootPropsContext"]);
    if (!contextValue) {
        throw new Error('MUI X: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.');
    }
    return contextValue;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "argsEqual": (()=>argsEqual),
    "objectShallowCompare": (()=>objectShallowCompare),
    "useGridSelector": (()=>useGridSelector),
    "useGridSelectorV8": (()=>useGridSelectorV8)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$fastObjectShallowCompare$2f$fastObjectShallowCompare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/fastObjectShallowCompare/fastObjectShallowCompare.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/warning/warning.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useLazyRef$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js [app-client] (ecmascript) <export default as useLazyRef>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useOnMount$2f$useOnMount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useOnMount$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useOnMount/useOnMount.js [app-client] (ecmascript) <export default as useOnMount>");
;
;
;
;
;
function isOutputSelector(selector) {
    return selector.acceptsApiRef;
}
// TODO v8: Remove this function
function applySelector(apiRef, selector) {
    if (isOutputSelector(selector)) {
        return selector(apiRef);
    }
    return selector(apiRef.current.state);
}
// TODO v8: Rename this function to `applySelector`
function applySelectorV8(apiRef, selector, args, instanceId) {
    if (isOutputSelector(selector)) {
        return selector(apiRef, args);
    }
    return selector(apiRef.current.state, instanceId);
}
const defaultCompare = Object.is;
const objectShallowCompare = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$fastObjectShallowCompare$2f$fastObjectShallowCompare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fastObjectShallowCompare"];
const arrayShallowCompare = (a, b)=>{
    if (a === b) {
        return true;
    }
    return a.length === b.length && a.every((v, i)=>v === b[i]);
};
const argsEqual = (prev, curr)=>{
    let fn = Object.is;
    if (curr instanceof Array) {
        fn = arrayShallowCompare;
    } else if (curr instanceof Object) {
        fn = objectShallowCompare;
    }
    return fn(prev, curr);
};
const createRefs = ()=>({
        state: null,
        equals: null,
        selector: null,
        args: null
    });
const useGridSelector = (apiRef, selector, equals = defaultCompare)=>{
    if ("TURBOPACK compile-time truthy", 1) {
        if (!apiRef.current.state) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])([
                'MUI X: `useGridSelector` has been called before the initialization of the state.',
                'This hook can only be used inside the context of the grid.'
            ]);
        }
    }
    const refs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useLazyRef$3e$__["useLazyRef"])(createRefs);
    const didInit = refs.current.selector !== null;
    const [state, setState] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState(// We don't use an initialization function to avoid allocations
    didInit ? null : applySelector(apiRef, selector));
    refs.current.state = state;
    refs.current.equals = equals;
    refs.current.selector = selector;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useOnMount$2f$useOnMount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useOnMount$3e$__["useOnMount"])({
        "useGridSelector.useOnMount": ()=>{
            return apiRef.current.store.subscribe({
                "useGridSelector.useOnMount": ()=>{
                    const newState = applySelector(apiRef, refs.current.selector);
                    if (!refs.current.equals(refs.current.state, newState)) {
                        refs.current.state = newState;
                        setState(newState);
                    }
                }
            }["useGridSelector.useOnMount"]);
        }
    }["useGridSelector.useOnMount"]);
    return state;
};
const useGridSelectorV8 = (apiRef, selector, args = undefined, equals = defaultCompare)=>{
    if ("TURBOPACK compile-time truthy", 1) {
        if (!apiRef.current.state) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])([
                'MUI X: `useGridSelector` has been called before the initialization of the state.',
                'This hook can only be used inside the context of the grid.'
            ]);
        }
    }
    const refs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useLazyRef$3e$__["useLazyRef"])(createRefs);
    const didInit = refs.current.selector !== null;
    const [state, setState] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState(// We don't use an initialization function to avoid allocations
    didInit ? null : applySelectorV8(apiRef, selector, args, apiRef.current.instanceId));
    refs.current.state = state;
    refs.current.equals = equals;
    refs.current.selector = selector;
    const prevArgs = refs.current.args;
    refs.current.args = args;
    if (didInit && !argsEqual(prevArgs, args)) {
        const newState = applySelectorV8(apiRef, refs.current.selector, refs.current.args, apiRef.current.instanceId);
        if (!refs.current.equals(refs.current.state, newState)) {
            refs.current.state = newState;
            setState(newState);
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useOnMount$2f$useOnMount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useOnMount$3e$__["useOnMount"])({
        "useGridSelectorV8.useOnMount": ()=>{
            return apiRef.current.store.subscribe({
                "useGridSelectorV8.useOnMount": ()=>{
                    const newState = applySelectorV8(apiRef, refs.current.selector, refs.current.args, apiRef.current.instanceId);
                    if (!refs.current.equals(refs.current.state, newState)) {
                        refs.current.state = newState;
                        setState(newState);
                    }
                }
            }["useGridSelectorV8.useOnMount"]);
        }
    }["useGridSelectorV8.useOnMount"]);
    return state;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/gridCoreSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Get the theme state
 * @category Core
 */ __turbopack_esm__({
    "gridIsRtlSelector": (()=>gridIsRtlSelector)
});
const gridIsRtlSelector = (state)=>state.isRtl;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsInterfaces.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "EMPTY_PINNED_COLUMN_FIELDS": (()=>EMPTY_PINNED_COLUMN_FIELDS),
    "GridPinnedColumnPosition": (()=>GridPinnedColumnPosition)
});
let GridPinnedColumnPosition = /*#__PURE__*/ function(GridPinnedColumnPosition) {
    GridPinnedColumnPosition["LEFT"] = "left";
    GridPinnedColumnPosition["RIGHT"] = "right";
    return GridPinnedColumnPosition;
}({});
const EMPTY_PINNED_COLUMN_FIELDS = {
    left: [],
    right: []
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridColumnDefinitionsSelector": (()=>gridColumnDefinitionsSelector),
    "gridColumnFieldsSelector": (()=>gridColumnFieldsSelector),
    "gridColumnLookupSelector": (()=>gridColumnLookupSelector),
    "gridColumnPositionsSelector": (()=>gridColumnPositionsSelector),
    "gridColumnVisibilityModelSelector": (()=>gridColumnVisibilityModelSelector),
    "gridColumnsStateSelector": (()=>gridColumnsStateSelector),
    "gridColumnsTotalWidthSelector": (()=>gridColumnsTotalWidthSelector),
    "gridFilterableColumnDefinitionsSelector": (()=>gridFilterableColumnDefinitionsSelector),
    "gridFilterableColumnLookupSelector": (()=>gridFilterableColumnLookupSelector),
    "gridHasColSpanSelector": (()=>gridHasColSpanSelector),
    "gridPinnedColumnsSelector": (()=>gridPinnedColumnsSelector),
    "gridVisibleColumnDefinitionsSelector": (()=>gridVisibleColumnDefinitionsSelector),
    "gridVisibleColumnFieldsSelector": (()=>gridVisibleColumnFieldsSelector),
    "gridVisiblePinnedColumnDefinitionsSelector": (()=>gridVisiblePinnedColumnDefinitionsSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$gridCoreSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/gridCoreSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsInterfaces.js [app-client] (ecmascript)");
;
;
;
const gridColumnsStateSelector = (state)=>state.columns;
const gridColumnFieldsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridColumnsStateSelector, (columnsState)=>columnsState.orderedFields);
const gridColumnLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridColumnsStateSelector, (columnsState)=>columnsState.lookup);
const gridColumnDefinitionsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup)=>allFields.map((field)=>lookup[field]));
const gridColumnVisibilityModelSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridColumnsStateSelector, (columnsState)=>columnsState.columnVisibilityModel);
const gridVisibleColumnDefinitionsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel)=>columns.filter((column)=>columnVisibilityModel[column.field] !== false));
const gridVisibleColumnFieldsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridVisibleColumnDefinitionsSelector, (visibleColumns)=>visibleColumns.map((column)=>column.field));
const gridPinnedColumnsSelector = (state)=>state.pinnedColumns;
const gridVisiblePinnedColumnDefinitionsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$gridCoreSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridIsRtlSelector"], (columnsState, model, visibleColumnFields, isRtl)=>{
    const visiblePinnedFields = filterVisibleColumns(model, visibleColumnFields, isRtl);
    const visiblePinnedColumns = {
        left: visiblePinnedFields.left.map((field)=>columnsState.lookup[field]),
        right: visiblePinnedFields.right.map((field)=>columnsState.lookup[field])
    };
    return visiblePinnedColumns;
});
function filterVisibleColumns(pinnedColumns, columns, invert) {
    if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EMPTY_PINNED_COLUMN_FIELDS"];
    }
    if (pinnedColumns.left?.length === 0 && pinnedColumns.right?.length === 0) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EMPTY_PINNED_COLUMN_FIELDS"];
    }
    const filter = (newPinnedColumns, remainingColumns)=>{
        if (!Array.isArray(newPinnedColumns)) {
            return [];
        }
        return newPinnedColumns.filter((field)=>remainingColumns.includes(field));
    };
    const leftPinnedColumns = filter(pinnedColumns.left, columns);
    const columnsWithoutLeftPinnedColumns = columns.filter(// Filter out from the remaining columns those columns already pinned to the left
    (field)=>!leftPinnedColumns.includes(field));
    const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);
    if (invert) {
        return {
            left: rightPinnedColumns,
            right: leftPinnedColumns
        };
    }
    return {
        left: leftPinnedColumns,
        right: rightPinnedColumns
    };
}
const gridColumnPositionsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridVisibleColumnDefinitionsSelector, (visibleColumns)=>{
    const positions = [];
    let currentPosition = 0;
    for(let i = 0; i < visibleColumns.length; i += 1){
        positions.push(currentPosition);
        currentPosition += visibleColumns[i].computedWidth;
    }
    return positions;
});
const gridColumnsTotalWidthSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions)=>{
    const colCount = visibleColumns.length;
    if (colCount === 0) {
        return 0;
    }
    return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;
});
const gridFilterableColumnDefinitionsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnDefinitionsSelector, (columns)=>columns.filter((col)=>col.filterable));
const gridFilterableColumnLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnDefinitionsSelector, (columns)=>columns.reduce((acc, col)=>{
        if (col.filterable) {
            acc[col.field] = col;
        }
        return acc;
    }, {}));
const gridHasColSpanSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnDefinitionsSelector, (columns)=>columns.some((column)=>column.colSpan !== undefined));
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridAdditionalRowGroupsSelector": (()=>gridAdditionalRowGroupsSelector),
    "gridDataRowIdsSelector": (()=>gridDataRowIdsSelector),
    "gridPinnedRowsCountSelector": (()=>gridPinnedRowsCountSelector),
    "gridPinnedRowsSelector": (()=>gridPinnedRowsSelector),
    "gridRowCountSelector": (()=>gridRowCountSelector),
    "gridRowGroupingNameSelector": (()=>gridRowGroupingNameSelector),
    "gridRowGroupsToFetchSelector": (()=>gridRowGroupsToFetchSelector),
    "gridRowMaximumTreeDepthSelector": (()=>gridRowMaximumTreeDepthSelector),
    "gridRowTreeDepthsSelector": (()=>gridRowTreeDepthsSelector),
    "gridRowTreeSelector": (()=>gridRowTreeSelector),
    "gridRowsDataRowIdToIdLookupSelector": (()=>gridRowsDataRowIdToIdLookupSelector),
    "gridRowsLoadingSelector": (()=>gridRowsLoadingSelector),
    "gridRowsLookupSelector": (()=>gridRowsLookupSelector),
    "gridTopLevelRowCountSelector": (()=>gridTopLevelRowCountSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
;
const gridRowsStateSelector = (state)=>state.rows;
const gridRowCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.totalRowCount);
const gridRowsLoadingSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.loading);
const gridTopLevelRowCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.totalTopLevelRowCount);
const gridRowsLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.dataRowIdToModelLookup);
const gridRowsDataRowIdToIdLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.dataRowIdToIdLookup);
const gridRowTreeSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.tree);
const gridRowGroupsToFetchSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.groupsToFetch);
const gridRowGroupingNameSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.groupingName);
const gridRowTreeDepthsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.treeDepths);
const gridRowMaximumTreeDepthSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridRowsStateSelector, (rows)=>{
    const entries = Object.entries(rows.treeDepths);
    if (entries.length === 0) {
        return 1;
    }
    return entries.filter(([, nodeCount])=>nodeCount > 0).map(([depth])=>Number(depth)).sort((a, b)=>b - a)[0] + 1;
});
const gridDataRowIdsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows.dataRowIds);
const gridAdditionalRowGroupsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowsStateSelector, (rows)=>rows?.additionalRowGroups);
const gridPinnedRowsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridAdditionalRowGroupsSelector, (additionalRowGroups)=>{
    const rawPinnedRows = additionalRowGroups?.pinnedRows;
    return {
        bottom: rawPinnedRows?.bottom?.map((rowEntry)=>({
                id: rowEntry.id,
                model: rowEntry.model ?? {}
            })) ?? [],
        top: rawPinnedRows?.top?.map((rowEntry)=>({
                id: rowEntry.id,
                model: rowEntry.model ?? {}
            })) ?? []
    };
});
const gridPinnedRowsCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridPinnedRowsSelector, (pinnedRows)=>{
    return (pinnedRows?.top?.length || 0) + (pinnedRows?.bottom?.length || 0);
});
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "GRID_ID_AUTOGENERATED": (()=>GRID_ID_AUTOGENERATED),
    "GRID_ROOT_GROUP_ID": (()=>GRID_ROOT_GROUP_ID),
    "buildRootGroup": (()=>buildRootGroup),
    "calculatePinnedRowsHeight": (()=>calculatePinnedRowsHeight),
    "checkGridRowIdIsValid": (()=>checkGridRowIdIsValid),
    "computeRowsUpdates": (()=>computeRowsUpdates),
    "createRowsInternalCache": (()=>createRowsInternalCache),
    "getRowHeightWarning": (()=>getRowHeightWarning),
    "getRowIdFromRowModel": (()=>getRowIdFromRowModel),
    "getRowsStateFromCache": (()=>getRowsStateFromCache),
    "getTopLevelRowCount": (()=>getTopLevelRowCount),
    "getTreeNodeDescendants": (()=>getTreeNodeDescendants),
    "getValidRowHeight": (()=>getValidRowHeight),
    "isAutogeneratedRow": (()=>isAutogeneratedRow),
    "isAutogeneratedRowNode": (()=>isAutogeneratedRowNode),
    "minimalContentHeight": (()=>minimalContentHeight),
    "rowHeightWarning": (()=>rowHeightWarning),
    "updateCacheWithNewRows": (()=>updateCacheWithNewRows)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
;
;
const GRID_ROOT_GROUP_ID = `auto-generated-group-node-root`;
const GRID_ID_AUTOGENERATED = Symbol('mui.id_autogenerated');
const buildRootGroup = ()=>({
        type: 'group',
        id: GRID_ROOT_GROUP_ID,
        depth: -1,
        groupingField: null,
        groupingKey: null,
        isAutoGenerated: true,
        children: [],
        childrenFromPath: {},
        childrenExpanded: true,
        parent: null
    });
function checkGridRowIdIsValid(id, row, detailErrorMessage = 'A row was provided without id in the rows prop:') {
    if (id == null) {
        throw new Error([
            'MUI X: The Data Grid component requires all rows to have a unique `id` property.',
            'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.',
            detailErrorMessage,
            JSON.stringify(row)
        ].join('\n'));
    }
}
const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage)=>{
    const id = getRowId ? getRowId(rowModel) : rowModel.id;
    checkGridRowIdIsValid(id, rowModel, detailErrorMessage);
    return id;
};
const createRowsInternalCache = ({ rows, getRowId, loading, rowCount })=>{
    const updates = {
        type: 'full',
        rows: []
    };
    const dataRowIdToModelLookup = {};
    const dataRowIdToIdLookup = {};
    for(let i = 0; i < rows.length; i += 1){
        const model = rows[i];
        const id = getRowIdFromRowModel(model, getRowId);
        dataRowIdToModelLookup[id] = model;
        dataRowIdToIdLookup[id] = id;
        updates.rows.push(id);
    }
    return {
        rowsBeforePartialUpdates: rows,
        loadingPropBeforePartialUpdates: loading,
        rowCountPropBeforePartialUpdates: rowCount,
        updates,
        dataRowIdToIdLookup,
        dataRowIdToModelLookup
    };
};
const getTopLevelRowCount = ({ tree, rowCountProp = 0 })=>{
    const rootGroupNode = tree[GRID_ROOT_GROUP_ID];
    return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));
};
const getRowsStateFromCache = ({ apiRef, rowCountProp = 0, loadingProp, previousTree, previousTreeDepths, previousGroupsToFetch })=>{
    const cache = apiRef.current.caches.rows;
    // 1. Apply the "rowTreeCreation" family processing.
    const { tree: unProcessedTree, treeDepths: unProcessedTreeDepths, dataRowIds: unProcessedDataRowIds, groupingName, groupsToFetch = [] } = apiRef.current.applyStrategyProcessor('rowTreeCreation', {
        previousTree,
        previousTreeDepths,
        updates: cache.updates,
        dataRowIdToIdLookup: cache.dataRowIdToIdLookup,
        dataRowIdToModelLookup: cache.dataRowIdToModelLookup,
        previousGroupsToFetch
    });
    // 2. Apply the "hydrateRows" pipe-processing.
    const groupingParamsWithHydrateRows = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {
        tree: unProcessedTree,
        treeDepths: unProcessedTreeDepths,
        dataRowIdToIdLookup: cache.dataRowIdToIdLookup,
        dataRowIds: unProcessedDataRowIds,
        dataRowIdToModelLookup: cache.dataRowIdToModelLookup
    });
    // 3. Reset the cache updates
    apiRef.current.caches.rows.updates = {
        type: 'partial',
        actions: {
            insert: [],
            modify: [],
            remove: []
        },
        idToActionLookup: {}
    };
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, groupingParamsWithHydrateRows, {
        totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),
        totalTopLevelRowCount: getTopLevelRowCount({
            tree: groupingParamsWithHydrateRows.tree,
            rowCountProp
        }),
        groupingName,
        loading: loadingProp,
        groupsToFetch
    });
};
const isAutogeneratedRow = (row)=>GRID_ID_AUTOGENERATED in row;
const isAutogeneratedRowNode = (rowNode)=>rowNode.type === 'skeletonRow' || rowNode.type === 'footer' || rowNode.type === 'group' && rowNode.isAutoGenerated || rowNode.type === 'pinnedRow' && rowNode.isAutoGenerated;
const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows)=>{
    const node = tree[parentId];
    if (node.type !== 'group') {
        return [];
    }
    const validDescendants = [];
    for(let i = 0; i < node.children.length; i += 1){
        const child = node.children[i];
        if (!skipAutoGeneratedRows || !isAutogeneratedRowNode(tree[child])) {
            validDescendants.push(child);
        }
        const childDescendants = getTreeNodeDescendants(tree, child, skipAutoGeneratedRows);
        for(let j = 0; j < childDescendants.length; j += 1){
            validDescendants.push(childDescendants[j]);
        }
    }
    if (!skipAutoGeneratedRows && node.footerId != null) {
        validDescendants.push(node.footerId);
    }
    return validDescendants;
};
const updateCacheWithNewRows = ({ previousCache, getRowId, updates, groupKeys })=>{
    if (previousCache.updates.type === 'full') {
        throw new Error('MUI X: Unable to prepare a partial update if a full update is not applied yet.');
    }
    // Remove duplicate updates.
    // A server can batch updates, and send several updates for the same row in one fn call.
    const uniqueUpdates = new Map();
    updates.forEach((update)=>{
        const id = getRowIdFromRowModel(update, getRowId, 'A row was provided without id when calling updateRows():');
        if (uniqueUpdates.has(id)) {
            uniqueUpdates.set(id, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, uniqueUpdates.get(id), update));
        } else {
            uniqueUpdates.set(id, update);
        }
    });
    const partialUpdates = {
        type: 'partial',
        actions: {
            insert: [
                ...previousCache.updates.actions.insert ?? []
            ],
            modify: [
                ...previousCache.updates.actions.modify ?? []
            ],
            remove: [
                ...previousCache.updates.actions.remove ?? []
            ]
        },
        idToActionLookup: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, previousCache.updates.idToActionLookup),
        groupKeys
    };
    const dataRowIdToModelLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, previousCache.dataRowIdToModelLookup);
    const dataRowIdToIdLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, previousCache.dataRowIdToIdLookup);
    const alreadyAppliedActionsToRemove = {
        insert: {},
        modify: {},
        remove: {}
    };
    // Depending on the action already applied to the data row,
    // We might want drop the already-applied-update.
    // For instance:
    // - if you delete then insert, then you don't want to apply the deletion in the tree.
    // - if you insert, then modify, then you just want to apply the insertion in the tree.
    uniqueUpdates.forEach((partialRow, id)=>{
        const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id];
        // Action === "delete"
        // eslint-disable-next-line no-underscore-dangle
        if (partialRow._action === 'delete') {
            // If the data row has been removed since the last state update,
            // Then do nothing.
            if (actionAlreadyAppliedToRow === 'remove' || !dataRowIdToModelLookup[id]) {
                return;
            }
            // If the data row has been inserted / modified since the last state update,
            // Then drop this "insert" / "modify" update.
            if (actionAlreadyAppliedToRow != null) {
                alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;
            }
            // Remove the data row from the lookups and add it to the "delete" update.
            partialUpdates.actions.remove.push(id);
            delete dataRowIdToModelLookup[id];
            delete dataRowIdToIdLookup[id];
            return;
        }
        const oldRow = dataRowIdToModelLookup[id];
        // Action === "modify"
        if (oldRow) {
            // If the data row has been removed since the last state update,
            // Then drop this "remove" update and add it to the "modify" update instead.
            if (actionAlreadyAppliedToRow === 'remove') {
                alreadyAppliedActionsToRemove.remove[id] = true;
                partialUpdates.actions.modify.push(id);
            } else if (actionAlreadyAppliedToRow == null) {
                partialUpdates.actions.modify.push(id);
            }
            // Update the data row lookups.
            dataRowIdToModelLookup[id] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, oldRow, partialRow);
            return;
        }
        // Action === "insert"
        // If the data row has been removed since the last state update,
        // Then drop the "remove" update and add it to the "insert" update instead.
        if (actionAlreadyAppliedToRow === 'remove') {
            alreadyAppliedActionsToRemove.remove[id] = true;
            partialUpdates.actions.insert.push(id);
        } else if (actionAlreadyAppliedToRow == null) {
            partialUpdates.actions.insert.push(id);
        }
        // Update the data row lookups.
        dataRowIdToModelLookup[id] = partialRow;
        dataRowIdToIdLookup[id] = id;
    });
    const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);
    for(let i = 0; i < actionTypeWithActionsToRemove.length; i += 1){
        const actionType = actionTypeWithActionsToRemove[i];
        const idsToRemove = alreadyAppliedActionsToRemove[actionType];
        if (Object.keys(idsToRemove).length > 0) {
            partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter((id)=>!idsToRemove[id]);
        }
    }
    return {
        dataRowIdToModelLookup,
        dataRowIdToIdLookup,
        updates: partialUpdates,
        rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,
        loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,
        rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates
    };
};
function calculatePinnedRowsHeight(apiRef) {
    const pinnedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPinnedRowsSelector"])(apiRef);
    const topPinnedRowsHeight = pinnedRows?.top?.reduce((acc, value)=>{
        acc += apiRef.current.unstable_getRowHeight(value.id);
        return acc;
    }, 0) || 0;
    const bottomPinnedRowsHeight = pinnedRows?.bottom?.reduce((acc, value)=>{
        acc += apiRef.current.unstable_getRowHeight(value.id);
        return acc;
    }, 0) || 0;
    return {
        top: topPinnedRowsHeight,
        bottom: bottomPinnedRowsHeight
    };
}
const minimalContentHeight = 'var(--DataGrid-overlayHeight, calc(var(--height) * 2))';
function computeRowsUpdates(apiRef, updates, getRowId) {
    const nonPinnedRowsUpdates = [];
    updates.forEach((update)=>{
        const id = getRowIdFromRowModel(update, getRowId, 'A row was provided without id when calling updateRows():');
        const rowNode = apiRef.current.getRowNode(id);
        if (rowNode?.type === 'pinnedRow') {
            // @ts-ignore because otherwise `release:build` doesn't work
            const pinnedRowsCache = apiRef.current.caches.pinnedRows;
            const prevModel = pinnedRowsCache.idLookup[id];
            if (prevModel) {
                pinnedRowsCache.idLookup[id] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevModel, update);
            }
        } else {
            nonPinnedRowsUpdates.push(update);
        }
    });
    return nonPinnedRowsUpdates;
}
let warnedOnceInvalidRowHeight = false;
const getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage)=>{
    if (typeof rowHeightProp === 'number' && rowHeightProp > 0) {
        return rowHeightProp;
    }
    if (("TURBOPACK compile-time value", "development") !== 'production' && !warnedOnceInvalidRowHeight && typeof rowHeightProp !== 'undefined' && rowHeightProp !== null) {
        console.warn(warningMessage);
        warnedOnceInvalidRowHeight = true;
    }
    return defaultRowHeight;
};
const rowHeightWarning = [
    `MUI X: The \`rowHeight\` prop should be a number greater than 0.`,
    `The default value will be used instead.`
].join('\n');
const getRowHeightWarning = [
    `MUI X: The \`getRowHeight\` prop should return a number greater than 0 or 'auto'.`,
    `The default value will be used instead.`
].join('\n');
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridSortColumnLookupSelector": (()=>gridSortColumnLookupSelector),
    "gridSortModelSelector": (()=>gridSortModelSelector),
    "gridSortedRowEntriesSelector": (()=>gridSortedRowEntriesSelector),
    "gridSortedRowIdsSelector": (()=>gridSortedRowIdsSelector),
    "gridSortedRowIndexLookupSelector": (()=>gridSortedRowIndexLookupSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
;
;
;
/**
 * @category Sorting
 * @ignore - do not document.
 */ const gridSortingStateSelector = (state)=>state.sorting;
const gridSortedRowIdsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridSortingStateSelector, (sortingState)=>sortingState.sortedRows);
const gridSortedRowEntriesSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridSortedRowIdsSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLookupSelector"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"], (sortedIds, idRowsLookup, rowTree)=>sortedIds.reduce((acc, id)=>{
        const model = idRowsLookup[id];
        if (model) {
            acc.push({
                id,
                model
            });
        }
        const rowNode = rowTree[id];
        if (rowNode && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAutogeneratedRowNode"])(rowNode)) {
            acc.push({
                id,
                model: {
                    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ID_AUTOGENERATED"]]: id
                }
            });
        }
        return acc;
    }, []));
const gridSortModelSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridSortingStateSelector, (sorting)=>sorting.sortModel);
const gridSortColumnLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridSortModelSelector, (sortModel)=>{
    const result = sortModel.reduce((res, sortItem, index)=>{
        res[sortItem.field] = {
            sortDirection: sortItem.sort,
            sortIndex: sortModel.length > 1 ? index + 1 : undefined
        };
        return res;
    }, {});
    return result;
});
const gridSortedRowIndexLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridSortedRowIdsSelector, (sortedIds)=>{
    return sortedIds.reduce((acc, id, index)=>{
        acc[id] = index;
        return acc;
    }, Object.create(null));
});
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridExpandedRowCountSelector": (()=>gridExpandedRowCountSelector),
    "gridExpandedSortedRowEntriesSelector": (()=>gridExpandedSortedRowEntriesSelector),
    "gridExpandedSortedRowIdsSelector": (()=>gridExpandedSortedRowIdsSelector),
    "gridExpandedSortedRowTreeLevelPositionLookupSelector": (()=>gridExpandedSortedRowTreeLevelPositionLookupSelector),
    "gridFilterActiveItemsLookupSelector": (()=>gridFilterActiveItemsLookupSelector),
    "gridFilterActiveItemsSelector": (()=>gridFilterActiveItemsSelector),
    "gridFilterModelSelector": (()=>gridFilterModelSelector),
    "gridFilteredChildrenCountLookupSelector": (()=>gridFilteredChildrenCountLookupSelector),
    "gridFilteredDescendantCountLookupSelector": (()=>gridFilteredDescendantCountLookupSelector),
    "gridFilteredDescendantRowCountSelector": (()=>gridFilteredDescendantRowCountSelector),
    "gridFilteredRowCountSelector": (()=>gridFilteredRowCountSelector),
    "gridFilteredRowsLookupSelector": (()=>gridFilteredRowsLookupSelector),
    "gridFilteredSortedRowEntriesSelector": (()=>gridFilteredSortedRowEntriesSelector),
    "gridFilteredSortedRowIdsSelector": (()=>gridFilteredSortedRowIdsSelector),
    "gridFilteredSortedTopLevelRowEntriesSelector": (()=>gridFilteredSortedTopLevelRowEntriesSelector),
    "gridFilteredTopLevelRowCountSelector": (()=>gridFilteredTopLevelRowCountSelector),
    "gridQuickFilterValuesSelector": (()=>gridQuickFilterValuesSelector),
    "gridVisibleRowsLookupSelector": (()=>gridVisibleRowsLookupSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
;
;
;
;
/**
 * @category Filtering
 */ const gridFilterStateSelector = (state)=>state.filter;
const gridFilterModelSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFilterStateSelector, (filterState)=>filterState.filterModel);
const gridQuickFilterValuesSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFilterModelSelector, (filterModel)=>filterModel.quickFilterValues);
const gridVisibleRowsLookupSelector = (state)=>state.visibleRowsLookup;
const gridFilteredRowsLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFilterStateSelector, (filterState)=>filterState.filteredRowsLookup);
const gridFilteredChildrenCountLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFilterStateSelector, (filterState)=>filterState.filteredChildrenCountLookup);
const gridFilteredDescendantCountLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFilterStateSelector, (filterState)=>filterState.filteredDescendantCountLookup);
const gridExpandedSortedRowEntriesSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridVisibleRowsLookupSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortedRowEntriesSelector"], (visibleRowsLookup, sortedRows)=>sortedRows.filter((row)=>visibleRowsLookup[row.id] !== false));
const gridExpandedSortedRowIdsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridExpandedSortedRowEntriesSelector, (visibleSortedRowEntries)=>visibleSortedRowEntries.map((row)=>row.id));
const gridFilteredSortedRowEntriesSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridFilteredRowsLookupSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortedRowEntriesSelector"], (filteredRowsLookup, sortedRows)=>sortedRows.filter((row)=>filteredRowsLookup[row.id] !== false));
const gridFilteredSortedRowIdsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridFilteredSortedRowEntriesSelector, (filteredSortedRowEntries)=>filteredSortedRowEntries.map((row)=>row.id));
const gridExpandedSortedRowTreeLevelPositionLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridExpandedSortedRowIdsSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"], (visibleSortedRowIds, rowTree)=>{
    const depthPositionCounter = {};
    let lastDepth = 0;
    return visibleSortedRowIds.reduce((acc, rowId)=>{
        const rowNode = rowTree[rowId];
        if (!depthPositionCounter[rowNode.depth]) {
            depthPositionCounter[rowNode.depth] = 0;
        }
        // going deeper in the tree should reset the counter
        // since it might have been used in some other branch at the same level, up in the tree
        // going back up should keep the counter and continue where it left off
        if (rowNode.depth > lastDepth) {
            depthPositionCounter[rowNode.depth] = 0;
        }
        lastDepth = rowNode.depth;
        depthPositionCounter[rowNode.depth] += 1;
        acc[rowId] = depthPositionCounter[rowNode.depth];
        return acc;
    }, {});
});
const gridFilteredSortedTopLevelRowEntriesSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridExpandedSortedRowEntriesSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowMaximumTreeDepthSelector"], (visibleSortedRows, rowTree, rowTreeDepth)=>{
    if (rowTreeDepth < 2) {
        return visibleSortedRows;
    }
    return visibleSortedRows.filter((row)=>rowTree[row.id]?.depth === 0);
});
const gridExpandedRowCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridExpandedSortedRowEntriesSelector, (visibleSortedRows)=>visibleSortedRows.length);
const gridFilteredTopLevelRowCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFilteredSortedTopLevelRowEntriesSelector, (visibleSortedTopLevelRows)=>visibleSortedTopLevelRows.length);
const gridFilteredRowCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFilteredSortedRowEntriesSelector, (filteredSortedRowEntries)=>filteredSortedRowEntries.length);
const gridFilteredDescendantRowCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFilteredRowCountSelector, gridFilteredTopLevelRowCountSelector, (totalRowCount, topLevelRowCount)=>totalRowCount - topLevelRowCount);
const gridFilterActiveItemsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridFilterModelSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnLookupSelector"], (filterModel, columnLookup)=>filterModel.items?.filter((item)=>{
        if (!item.field) {
            return false;
        }
        const column = columnLookup[item.field];
        if (!column?.filterOperators || column?.filterOperators?.length === 0) {
            return false;
        }
        const filterOperator = column.filterOperators.find((operator)=>operator.value === item.operator);
        if (!filterOperator) {
            return false;
        }
        return !filterOperator.InputComponent || item.value != null && item.value?.toString() !== '';
    }));
const gridFilterActiveItemsLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridFilterActiveItemsSelector, (activeFilters)=>{
    const result = activeFilters.reduce((res, filterItem)=>{
        if (!res[filterItem.field]) {
            res[filterItem.field] = [
                filterItem
            ];
        } else {
            res[filterItem.field].push(filterItem);
        }
        return res;
    }, {});
    return result;
});
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridColumnGroupingSelector": (()=>gridColumnGroupingSelector),
    "gridColumnGroupsHeaderMaxDepthSelector": (()=>gridColumnGroupsHeaderMaxDepthSelector),
    "gridColumnGroupsHeaderStructureSelector": (()=>gridColumnGroupsHeaderStructureSelector),
    "gridColumnGroupsLookupSelector": (()=>gridColumnGroupsLookupSelector),
    "gridColumnGroupsUnwrappedModelSelector": (()=>gridColumnGroupsUnwrappedModelSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
;
const gridColumnGroupingSelector = (state)=>state.columnGrouping;
const gridColumnGroupsUnwrappedModelSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnGroupingSelector, (columnGrouping)=>columnGrouping?.unwrappedGroupingModel ?? {});
const gridColumnGroupsLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnGroupingSelector, (columnGrouping)=>columnGrouping?.lookup ?? {});
const gridColumnGroupsHeaderStructureSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridColumnGroupingSelector, (columnGrouping)=>columnGrouping?.headerStructure ?? []);
const gridColumnGroupsHeaderMaxDepthSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridColumnGroupingSelector, (columnGrouping)=>columnGrouping?.maxDepth ?? 0);
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridRowSelectionStateSelector": (()=>gridRowSelectionStateSelector),
    "selectedGridRowsCountSelector": (()=>selectedGridRowsCountSelector),
    "selectedGridRowsSelector": (()=>selectedGridRowsSelector),
    "selectedIdsLookupSelector": (()=>selectedIdsLookupSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
;
;
const gridRowSelectionStateSelector = (state)=>state.rowSelection;
const selectedGridRowsCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowSelectionStateSelector, (selection)=>selection.length);
const selectedGridRowsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridRowSelectionStateSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLookupSelector"], (selectedRows, rowsLookup)=>new Map(selectedRows.map((id)=>[
            id,
            rowsLookup[id]
        ])));
const selectedIdsLookupSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridRowSelectionStateSelector, (selection)=>selection.reduce((lookup, rowId)=>{
        lookup[rowId] = rowId;
        return lookup;
    }, {}));
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "GridSignature": (()=>GridSignature),
    "createUseGridApiEventHandler": (()=>createUseGridApiEventHandler),
    "unstable_resetCleanupTracking": (()=>unstable_resetCleanupTracking),
    "useGridApiEventHandler": (()=>useGridApiEventHandler),
    "useGridApiOptionHandler": (()=>useGridApiOptionHandler)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$cleanupTracking$2f$TimerBasedCleanupTracking$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/cleanupTracking/TimerBasedCleanupTracking.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$cleanupTracking$2f$FinalizationRegistryBasedCleanupTracking$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js [app-client] (ecmascript)");
;
;
;
/**
 * Signal to the underlying logic what version of the public component API
 * of the Data Grid is exposed.
 */ var GridSignature = /*#__PURE__*/ function(GridSignature) {
    GridSignature["DataGrid"] = "DataGrid";
    GridSignature["DataGridPro"] = "DataGridPro";
    GridSignature["DataGridPremium"] = "DataGridPremium";
    return GridSignature;
}(GridSignature || {});
// We use class to make it easier to detect in heap snapshots by name
class ObjectToBeRetainedByReact {
}
function createUseGridApiEventHandler(registryContainer) {
    let cleanupTokensCounter = 0;
    return function useGridApiEventHandler(apiRef, eventName, handler, options) {
        if (registryContainer.registry === null) {
            registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$cleanupTracking$2f$FinalizationRegistryBasedCleanupTracking$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FinalizationRegistryBasedCleanupTracking"]() : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$cleanupTracking$2f$TimerBasedCleanupTracking$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TimerBasedCleanupTracking"]();
        }
        const [objectRetainedByReact] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState(new ObjectToBeRetainedByReact());
        const subscription = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
        const handlerRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
        handlerRef.current = handler;
        const cleanupTokenRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
        if (!subscription.current && handlerRef.current) {
            const enhancedHandler = (params, event, details)=>{
                if (!event.defaultMuiPrevented) {
                    handlerRef.current?.(params, event, details);
                }
            };
            subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
            cleanupTokensCounter += 1;
            cleanupTokenRef.current = {
                cleanupToken: cleanupTokensCounter
            };
            registryContainer.registry.register(objectRetainedByReact, // The callback below will be called once this reference stops being retained
            ()=>{
                subscription.current?.();
                subscription.current = null;
                cleanupTokenRef.current = null;
            }, cleanupTokenRef.current);
        } else if (!handlerRef.current && subscription.current) {
            subscription.current();
            subscription.current = null;
            if (cleanupTokenRef.current) {
                registryContainer.registry.unregister(cleanupTokenRef.current);
                cleanupTokenRef.current = null;
            }
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
            "createUseGridApiEventHandler.useGridApiEventHandler.useEffect": ()=>{
                if (!subscription.current && handlerRef.current) {
                    const enhancedHandler = {
                        "createUseGridApiEventHandler.useGridApiEventHandler.useEffect.enhancedHandler": (params, event, details)=>{
                            if (!event.defaultMuiPrevented) {
                                handlerRef.current?.(params, event, details);
                            }
                        }
                    }["createUseGridApiEventHandler.useGridApiEventHandler.useEffect.enhancedHandler"];
                    subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
                }
                if (cleanupTokenRef.current && registryContainer.registry) {
                    // If the effect was called, it means that this render was committed
                    // so we can trust the cleanup function to remove the listener.
                    registryContainer.registry.unregister(cleanupTokenRef.current);
                    cleanupTokenRef.current = null;
                }
                return ({
                    "createUseGridApiEventHandler.useGridApiEventHandler.useEffect": ()=>{
                        subscription.current?.();
                        subscription.current = null;
                    }
                })["createUseGridApiEventHandler.useGridApiEventHandler.useEffect"];
            }
        }["createUseGridApiEventHandler.useGridApiEventHandler.useEffect"], [
            apiRef,
            eventName,
            options
        ]);
    };
}
const registryContainer = {
    registry: null
};
const unstable_resetCleanupTracking = ()=>{
    registryContainer.registry?.reset();
    registryContainer.registry = null;
};
const useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);
const optionsSubscriberOptions = {
    isFirst: true
};
function useGridApiOptionHandler(apiRef, eventName, handler) {
    useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);
}
;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ROW_SELECTION_PROPAGATION_DEFAULT": (()=>ROW_SELECTION_PROPAGATION_DEFAULT),
    "findRowsToDeselect": (()=>findRowsToDeselect),
    "findRowsToSelect": (()=>findRowsToSelect),
    "getCheckboxPropsSelector": (()=>getCheckboxPropsSelector),
    "isMultipleRowSelectionEnabled": (()=>isMultipleRowSelectionEnabled)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
const ROW_SELECTION_PROPAGATION_DEFAULT = {
    parents: false,
    descendants: false
};
function getGridRowGroupSelectableDescendants(apiRef, groupId) {
    const rowTree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(apiRef);
    const sortedRowIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortedRowIdsSelector"])(apiRef);
    const filteredRowsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredRowsLookupSelector"])(apiRef);
    const groupNode = rowTree[groupId];
    if (!groupNode || groupNode.type !== 'group') {
        return [];
    }
    const descendants = [];
    const startIndex = sortedRowIds.findIndex((id)=>id === groupId) + 1;
    for(let index = startIndex; index < sortedRowIds.length && rowTree[sortedRowIds[index]]?.depth > groupNode.depth; index += 1){
        const id = sortedRowIds[index];
        if (filteredRowsLookup[id] !== false && apiRef.current.isRowSelectable(id)) {
            descendants.push(id);
        }
    }
    return descendants;
}
function getCheckboxPropsSelector(groupId, autoSelectParents) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortedRowIdsSelector"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredRowsLookupSelector"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedIdsLookupSelector"], (rowTree, sortedRowIds, filteredRowsLookup, rowSelectionLookup)=>{
        const groupNode = rowTree[groupId];
        if (!groupNode || groupNode.type !== 'group') {
            return {
                isIndeterminate: false,
                isChecked: rowSelectionLookup[groupId] === groupId
            };
        }
        if (rowSelectionLookup[groupId] === groupId) {
            return {
                isIndeterminate: false,
                isChecked: true
            };
        }
        let selectableDescendantsCount = 0;
        let selectedDescendantsCount = 0;
        const startIndex = sortedRowIds.findIndex((id)=>id === groupId) + 1;
        for(let index = startIndex; index < sortedRowIds.length && rowTree[sortedRowIds[index]]?.depth > groupNode.depth; index += 1){
            const id = sortedRowIds[index];
            if (filteredRowsLookup[id] !== false) {
                selectableDescendantsCount += 1;
                if (rowSelectionLookup[id] !== undefined) {
                    selectedDescendantsCount += 1;
                }
            }
        }
        return {
            isIndeterminate: selectedDescendantsCount > 0 && (selectedDescendantsCount < selectableDescendantsCount || rowSelectionLookup[groupId] === undefined),
            isChecked: autoSelectParents ? selectedDescendantsCount > 0 : rowSelectionLookup[groupId] === groupId
        };
    });
}
function isMultipleRowSelectionEnabled(props) {
    if (props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid) {
        // DataGrid Community has multiple row selection enabled only if checkbox selection is enabled.
        return props.checkboxSelection && props.disableMultipleRowSelection !== true;
    }
    return !props.disableMultipleRowSelection;
}
const getRowNodeParents = (tree, id)=>{
    const parents = [];
    let parent = id;
    while(parent != null && parent !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]){
        const node = tree[parent];
        if (!node) {
            return parents;
        }
        parents.push(parent);
        parent = node.parent;
    }
    return parents;
};
const getFilteredRowNodeSiblings = (tree, filteredRows, id)=>{
    const node = tree[id];
    if (!node) {
        return [];
    }
    const parent = node.parent;
    if (parent == null) {
        return [];
    }
    const parentNode = tree[parent];
    return parentNode.children.filter((childId)=>childId !== id && filteredRows[childId]);
};
const findRowsToSelect = (apiRef, tree, selectedRow, autoSelectDescendants, autoSelectParents, addRow)=>{
    const filteredRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredRowsLookupSelector"])(apiRef);
    const selectedIdsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedIdsLookupSelector"])(apiRef);
    const selectedDescendants = new Set([]);
    if (!autoSelectDescendants && !autoSelectParents) {
        return;
    }
    if (autoSelectDescendants) {
        const rowNode = tree[selectedRow];
        if (rowNode?.type === 'group') {
            const descendants = getGridRowGroupSelectableDescendants(apiRef, selectedRow);
            descendants.forEach((rowId)=>{
                addRow(rowId);
                selectedDescendants.add(rowId);
            });
        }
    }
    if (autoSelectParents) {
        const checkAllDescendantsSelected = (rowId)=>{
            if (selectedIdsLookup[rowId] !== rowId && !selectedDescendants.has(rowId)) {
                return false;
            }
            const node = tree[rowId];
            if (node?.type !== 'group') {
                return true;
            }
            return node.children.every(checkAllDescendantsSelected);
        };
        const traverseParents = (rowId)=>{
            const siblings = getFilteredRowNodeSiblings(tree, filteredRows, rowId);
            if (siblings.length === 0 || siblings.every(checkAllDescendantsSelected)) {
                const rowNode = tree[rowId];
                const parent = rowNode.parent;
                if (parent != null && parent !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"] && apiRef.current.isRowSelectable(parent)) {
                    addRow(parent);
                    selectedDescendants.add(parent);
                    traverseParents(parent);
                }
            }
        };
        traverseParents(selectedRow);
    }
};
const findRowsToDeselect = (apiRef, tree, deselectedRow, autoSelectDescendants, autoSelectParents, removeRow)=>{
    const selectedIdsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedIdsLookupSelector"])(apiRef);
    if (!autoSelectParents && !autoSelectDescendants) {
        return;
    }
    if (autoSelectParents) {
        const allParents = getRowNodeParents(tree, deselectedRow);
        allParents.forEach((parent)=>{
            const isSelected = selectedIdsLookup[parent] === parent;
            if (isSelected) {
                removeRow(parent);
            }
        });
    }
    if (autoSelectDescendants) {
        const rowNode = tree[deselectedRow];
        if (rowNode?.type === 'group') {
            const descendants = getGridRowGroupSelectableDescendants(apiRef, deselectedRow);
            descendants.forEach((descendant)=>{
                removeRow(descendant);
            });
        }
    }
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridAriaAttributes.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridAriaAttributes": (()=>useGridAriaAttributes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/utils.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
const useGridAriaAttributes = ()=>{
    const apiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridPrivateApiContext"])();
    const rootProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRootProps"])();
    const visibleColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"]);
    const accessibleRowCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedRowCountSelector"]);
    const headerGroupingMaxDepth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnGroupsHeaderMaxDepthSelector"]);
    const pinnedRowsCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPinnedRowsCountSelector"]);
    return {
        role: 'grid',
        'aria-colcount': visibleColumns.length,
        'aria-rowcount': headerGroupingMaxDepth + 1 + pinnedRowsCount + accessibleRowCount,
        'aria-multiselectable': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMultipleRowSelectionEnabled"])(rootProps)
    };
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowAriaAttributes.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRowAriaAttributes": (()=>useGridRowAriaAttributes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js [app-client] (ecmascript)");
;
;
;
;
;
const useGridRowAriaAttributes = ()=>{
    const apiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridPrivateApiContext"])();
    const selectedIdsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedIdsLookupSelector"]);
    const headerGroupingMaxDepth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnGroupsHeaderMaxDepthSelector"]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowAriaAttributes.useCallback": (rowNode, index)=>{
            const ariaAttributes = {};
            const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based
            ariaAttributes['aria-rowindex'] = ariaRowIndex;
            if (apiRef.current.isRowSelectable(rowNode.id)) {
                ariaAttributes['aria-selected'] = selectedIdsLookup[rowNode.id] !== undefined;
            }
            return ariaAttributes;
        }
    }["useGridRowAriaAttributes.useCallback"], [
        apiRef,
        selectedIdsLookup,
        headerGroupingMaxDepth
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridApiContext": (()=>useGridApiContext)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$GridApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/components/GridApiContext.js [app-client] (ecmascript)");
;
;
function useGridApiContext() {
    const apiRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useContext(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$GridApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridApiContext"]);
    if (apiRef === undefined) {
        throw new Error([
            'MUI X: Could not find the Data Grid context.',
            'It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.',
            'This can also happen if you are bundling multiple versions of the Data Grid.'
        ].join('\n'));
    }
    return apiRef;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowSpanningSelectors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridRowSpanningHiddenCellsOriginMapSelector": (()=>gridRowSpanningHiddenCellsOriginMapSelector),
    "gridRowSpanningHiddenCellsSelector": (()=>gridRowSpanningHiddenCellsSelector),
    "gridRowSpanningSpannedCellsSelector": (()=>gridRowSpanningSpannedCellsSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
;
const gridRowSpanningStateSelector = (state)=>state.rowSpanning;
const gridRowSpanningHiddenCellsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowSpanningStateSelector, (rowSpanning)=>rowSpanning.hiddenCells);
const gridRowSpanningSpannedCellsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowSpanningStateSelector, (rowSpanning)=>rowSpanning.spannedCells);
const gridRowSpanningHiddenCellsOriginMapSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridRowSpanningStateSelector, (rowSpanning)=>rowSpanning.hiddenCellOriginMap);
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridPreferencePanelStateSelector": (()=>gridPreferencePanelStateSelector)
});
const gridPreferencePanelStateSelector = (state)=>state.preferencePanel;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelsValue.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "GridPreferencePanelsValue": (()=>GridPreferencePanelsValue)
});
var GridPreferencePanelsValue = /*#__PURE__*/ function(GridPreferencePanelsValue) {
    GridPreferencePanelsValue["filters"] = "filters";
    GridPreferencePanelsValue["columns"] = "columns";
    return GridPreferencePanelsValue;
}(GridPreferencePanelsValue || {});
;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenuSlots.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridColumnMenuSlots": (()=>useGridColumnMenuSlots)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js [app-client] (ecmascript)");
;
;
const _excluded = [
    "displayOrder"
];
;
;
;
const useGridColumnMenuSlots = (props)=>{
    const apiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridPrivateApiContext"])();
    const rootProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRootProps"])();
    const { defaultSlots, defaultSlotProps, slots = {}, slotProps = {}, hideMenu, colDef, addDividers = true } = props;
    const processedComponents = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridColumnMenuSlots.useMemo[processedComponents]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, defaultSlots, slots)
    }["useGridColumnMenuSlots.useMemo[processedComponents]"], [
        defaultSlots,
        slots
    ]);
    const processedSlotProps = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridColumnMenuSlots.useMemo[processedSlotProps]": ()=>{
            if (!slotProps || Object.keys(slotProps).length === 0) {
                return defaultSlotProps;
            }
            const mergedProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, slotProps);
            Object.entries(defaultSlotProps).forEach({
                "useGridColumnMenuSlots.useMemo[processedSlotProps]": ([key, currentSlotProps])=>{
                    mergedProps[key] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, currentSlotProps, slotProps[key] || {});
                }
            }["useGridColumnMenuSlots.useMemo[processedSlotProps]"]);
            return mergedProps;
        }
    }["useGridColumnMenuSlots.useMemo[processedSlotProps]"], [
        defaultSlotProps,
        slotProps
    ]);
    const defaultItems = apiRef.current.unstable_applyPipeProcessors('columnMenu', [], props.colDef);
    const userItems = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridColumnMenuSlots.useMemo[userItems]": ()=>{
            const defaultComponentKeys = Object.keys(defaultSlots);
            return Object.keys(slots).filter({
                "useGridColumnMenuSlots.useMemo[userItems]": (key)=>!defaultComponentKeys.includes(key)
            }["useGridColumnMenuSlots.useMemo[userItems]"]);
        }
    }["useGridColumnMenuSlots.useMemo[userItems]"], [
        slots,
        defaultSlots
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridColumnMenuSlots.useMemo": ()=>{
            const uniqueItems = Array.from(new Set([
                ...defaultItems,
                ...userItems
            ]));
            const cleansedItems = uniqueItems.filter({
                "useGridColumnMenuSlots.useMemo.cleansedItems": (key)=>processedComponents[key] != null
            }["useGridColumnMenuSlots.useMemo.cleansedItems"]);
            const sorted = cleansedItems.sort({
                "useGridColumnMenuSlots.useMemo.sorted": (a, b)=>{
                    const leftItemProps = processedSlotProps[a];
                    const rightItemProps = processedSlotProps[b];
                    const leftDisplayOrder = Number.isFinite(leftItemProps?.displayOrder) ? leftItemProps.displayOrder : 100;
                    const rightDisplayOrder = Number.isFinite(rightItemProps?.displayOrder) ? rightItemProps.displayOrder : 100;
                    return leftDisplayOrder - rightDisplayOrder;
                }
            }["useGridColumnMenuSlots.useMemo.sorted"]);
            return sorted.reduce({
                "useGridColumnMenuSlots.useMemo": (acc, key, index)=>{
                    let itemProps = {
                        colDef,
                        onClick: hideMenu
                    };
                    const processedComponentProps = processedSlotProps[key];
                    if (processedComponentProps) {
                        const customProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(processedComponentProps, _excluded);
                        itemProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, itemProps, customProps);
                    }
                    return addDividers && index !== sorted.length - 1 ? [
                        ...acc,
                        [
                            processedComponents[key],
                            itemProps
                        ],
                        [
                            rootProps.slots.baseDivider,
                            {}
                        ]
                    ] : [
                        ...acc,
                        [
                            processedComponents[key],
                            itemProps
                        ]
                    ];
                }
            }["useGridColumnMenuSlots.useMemo"], []);
        }
    }["useGridColumnMenuSlots.useMemo"], [
        addDividers,
        colDef,
        defaultItems,
        hideMenu,
        processedComponents,
        processedSlotProps,
        userItems,
        rootProps.slots.baseDivider
    ]);
};
;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridDimensionsSelector": (()=>gridDimensionsSelector)
});
const gridDimensionsSelector = (state)=>state.dimensions;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridRenderContextColumnsSelector": (()=>gridRenderContextColumnsSelector),
    "gridRenderContextSelector": (()=>gridRenderContextSelector),
    "gridVirtualizationColumnEnabledSelector": (()=>gridVirtualizationColumnEnabledSelector),
    "gridVirtualizationEnabledSelector": (()=>gridVirtualizationEnabledSelector),
    "gridVirtualizationRowEnabledSelector": (()=>gridVirtualizationRowEnabledSelector),
    "gridVirtualizationSelector": (()=>gridVirtualizationSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
;
const gridVirtualizationSelector = (state)=>state.virtualization;
const gridVirtualizationEnabledSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridVirtualizationSelector, (state)=>state.enabled);
const gridVirtualizationColumnEnabledSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridVirtualizationSelector, (state)=>state.enabledForColumns);
const gridVirtualizationRowEnabledSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridVirtualizationSelector, (state)=>state.enabledForRows);
const gridRenderContextSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridVirtualizationSelector, (state)=>state.renderContext);
const gridRenderContextColumnsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])((state)=>state.virtualization.renderContext.firstColumnIndex, (state)=>state.virtualization.renderContext.lastColumnIndex, (firstColumnIndex, lastColumnIndex)=>({
        firstColumnIndex,
        lastColumnIndex
    }));
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/listView/gridListViewSelectors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Get the list column definition
 * @category List View
 * @ignore - Do not document
 */ __turbopack_esm__({
    "gridListColumnSelector": (()=>gridListColumnSelector)
});
const gridListColumnSelector = (state)=>state.listViewColumn;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridFocusCellSelector": (()=>gridFocusCellSelector),
    "gridFocusColumnGroupHeaderSelector": (()=>gridFocusColumnGroupHeaderSelector),
    "gridFocusColumnHeaderFilterSelector": (()=>gridFocusColumnHeaderFilterSelector),
    "gridFocusColumnHeaderSelector": (()=>gridFocusColumnHeaderSelector),
    "gridFocusStateSelector": (()=>gridFocusStateSelector),
    "gridTabIndexCellSelector": (()=>gridTabIndexCellSelector),
    "gridTabIndexColumnGroupHeaderSelector": (()=>gridTabIndexColumnGroupHeaderSelector),
    "gridTabIndexColumnHeaderFilterSelector": (()=>gridTabIndexColumnHeaderFilterSelector),
    "gridTabIndexColumnHeaderSelector": (()=>gridTabIndexColumnHeaderSelector),
    "gridTabIndexStateSelector": (()=>gridTabIndexStateSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
;
const gridFocusStateSelector = (state)=>state.focus;
const gridFocusCellSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFocusStateSelector, (focusState)=>focusState.cell);
const gridFocusColumnHeaderSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFocusStateSelector, (focusState)=>focusState.columnHeader);
const gridFocusColumnHeaderFilterSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFocusStateSelector, (focusState)=>focusState.columnHeaderFilter);
const gridFocusColumnGroupHeaderSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridFocusStateSelector, (focusState)=>focusState.columnGroupHeader);
const gridTabIndexStateSelector = (state)=>state.tabIndex;
const gridTabIndexCellSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridTabIndexStateSelector, (state)=>state.cell);
const gridTabIndexColumnHeaderSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridTabIndexStateSelector, (state)=>state.columnHeader);
const gridTabIndexColumnHeaderFilterSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridTabIndexStateSelector, (state)=>state.columnHeaderFilter);
const gridTabIndexColumnGroupHeaderSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridTabIndexStateSelector, (state)=>state.columnGroupHeader);
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridRowsMetaSelector": (()=>gridRowsMetaSelector)
});
const gridRowsMetaSelector = (state)=>state.rowsMeta;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "defaultPageSize": (()=>defaultPageSize),
    "getDefaultGridPaginationModel": (()=>getDefaultGridPaginationModel),
    "getPageCount": (()=>getPageCount),
    "getValidPage": (()=>getValidPage),
    "throwIfPageSizeExceedsTheLimit": (()=>throwIfPageSizeExceedsTheLimit)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
const MAX_PAGE_SIZE = 100;
const defaultPageSize = (autoPageSize)=>autoPageSize ? 0 : 100;
const getPageCount = (rowCount, pageSize, page)=>{
    if (pageSize > 0 && rowCount > 0) {
        return Math.ceil(rowCount / pageSize);
    }
    if (rowCount === -1) {
        // With unknown row-count, we can assume a page after the current one
        return page + 2;
    }
    return 0;
};
const getDefaultGridPaginationModel = (autoPageSize)=>({
        page: 0,
        pageSize: autoPageSize ? 0 : 100
    });
const getValidPage = (page, pageCount = 0)=>{
    if (pageCount === 0) {
        return page;
    }
    return Math.max(Math.min(page, pageCount - 1), 0);
};
const throwIfPageSizeExceedsTheLimit = (pageSize, signatureProp)=>{
    if (signatureProp === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid && pageSize > MAX_PAGE_SIZE) {
        throw new Error([
            'MUI X: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.',
            'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'
        ].join('\n'));
    }
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridPageCountSelector": (()=>gridPageCountSelector),
    "gridPageSelector": (()=>gridPageSelector),
    "gridPageSizeSelector": (()=>gridPageSizeSelector),
    "gridPaginatedVisibleSortedGridRowEntriesSelector": (()=>gridPaginatedVisibleSortedGridRowEntriesSelector),
    "gridPaginatedVisibleSortedGridRowIdsSelector": (()=>gridPaginatedVisibleSortedGridRowIdsSelector),
    "gridPaginationMetaSelector": (()=>gridPaginationMetaSelector),
    "gridPaginationModelSelector": (()=>gridPaginationModelSelector),
    "gridPaginationRowCountSelector": (()=>gridPaginationRowCountSelector),
    "gridPaginationRowRangeSelector": (()=>gridPaginationRowRangeSelector),
    "gridPaginationSelector": (()=>gridPaginationSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
;
;
;
;
const ALL_RESULTS_PAGE_VALUE = -1;
const gridPaginationSelector = (state)=>state.pagination;
const gridPaginationModelSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridPaginationSelector, (pagination)=>pagination.paginationModel);
const gridPaginationRowCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridPaginationSelector, (pagination)=>pagination.rowCount);
const gridPaginationMetaSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridPaginationSelector, (pagination)=>pagination.meta);
const gridPageSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridPaginationModelSelector, (paginationModel)=>paginationModel.page);
const gridPageSizeSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridPaginationModelSelector, (paginationModel)=>paginationModel.pageSize);
const gridPageCountSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridPaginationModelSelector, gridPaginationRowCountSelector, (paginationModel, rowCount)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPageCount"])(rowCount, paginationModel.pageSize, paginationModel.page));
const gridPaginationRowRangeSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(gridPaginationModelSelector, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowMaximumTreeDepthSelector"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowEntriesSelector"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredSortedTopLevelRowEntriesSelector"], (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries)=>{
    const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;
    const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);
    const topLevelLastRowIndex = paginationModel.pageSize === ALL_RESULTS_PAGE_VALUE ? visibleTopLevelRowCount - 1 : Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);
    // The range contains no element
    if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {
        return null;
    }
    // The tree is flat, there is no need to look for children
    if (rowTreeDepth < 2) {
        return {
            firstRowIndex: topLevelFirstRowIndex,
            lastRowIndex: topLevelLastRowIndex
        };
    }
    const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];
    const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;
    const firstRowIndex = visibleSortedRowEntries.findIndex((row)=>row.id === topLevelFirstRow.id);
    let lastRowIndex = firstRowIndex;
    let topLevelRowAdded = 0;
    while(lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount){
        const row = visibleSortedRowEntries[lastRowIndex];
        const depth = rowTree[row.id]?.depth;
        if (depth === undefined) {
            lastRowIndex += 1;
        } else {
            if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {
                lastRowIndex += 1;
            }
            if (depth === 0) {
                topLevelRowAdded += 1;
            }
        }
    }
    return {
        firstRowIndex,
        lastRowIndex: lastRowIndex - 1
    };
});
const gridPaginatedVisibleSortedGridRowEntriesSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowEntriesSelector"], gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange)=>{
    if (!paginationRange) {
        return [];
    }
    return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
});
const gridPaginatedVisibleSortedGridRowIdsSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelectorMemoized"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowIdsSelector"], gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange)=>{
    if (!paginationRange) {
        return [];
    }
    return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
});
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getVisibleRows": (()=>getVisibleRows),
    "useGridVisibleRows": (()=>useGridVisibleRows)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js [app-client] (ecmascript)");
;
;
;
const getVisibleRows = (apiRef, props)=>{
    let rows;
    let range;
    if (props.pagination && props.paginationMode === 'client') {
        range = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationRowRangeSelector"])(apiRef);
        rows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginatedVisibleSortedGridRowEntriesSelector"])(apiRef);
    } else {
        rows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowEntriesSelector"])(apiRef);
        if (rows.length === 0) {
            range = null;
        } else {
            range = {
                firstRowIndex: 0,
                lastRowIndex: rows.length - 1
            };
        }
    }
    return {
        rows,
        range
    };
};
const useGridVisibleRows = (apiRef, props)=>{
    const response = getVisibleRows(apiRef, props);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridVisibleRows.useMemo": ()=>({
                rows: response.rows,
                range: response.range
            })
    }["useGridVisibleRows.useMemo"], [
        response.rows,
        response.range
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridApiMethod": (()=>useGridApiMethod)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js [app-client] (ecmascript)");
;
;
function useGridApiMethod(privateApiRef, apiMethods, visibility) {
    const isFirstRender = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
        "useGridApiMethod.useEnhancedEffect": ()=>{
            isFirstRender.current = false;
            privateApiRef.current.register(visibility, apiMethods);
        }
    }["useGridApiMethod.useEnhancedEffect"], [
        privateApiRef,
        visibility,
        apiMethods
    ]);
    if (isFirstRender.current) {
        privateApiRef.current.register(visibility, apiMethods);
    }
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualization.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "EMPTY_RENDER_CONTEXT": (()=>EMPTY_RENDER_CONTEXT),
    "useGridVirtualization": (()=>useGridVirtualization),
    "virtualizationStateInitializer": (()=>virtualizationStateInitializer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
const EMPTY_RENDER_CONTEXT = {
    firstRowIndex: 0,
    lastRowIndex: 0,
    firstColumnIndex: 0,
    lastColumnIndex: 0
};
const virtualizationStateInitializer = (state, props)=>{
    const { disableVirtualization, autoHeight } = props;
    const virtualization = {
        enabled: !disableVirtualization,
        enabledForColumns: !disableVirtualization,
        enabledForRows: !disableVirtualization && !autoHeight,
        renderContext: EMPTY_RENDER_CONTEXT
    };
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        virtualization
    });
};
function useGridVirtualization(apiRef, props) {
    /*
   * API METHODS
   */ const setVirtualization = (enabled)=>{
        apiRef.current.setState((state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                virtualization: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.virtualization, {
                    enabled,
                    enabledForColumns: enabled,
                    enabledForRows: enabled && !props.autoHeight
                })
            }));
    };
    const setColumnVirtualization = (enabled)=>{
        apiRef.current.setState((state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                virtualization: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.virtualization, {
                    enabledForColumns: enabled
                })
            }));
    };
    const api = {
        unstable_setVirtualization: setVirtualization,
        unstable_setColumnVirtualization: setColumnVirtualization
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, api, 'public');
    /*
   * EFFECTS
   */ /* eslint-disable react-hooks/exhaustive-deps */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridVirtualization.useEffect": ()=>{
            setVirtualization(!props.disableVirtualization);
        }
    }["useGridVirtualization.useEffect"], [
        props.disableVirtualization,
        props.autoHeight
    ]);
/* eslint-enable react-hooks/exhaustive-deps */ }
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useRunOnce.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useRunOnce": (()=>useRunOnce)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js [app-client] (ecmascript) <export default as unstable_useEnhancedEffect>");
;
;
const noop = ()=>{};
const useRunOnce = (condition, effect)=>{
    const didRun = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(false);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useRunOnce.useEnhancedEffect": ()=>{
            if (didRun.current || !condition) {
                return noop;
            }
            didRun.current = true;
            return effect();
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }
    }["useRunOnce.useEnhancedEffect"], [
        didRun.current || condition
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildAggregatedSortingApplier": (()=>buildAggregatedSortingApplier),
    "getNextGridSortDirection": (()=>getNextGridSortDirection),
    "gridDateComparator": (()=>gridDateComparator),
    "gridNumberComparator": (()=>gridNumberComparator),
    "gridStringOrNumberComparator": (()=>gridStringOrNumberComparator),
    "mergeStateWithSortModel": (()=>mergeStateWithSortModel),
    "sanitizeSortModel": (()=>sanitizeSortModel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/warning/warning.js [app-client] (ecmascript)");
;
;
const sanitizeSortModel = (model, disableMultipleColumnsSorting)=>{
    if (disableMultipleColumnsSorting && model.length > 1) {
        if ("TURBOPACK compile-time truthy", 1) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])([
                'MUI X: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.',
                'If you are using the community version of the Data Grid, this prop is always `true`.'
            ], 'error');
        }
        return [
            model[0]
        ];
    }
    return model;
};
const mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting)=>(state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
            sorting: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.sorting, {
                sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)
            })
        });
const isDesc = (direction)=>direction === 'desc';
/**
 * Transform an item of the sorting model into a method comparing two rows.
 * @param {GridSortItem} sortItem The sort item we want to apply.
 * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.
 * @returns {GridParsedSortItem | null} The parsed sort item. Returns `null` is the sort item is not valid.
 */ const parseSortItem = (sortItem, apiRef)=>{
    const column = apiRef.current.getColumn(sortItem.field);
    if (!column || sortItem.sort === null) {
        return null;
    }
    let comparator;
    if (column.getSortComparator) {
        comparator = column.getSortComparator(sortItem.sort);
    } else {
        comparator = isDesc(sortItem.sort) ? (...args)=>-1 * column.sortComparator(...args) : column.sortComparator;
    }
    if (!comparator) {
        return null;
    }
    const getSortCellParams = (id)=>({
            id,
            field: column.field,
            rowNode: apiRef.current.getRowNode(id),
            value: apiRef.current.getCellValue(id, column.field),
            api: apiRef.current
        });
    return {
        getSortCellParams,
        comparator
    };
};
/**
 * Compare two rows according to a list of valid sort items.
 * The `row1Params` and `row2Params` must have the same length as `parsedSortItems`,
 * and each of their index must contain the `GridSortCellParams` of the sort item with the same index.
 * @param {GridParsedSortItem[]} parsedSortItems All the sort items with which we want to compare the rows.
 * @param {GridRowAggregatedSortingParams} row1 The node and params of the 1st row for each sort item.
 * @param {GridRowAggregatedSortingParams} row2 The node and params of the 2nd row for each sort item.
 */ const compareRows = (parsedSortItems, row1, row2)=>{
    return parsedSortItems.reduce((res, item, index)=>{
        if (res !== 0) {
            // return the results of the first comparator which distinguish the two rows
            return res;
        }
        const sortCellParams1 = row1.params[index];
        const sortCellParams2 = row2.params[index];
        res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);
        return res;
    }, 0);
};
const buildAggregatedSortingApplier = (sortModel, apiRef)=>{
    const comparatorList = sortModel.map((item)=>parseSortItem(item, apiRef)).filter((comparator)=>!!comparator);
    if (comparatorList.length === 0) {
        return null;
    }
    return (rowList)=>rowList.map((node)=>({
                node,
                params: comparatorList.map((el)=>el.getSortCellParams(node.id))
            })).sort((a, b)=>compareRows(comparatorList, a, b)).map((row)=>row.node.id);
};
const getNextGridSortDirection = (sortingOrder, current)=>{
    const currentIdx = sortingOrder.indexOf(current);
    if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {
        return sortingOrder[0];
    }
    return sortingOrder[currentIdx + 1];
};
const gridNillComparator = (v1, v2)=>{
    if (v1 == null && v2 != null) {
        return -1;
    }
    if (v2 == null && v1 != null) {
        return 1;
    }
    if (v1 == null && v2 == null) {
        return 0;
    }
    return null;
};
const collator = new Intl.Collator();
const gridStringOrNumberComparator = (value1, value2)=>{
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
        return nillResult;
    }
    if (typeof value1 === 'string') {
        return collator.compare(value1.toString(), value2.toString());
    }
    return value1 - value2;
};
const gridNumberComparator = (value1, value2)=>{
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
        return nillResult;
    }
    return Number(value1) - Number(value2);
};
const gridDateComparator = (value1, value2)=>{
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
        return nillResult;
    }
    if (value1 > value2) {
        return 1;
    }
    if (value1 < value2) {
        return -1;
    }
    return 0;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterState.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getDefaultGridFilterModel": (()=>getDefaultGridFilterModel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridFilterItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridFilterItem.js [app-client] (ecmascript)");
;
const getDefaultGridFilterModel = ()=>({
        items: [],
        logicOperator: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridFilterItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridLogicOperator"].And,
        quickFilterValues: [],
        quickFilterLogicOperator: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridFilterItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridLogicOperator"].And
    }); /**
 * @param {GridRowId} rowId The id of the row we want to filter.
 * @param {(filterItem: GridFilterItem) => boolean} shouldApplyItem An optional callback to allow the filtering engine to only apply some items.
 */  /**
 * Visibility status for each row.
 * A row is visible if it is passing the filters AND if its parents are expanded.
 * If a row is not registered in this lookup, it is visible.
 */ 
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildAggregatedFilterApplier": (()=>buildAggregatedFilterApplier),
    "cleanFilterItem": (()=>cleanFilterItem),
    "mergeStateWithFilterModel": (()=>mergeStateWithFilterModel),
    "passFilterLogic": (()=>passFilterLogic),
    "removeDiacritics": (()=>removeDiacritics),
    "sanitizeFilterModel": (()=>sanitizeFilterModel),
    "shouldQuickFilterExcludeHiddenColumns": (()=>shouldQuickFilterExcludeHiddenColumns)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/warning/warning.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$getPublicApiRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/getPublicApiRef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterState$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterState.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridFilterItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridFilterItem.js [app-client] (ecmascript)");
;
;
;
;
;
;
let hasEval;
function getHasEval() {
    if (hasEval !== undefined) {
        return hasEval;
    }
    try {
        hasEval = new Function('return true')();
    } catch (_) {
        hasEval = false;
    }
    return hasEval;
}
const cleanFilterItem = (item, apiRef)=>{
    const cleanItem = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, item);
    if (cleanItem.id == null) {
        cleanItem.id = Math.round(Math.random() * 1e5);
    }
    if (cleanItem.operator == null) {
        // Selects a default operator
        // We don't use `apiRef.current.getColumn` because it is not ready during state initialization
        const column = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnLookupSelector"])(apiRef)[cleanItem.field];
        cleanItem.operator = column && column.filterOperators[0].value;
    }
    return cleanItem;
};
const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef)=>{
    const hasSeveralItems = model.items.length > 1;
    let items;
    if (hasSeveralItems && disableMultipleColumnsFiltering) {
        if ("TURBOPACK compile-time truthy", 1) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])([
                'MUI X: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.',
                'If you are using the community version of the Data Grid, this prop is always `true`.'
            ], 'error');
        }
        items = [
            model.items[0]
        ];
    } else {
        items = model.items;
    }
    const hasItemsWithoutIds = hasSeveralItems && items.some((item)=>item.id == null);
    const hasItemWithoutOperator = items.some((item)=>item.operator == null);
    if ("TURBOPACK compile-time truthy", 1) {
        if (hasItemsWithoutIds) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])('MUI X: The `id` field is required on `filterModel.items` when you use multiple filters.', 'error');
        }
    }
    if ("TURBOPACK compile-time truthy", 1) {
        if (hasItemWithoutOperator) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])('MUI X: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.', 'error');
        }
    }
    if (hasItemWithoutOperator || hasItemsWithoutIds) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, model, {
            items: items.map((item)=>cleanFilterItem(item, apiRef))
        });
    }
    if (model.items !== items) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, model, {
            items
        });
    }
    return model;
};
const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef)=>(filteringState)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filteringState, {
            filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)
        });
const removeDiacritics = (value)=>{
    if (typeof value === 'string') {
        return value.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    }
    return value;
};
const getFilterCallbackFromItem = (filterItem, apiRef)=>{
    if (!filterItem.field || !filterItem.operator) {
        return null;
    }
    const column = apiRef.current.getColumn(filterItem.field);
    if (!column) {
        return null;
    }
    let parsedValue;
    if (column.valueParser) {
        const parser = column.valueParser;
        parsedValue = Array.isArray(filterItem.value) ? filterItem.value?.map((x)=>parser(x, undefined, column, apiRef)) : parser(filterItem.value, undefined, column, apiRef);
    } else {
        parsedValue = filterItem.value;
    }
    const { ignoreDiacritics } = apiRef.current.rootProps;
    if (ignoreDiacritics) {
        parsedValue = removeDiacritics(parsedValue);
    }
    const newFilterItem = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterItem, {
        value: parsedValue
    });
    const filterOperators = column.filterOperators;
    if (!filterOperators?.length) {
        throw new Error(`MUI X: No filter operators found for column '${column.field}'.`);
    }
    const filterOperator = filterOperators.find((operator)=>operator.value === newFilterItem.operator);
    if (!filterOperator) {
        throw new Error(`MUI X: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);
    }
    const publicApiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$getPublicApiRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPublicApiRef"])(apiRef);
    const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);
    if (typeof applyFilterOnRow !== 'function') {
        return null;
    }
    return {
        item: newFilterItem,
        fn: (row)=>{
            let value = apiRef.current.getRowValue(row, column);
            if (ignoreDiacritics) {
                value = removeDiacritics(value);
            }
            return applyFilterOnRow(value, row, column, publicApiRef);
        }
    };
};
let filterItemsApplierId = 1;
/**
 * Generates a method to easily check if a row is matching the current filter model.
 * @param {GridFilterModel} filterModel The model with which we want to filter the rows.
 * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.
 * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.
 */ const buildAggregatedFilterItemsApplier = (filterModel, apiRef, disableEval)=>{
    const { items } = filterModel;
    const appliers = items.map((item)=>getFilterCallbackFromItem(item, apiRef)).filter((callback)=>!!callback);
    if (appliers.length === 0) {
        return null;
    }
    if (disableEval || !getHasEval()) {
        // This is the original logic, which is used if `eval()` is not supported (aka prevented by CSP).
        return (row, shouldApplyFilter)=>{
            const resultPerItemId = {};
            for(let i = 0; i < appliers.length; i += 1){
                const applier = appliers[i];
                if (!shouldApplyFilter || shouldApplyFilter(applier.item.field)) {
                    resultPerItemId[applier.item.id] = applier.fn(row);
                }
            }
            return resultPerItemId;
        };
    }
    // We generate a new function with `new Function()` to avoid expensive patterns for JS engines
    // such as a dynamic object assignment, for example `{ [dynamicKey]: value }`.
    const filterItemCore = new Function('appliers', 'row', 'shouldApplyFilter', `"use strict";
${appliers.map((applier, i)=>`const shouldApply${i} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(applier.item.field)});`).join('\n')}

const result$$ = {
${appliers.map((applier, i)=>`  ${JSON.stringify(String(applier.item.id))}: !shouldApply${i} ? false : appliers[${i}].fn(row),`).join('\n')}
};

return result$$;`.replaceAll('$$', String(filterItemsApplierId)));
    filterItemsApplierId += 1;
    // Assign to the arrow function a name to help debugging
    const filterItem = (row, shouldApplyItem)=>filterItemCore(appliers, row, shouldApplyItem);
    return filterItem;
};
const shouldQuickFilterExcludeHiddenColumns = (filterModel)=>{
    return filterModel.quickFilterExcludeHiddenColumns ?? true;
};
/**
 * Generates a method to easily check if a row is matching the current quick filter.
 * @param {any[]} filterModel The model with which we want to filter the rows.
 * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.
 * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.
 */ const buildAggregatedQuickFilterApplier = (filterModel, apiRef)=>{
    const quickFilterValues = filterModel.quickFilterValues?.filter(Boolean) ?? [];
    if (quickFilterValues.length === 0) {
        return null;
    }
    const columnFields = shouldQuickFilterExcludeHiddenColumns(filterModel) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnFieldsSelector"])(apiRef) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnFieldsSelector"])(apiRef);
    const appliersPerField = [];
    const { ignoreDiacritics } = apiRef.current.rootProps;
    const publicApiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$getPublicApiRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPublicApiRef"])(apiRef);
    columnFields.forEach((field)=>{
        const column = apiRef.current.getColumn(field);
        const getApplyQuickFilterFn = column?.getApplyQuickFilterFn;
        if (getApplyQuickFilterFn) {
            appliersPerField.push({
                column,
                appliers: quickFilterValues.map((quickFilterValue)=>{
                    const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;
                    return {
                        fn: getApplyQuickFilterFn(value, column, publicApiRef)
                    };
                })
            });
        }
    });
    return function isRowMatchingQuickFilter(row, shouldApplyFilter) {
        const result = {};
        /* eslint-disable no-labels */ outer: for(let v = 0; v < quickFilterValues.length; v += 1){
            const filterValue = quickFilterValues[v];
            for(let i = 0; i < appliersPerField.length; i += 1){
                const { column, appliers } = appliersPerField[i];
                const { field } = column;
                if (shouldApplyFilter && !shouldApplyFilter(field)) {
                    continue;
                }
                const applier = appliers[v];
                let value = apiRef.current.getRowValue(row, column);
                if (applier.fn === null) {
                    continue;
                }
                if (ignoreDiacritics) {
                    value = removeDiacritics(value);
                }
                const isMatching = applier.fn(value, row, column, publicApiRef);
                if (isMatching) {
                    result[filterValue] = true;
                    continue outer;
                }
            }
            result[filterValue] = false;
        }
        return result;
    };
};
const buildAggregatedFilterApplier = (filterModel, apiRef, disableEval)=>{
    const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef, disableEval);
    const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);
    return function isRowMatchingFilters(row, shouldApplyFilter, result) {
        result.passingFilterItems = isRowMatchingFilterItems?.(row, shouldApplyFilter) ?? null;
        result.passingQuickFilterValues = isRowMatchingQuickFilter?.(row, shouldApplyFilter) ?? null;
    };
};
const isNotNull = (result)=>result != null;
const filterModelItems = (cache, apiRef, items)=>{
    if (!cache.cleanedFilterItems) {
        cache.cleanedFilterItems = items.filter((item)=>getFilterCallbackFromItem(item, apiRef) !== null);
    }
    return cache.cleanedFilterItems;
};
const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef, cache)=>{
    const cleanedFilterItems = filterModelItems(cache, apiRef, filterModel.items);
    const cleanedFilterItemResults = allFilterItemResults.filter(isNotNull);
    const cleanedQuickFilterResults = allQuickFilterResults.filter(isNotNull);
    // get result for filter items model
    if (cleanedFilterItemResults.length > 0) {
        // Return true if the item pass with one of the rows
        const filterItemPredicate = (item)=>{
            return cleanedFilterItemResults.some((filterItemResult)=>filterItemResult[item.id]);
        };
        const logicOperator = filterModel.logicOperator ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterState$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultGridFilterModel"])().logicOperator;
        if (logicOperator === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridFilterItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridLogicOperator"].And) {
            const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);
            if (!passesAllFilters) {
                return false;
            }
        } else {
            const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);
            if (!passesSomeFilters) {
                return false;
            }
        }
    }
    // get result for quick filter model
    if (cleanedQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {
        // Return true if the item pass with one of the rows
        const quickFilterValuePredicate = (value)=>{
            return cleanedQuickFilterResults.some((quickFilterValueResult)=>quickFilterValueResult[value]);
        };
        const quickFilterLogicOperator = filterModel.quickFilterLogicOperator ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterState$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultGridFilterModel"])().quickFilterLogicOperator;
        if (quickFilterLogicOperator === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridFilterItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridLogicOperator"].And) {
            const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);
            if (!passesAllQuickFilterValues) {
                return false;
            }
        } else {
            const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);
            if (!passesSomeQuickFilterValues) {
                return false;
            }
        }
    }
    return true;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "COMFORTABLE_DENSITY_FACTOR": (()=>COMFORTABLE_DENSITY_FACTOR),
    "COMPACT_DENSITY_FACTOR": (()=>COMPACT_DENSITY_FACTOR),
    "gridDensityFactorSelector": (()=>gridDensityFactorSelector),
    "gridDensitySelector": (()=>gridDensitySelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
;
const COMPACT_DENSITY_FACTOR = 0.7;
const COMFORTABLE_DENSITY_FACTOR = 1.3;
const DENSITY_FACTORS = {
    compact: COMPACT_DENSITY_FACTOR,
    comfortable: COMFORTABLE_DENSITY_FACTOR,
    standard: 1
};
const gridDensitySelector = (state)=>state.density;
const gridDensityFactorSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridDensitySelector, (density)=>DENSITY_FACTORS[density]);
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/headerFiltering/gridHeaderFilteringSelectors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridHeaderFilteringEditFieldSelector": (()=>gridHeaderFilteringEditFieldSelector),
    "gridHeaderFilteringEnabledSelector": (()=>gridHeaderFilteringEnabledSelector),
    "gridHeaderFilteringMenuSelector": (()=>gridHeaderFilteringMenuSelector),
    "gridHeaderFilteringStateSelector": (()=>gridHeaderFilteringStateSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createSelector.js [app-client] (ecmascript)");
;
const gridHeaderFilteringStateSelector = (state)=>state.headerFiltering;
const gridHeaderFilteringEnabledSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridHeaderFilteringStateSelector, // No initialization in MIT, so we need to default to false to be used by `getTotalHeaderHeight`
(headerFilteringState)=>headerFilteringState?.enabled ?? false);
const gridHeaderFilteringEditFieldSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridHeaderFilteringStateSelector, (headerFilteringState)=>headerFilteringState.editing);
const gridHeaderFilteringMenuSelector = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSelector"])(gridHeaderFilteringStateSelector, (headerFilteringState)=>headerFilteringState.menuOpen);
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "COLUMNS_DIMENSION_PROPERTIES": (()=>COLUMNS_DIMENSION_PROPERTIES),
    "applyInitialState": (()=>applyInitialState),
    "computeFlexColumnsWidth": (()=>computeFlexColumnsWidth),
    "createColumnsState": (()=>createColumnsState),
    "getFirstNonSpannedColumnToRender": (()=>getFirstNonSpannedColumnToRender),
    "getTotalHeaderHeight": (()=>getTotalHeaderHeight),
    "hydrateColumnsWidth": (()=>hydrateColumnsWidth)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridDefaultColumnTypes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridDefaultColumnTypes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridStringColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridStringColDef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$resolveProps$2f$resolveProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/resolveProps/resolveProps.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$headerFiltering$2f$gridHeaderFilteringSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/headerFiltering/gridHeaderFilteringSelectors.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
const COLUMNS_DIMENSION_PROPERTIES = [
    'maxWidth',
    'minWidth',
    'width',
    'flex'
];
const COLUMN_TYPES = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridDefaultColumnTypes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGridDefaultColumnTypes"])();
function computeFlexColumnsWidth({ initialFreeSpace, totalFlexUnits, flexColumns }) {
    const uniqueFlexColumns = new Set(flexColumns.map((col)=>col.field));
    const flexColumnsLookup = {
        all: {},
        frozenFields: [],
        freeze: (field)=>{
            const value = flexColumnsLookup.all[field];
            if (value && value.frozen !== true) {
                flexColumnsLookup.all[field].frozen = true;
                flexColumnsLookup.frozenFields.push(field);
            }
        }
    };
    // Step 5 of https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths
    function loopOverFlexItems() {
        // 5a: If all the flex items on the line are frozen, free space has been distributed.
        if (flexColumnsLookup.frozenFields.length === uniqueFlexColumns.size) {
            return;
        }
        const violationsLookup = {
            min: {},
            max: {}
        };
        let remainingFreeSpace = initialFreeSpace;
        let flexUnits = totalFlexUnits;
        let totalViolation = 0;
        // 5b: Calculate the remaining free space
        flexColumnsLookup.frozenFields.forEach((field)=>{
            remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;
            flexUnits -= flexColumnsLookup.all[field].flex;
        });
        for(let i = 0; i < flexColumns.length; i += 1){
            const column = flexColumns[i];
            if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {
                continue;
            }
            // 5c: Distribute remaining free space proportional to the flex factors
            const widthPerFlexUnit = remainingFreeSpace / flexUnits;
            let computedWidth = widthPerFlexUnit * column.flex;
            // 5d: Fix min/max violations
            if (computedWidth < column.minWidth) {
                totalViolation += column.minWidth - computedWidth;
                computedWidth = column.minWidth;
                violationsLookup.min[column.field] = true;
            } else if (computedWidth > column.maxWidth) {
                totalViolation += column.maxWidth - computedWidth;
                computedWidth = column.maxWidth;
                violationsLookup.max[column.field] = true;
            }
            flexColumnsLookup.all[column.field] = {
                frozen: false,
                computedWidth,
                flex: column.flex
            };
        }
        // 5e: Freeze over-flexed items
        if (totalViolation < 0) {
            // Freeze all the items with max violations
            Object.keys(violationsLookup.max).forEach((field)=>{
                flexColumnsLookup.freeze(field);
            });
        } else if (totalViolation > 0) {
            // Freeze all the items with min violations
            Object.keys(violationsLookup.min).forEach((field)=>{
                flexColumnsLookup.freeze(field);
            });
        } else {
            // Freeze all items
            flexColumns.forEach(({ field })=>{
                flexColumnsLookup.freeze(field);
            });
        }
        // 5f: Return to the start of this loop
        loopOverFlexItems();
    }
    loopOverFlexItems();
    return flexColumnsLookup.all;
}
const hydrateColumnsWidth = (rawState, dimensions)=>{
    const columnsLookup = {};
    let totalFlexUnits = 0;
    let widthAllocatedBeforeFlex = 0;
    const flexColumns = [];
    // For the non-flex columns, compute their width
    // For the flex columns, compute their minimum width and how much width must be allocated during the flex allocation
    rawState.orderedFields.forEach((columnField)=>{
        let column = rawState.lookup[columnField];
        let computedWidth = 0;
        let isFlex = false;
        if (rawState.columnVisibilityModel[columnField] !== false) {
            if (column.flex && column.flex > 0) {
                totalFlexUnits += column.flex;
                isFlex = true;
            } else {
                computedWidth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(column.width || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridStringColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_STRING_COL_DEF"].width, column.minWidth || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridStringColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_STRING_COL_DEF"].minWidth, column.maxWidth || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridStringColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_STRING_COL_DEF"].maxWidth);
            }
            widthAllocatedBeforeFlex += computedWidth;
        }
        if (column.computedWidth !== computedWidth) {
            column = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, column, {
                computedWidth
            });
        }
        if (isFlex) {
            flexColumns.push(column);
        }
        columnsLookup[columnField] = column;
    });
    const availableWidth = dimensions === undefined ? 0 : dimensions.viewportOuterSize.width - (dimensions.hasScrollY ? dimensions.scrollbarSize : 0);
    const initialFreeSpace = Math.max(availableWidth - widthAllocatedBeforeFlex, 0);
    // Allocate the remaining space to the flex columns
    if (totalFlexUnits > 0 && availableWidth > 0) {
        const computedColumnWidths = computeFlexColumnsWidth({
            initialFreeSpace,
            totalFlexUnits,
            flexColumns
        });
        Object.keys(computedColumnWidths).forEach((field)=>{
            columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;
        });
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, rawState, {
        lookup: columnsLookup
    });
};
const applyInitialState = (columnsState, initialState)=>{
    if (!initialState) {
        return columnsState;
    }
    const { orderedFields = [], dimensions = {} } = initialState;
    const columnsWithUpdatedDimensions = Object.keys(dimensions);
    if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {
        return columnsState;
    }
    const orderedFieldsLookup = {};
    const cleanOrderedFields = [];
    for(let i = 0; i < orderedFields.length; i += 1){
        const field = orderedFields[i];
        // Ignores the fields in the initialState that matches no field on the current column state
        if (columnsState.lookup[field]) {
            orderedFieldsLookup[field] = true;
            cleanOrderedFields.push(field);
        }
    }
    const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.orderedFields : [
        ...cleanOrderedFields,
        ...columnsState.orderedFields.filter((field)=>!orderedFieldsLookup[field])
    ];
    const newColumnLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, columnsState.lookup);
    for(let i = 0; i < columnsWithUpdatedDimensions.length; i += 1){
        const field = columnsWithUpdatedDimensions[i];
        const newColDef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newColumnLookup[field], {
            hasBeenResized: true
        });
        Object.entries(dimensions[field]).forEach(([key, value])=>{
            newColDef[key] = value === -1 ? Infinity : value;
        });
        newColumnLookup[field] = newColDef;
    }
    const newColumnsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, columnsState, {
        orderedFields: newOrderedFields,
        lookup: newColumnLookup
    });
    return newColumnsState;
};
function getDefaultColTypeDef(type) {
    let colDef = COLUMN_TYPES[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridDefaultColumnTypes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_GRID_COL_TYPE_KEY"]];
    if (type && COLUMN_TYPES[type]) {
        colDef = COLUMN_TYPES[type];
    }
    return colDef;
}
const createColumnsState = ({ apiRef, columnsToUpsert, initialState, columnVisibilityModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnVisibilityModelSelector"])(apiRef), keepOnlyColumnsToUpsert = false })=>{
    const isInsideStateInitializer = !apiRef.current.state.columns;
    let columnsState;
    if (isInsideStateInitializer) {
        columnsState = {
            orderedFields: [],
            lookup: {},
            columnVisibilityModel
        };
    } else {
        const currentState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnsStateSelector"])(apiRef.current.state);
        columnsState = {
            orderedFields: keepOnlyColumnsToUpsert ? [] : [
                ...currentState.orderedFields
            ],
            lookup: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, currentState.lookup),
            // Will be cleaned later if keepOnlyColumnsToUpsert=true
            columnVisibilityModel
        };
    }
    let columnsToKeep = {};
    if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
        columnsToKeep = Object.keys(columnsState.lookup).reduce((acc, key)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, acc, {
                [key]: false
            }), {});
    }
    const columnsToUpsertLookup = {};
    columnsToUpsert.forEach((newColumn)=>{
        const { field } = newColumn;
        columnsToUpsertLookup[field] = true;
        columnsToKeep[field] = true;
        let existingState = columnsState.lookup[field];
        if (existingState == null) {
            existingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, getDefaultColTypeDef(newColumn.type), {
                field,
                hasBeenResized: false
            });
            columnsState.orderedFields.push(field);
        } else if (keepOnlyColumnsToUpsert) {
            columnsState.orderedFields.push(field);
        }
        // If the column type has changed - merge the existing state with the default column type definition
        if (existingState && existingState.type !== newColumn.type) {
            existingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, getDefaultColTypeDef(newColumn.type), {
                field
            });
        }
        let hasBeenResized = existingState.hasBeenResized;
        COLUMNS_DIMENSION_PROPERTIES.forEach((key)=>{
            if (newColumn[key] !== undefined) {
                hasBeenResized = true;
                if (newColumn[key] === -1) {
                    newColumn[key] = Infinity;
                }
            }
        });
        columnsState.lookup[field] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$resolveProps$2f$resolveProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(existingState, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newColumn, {
            hasBeenResized
        }));
    });
    if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
        Object.keys(columnsState.lookup).forEach((field)=>{
            if (!columnsToKeep[field]) {
                delete columnsState.lookup[field];
            }
        });
    }
    const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors('hydrateColumns', columnsState);
    const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);
    return hydrateColumnsWidth(columnsStateWithPortableColumns, apiRef.current.getRootDimensions?.() ?? undefined);
};
function getFirstNonSpannedColumnToRender({ firstColumnToRender, apiRef, firstRowToRender, lastRowToRender, visibleRows }) {
    let firstNonSpannedColumnToRender = firstColumnToRender;
    for(let i = firstRowToRender; i < lastRowToRender; i += 1){
        const row = visibleRows[i];
        if (row) {
            const rowId = visibleRows[i].id;
            const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);
            if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
                firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;
            }
        }
    }
    return firstNonSpannedColumnToRender;
}
function getTotalHeaderHeight(apiRef, props) {
    if (props.unstable_listView) {
        return 0;
    }
    const densityFactor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDensityFactorSelector"])(apiRef);
    const maxDepth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnGroupsHeaderMaxDepthSelector"])(apiRef);
    const isHeaderFilteringEnabled = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$headerFiltering$2f$gridHeaderFilteringSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridHeaderFilteringEnabledSelector"])(apiRef);
    const columnHeadersHeight = Math.floor(props.columnHeaderHeight * densityFactor);
    const columnGroupHeadersHeight = Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * densityFactor);
    const filterHeadersHeight = isHeaderFilteringEnabled ? Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * densityFactor) : 0;
    return columnHeadersHeight + columnGroupHeadersHeight * maxDepth + filterHeadersHeight;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "EMPTY_DETAIL_PANELS": (()=>EMPTY_DETAIL_PANELS),
    "areRenderContextsEqual": (()=>areRenderContextsEqual),
    "computeOffsetLeft": (()=>computeOffsetLeft),
    "useGridVirtualScroller": (()=>useGridVirtualScroller)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/listView/gridListViewSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/system/esm/RtlProvider/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$reactMajor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/reactMajor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$useGridVirtualization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualization.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useTimeout$2f$useTimeout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useTimeout/useTimeout.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js [app-client] (ecmascript) <export default as unstable_useEventCallback>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js [app-client] (ecmascript) <export default as unstable_useEnhancedEffect>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useRunOnce$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useRunOnce.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/platform.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowSpanningSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const MINIMUM_COLUMN_WIDTH = 50;
var ScrollDirection = /*#__PURE__*/ function(ScrollDirection) {
    ScrollDirection[ScrollDirection["NONE"] = 0] = "NONE";
    ScrollDirection[ScrollDirection["UP"] = 1] = "UP";
    ScrollDirection[ScrollDirection["DOWN"] = 2] = "DOWN";
    ScrollDirection[ScrollDirection["LEFT"] = 3] = "LEFT";
    ScrollDirection[ScrollDirection["RIGHT"] = 4] = "RIGHT";
    return ScrollDirection;
}(ScrollDirection || {});
const EMPTY_SCROLL_POSITION = {
    top: 0,
    left: 0
};
const EMPTY_DETAIL_PANELS = Object.freeze(new Map());
const createScrollCache = (isRtl, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer)=>({
        direction: ScrollDirection.NONE,
        buffer: bufferForDirection(isRtl, ScrollDirection.NONE, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer)
    });
let isJSDOM = false;
try {
    if (typeof window !== 'undefined') {
        isJSDOM = /jsdom|HappyDOM/.test(window.navigator.userAgent);
    }
} catch (_) {
/* ignore */ }
const useGridVirtualScroller = ()=>{
    const apiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridPrivateApiContext"])();
    const rootProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRootProps"])();
    const { unstable_listView: listView } = rootProps;
    const visibleColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, {
        "useGridVirtualScroller.useGridSelector[visibleColumns]": ()=>listView ? [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridListColumnSelector"])(apiRef.current.state)
            ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef)
    }["useGridVirtualScroller.useGridSelector[visibleColumns]"]);
    const enabledForRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVirtualizationRowEnabledSelector"]) && !isJSDOM;
    const enabledForColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVirtualizationColumnEnabledSelector"]) && !isJSDOM;
    const dimensions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"]);
    const outerSize = dimensions.viewportOuterSize;
    const pinnedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPinnedRowsSelector"]);
    const pinnedColumnDefinitions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisiblePinnedColumnDefinitionsSelector"]);
    const pinnedColumns = listView ? {
        left: [],
        right: []
    } : pinnedColumnDefinitions;
    const hasBottomPinnedRows = pinnedRows.bottom.length > 0;
    const [panels, setPanels] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState(EMPTY_DETAIL_PANELS);
    const isRtl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRtl"])();
    const cellFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"]);
    const cellTabIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridTabIndexCellSelector"]);
    const rowsMeta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsMetaSelector"]);
    const selectedRowsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedIdsLookupSelector"]);
    const currentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridVisibleRows"])(apiRef, rootProps);
    const gridRootRef = apiRef.current.rootElementRef;
    const mainRef = apiRef.current.mainElementRef;
    const scrollerRef = apiRef.current.virtualScrollerRef;
    const scrollbarVerticalRef = apiRef.current.virtualScrollbarVerticalRef;
    const scrollbarHorizontalRef = apiRef.current.virtualScrollbarHorizontalRef;
    const contentHeight = dimensions.contentSize.height;
    const columnsTotalWidth = dimensions.columnsTotalWidth;
    const hasColSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridHasColSpanSelector"]);
    const mainRefCallback = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridVirtualScroller.useCallback[mainRefCallback]": (node)=>{
            mainRef.current = node;
            if (!node) {
                return undefined;
            }
            const initialRect = node.getBoundingClientRect();
            let lastSize = roundDimensions(initialRect);
            apiRef.current.publishEvent('resize', lastSize);
            if (typeof ResizeObserver === 'undefined') {
                return undefined;
            }
            const observer = new ResizeObserver({
                "useGridVirtualScroller.useCallback[mainRefCallback]": (entries)=>{
                    const entry = entries[0];
                    if (!entry) {
                        return;
                    }
                    const newSize = roundDimensions(entry.contentRect);
                    if (newSize.width === lastSize.width && newSize.height === lastSize.height) {
                        return;
                    }
                    apiRef.current.publishEvent('resize', newSize);
                    lastSize = newSize;
                }
            }["useGridVirtualScroller.useCallback[mainRefCallback]"]);
            observer.observe(node);
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$reactMajor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] >= 19) {
                return ({
                    "useGridVirtualScroller.useCallback[mainRefCallback]": ()=>{
                        mainRef.current = null;
                        observer.disconnect();
                    }
                })["useGridVirtualScroller.useCallback[mainRefCallback]"];
            }
            return undefined;
        }
    }["useGridVirtualScroller.useCallback[mainRefCallback]"], [
        apiRef,
        mainRef
    ]);
    /*
   * Scroll context logic
   * ====================
   * We only render the cells contained in the `renderContext`. However, when the user starts scrolling the grid
   * in a direction, we want to render as many cells as possible in that direction, as to avoid presenting white
   * areas if the user scrolls too fast/far and the viewport ends up in a region we haven't rendered yet. To render
   * more cells, we store some offsets to add to the viewport in `scrollCache.buffer`. Those offsets make the render
   * context wider in the direction the user is going, but also makes the buffer around the viewport `0` for the
   * dimension (horizontal or vertical) in which the user is not scrolling. So if the normal viewport is 8 columns
   * wide, with a 1 column buffer (10 columns total), then we want it to be exactly 8 columns wide during vertical
   * scroll.
   * However, we don't want the rows in the old context to re-render from e.g. 10 columns to 8 columns, because that's
   * work that's not necessary. Thus we store the context at the start of the scroll in `frozenContext`, and the rows
   * that are part of this old context will keep their same render context as to avoid re-rendering.
   */ const scrollPosition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(EMPTY_SCROLL_POSITION);
    const previousContextScrollPosition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(EMPTY_SCROLL_POSITION);
    const previousRowContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$useGridVirtualization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EMPTY_RENDER_CONTEXT"]);
    const renderContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRenderContextSelector"]);
    const scrollTimeout = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useTimeout$2f$useTimeout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])();
    const frozenContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(undefined);
    const scrollCache = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
        "useGridVirtualScroller.useLazyRef": ()=>createScrollCache(isRtl, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6)
    }["useGridVirtualScroller.useLazyRef"]).current;
    const focusedCell = {
        rowIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
            "useGridVirtualScroller.useMemo": ()=>cellFocus ? currentPage.rows.findIndex({
                    "useGridVirtualScroller.useMemo": (row)=>row.id === cellFocus.id
                }["useGridVirtualScroller.useMemo"]) : -1
        }["useGridVirtualScroller.useMemo"], [
            cellFocus,
            currentPage.rows
        ]),
        columnIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
            "useGridVirtualScroller.useMemo": ()=>cellFocus ? visibleColumns.findIndex({
                    "useGridVirtualScroller.useMemo": (column)=>column.field === cellFocus.field
                }["useGridVirtualScroller.useMemo"]) : -1
        }["useGridVirtualScroller.useMemo"], [
            cellFocus,
            visibleColumns
        ])
    };
    const updateRenderContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridVirtualScroller.useCallback[updateRenderContext]": (nextRenderContext)=>{
            if (areRenderContextsEqual(nextRenderContext, apiRef.current.state.virtualization.renderContext)) {
                return;
            }
            const didRowsIntervalChange = nextRenderContext.firstRowIndex !== previousRowContext.current.firstRowIndex || nextRenderContext.lastRowIndex !== previousRowContext.current.lastRowIndex;
            apiRef.current.setState({
                "useGridVirtualScroller.useCallback[updateRenderContext]": (state)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        virtualization: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.virtualization, {
                            renderContext: nextRenderContext
                        })
                    });
                }
            }["useGridVirtualScroller.useCallback[updateRenderContext]"]);
            // The lazy-loading hook is listening to `renderedRowsIntervalChange`,
            // but only does something if the dimensions are also available.
            // So we wait until we have valid dimensions before publishing the first event.
            if (dimensions.isReady && didRowsIntervalChange) {
                previousRowContext.current = nextRenderContext;
                apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);
            }
            previousContextScrollPosition.current = scrollPosition.current;
        }
    }["useGridVirtualScroller.useCallback[updateRenderContext]"], [
        apiRef,
        dimensions.isReady
    ]);
    const triggerUpdateRenderContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridVirtualScroller.useEventCallback[triggerUpdateRenderContext]": ()=>{
            const scroller = scrollerRef.current;
            if (!scroller) {
                return undefined;
            }
            const newScroll = {
                top: scroller.scrollTop,
                left: scroller.scrollLeft
            };
            const dx = newScroll.left - scrollPosition.current.left;
            const dy = newScroll.top - scrollPosition.current.top;
            const isScrolling = dx !== 0 || dy !== 0;
            scrollPosition.current = newScroll;
            const direction = isScrolling ? directionForDelta(dx, dy) : ScrollDirection.NONE;
            // Since previous render, we have scrolled...
            const rowScroll = Math.abs(scrollPosition.current.top - previousContextScrollPosition.current.top);
            const columnScroll = Math.abs(scrollPosition.current.left - previousContextScrollPosition.current.left);
            // PERF: use the computed minimum column width instead of a static one
            const didCrossThreshold = rowScroll >= dimensions.rowHeight || columnScroll >= MINIMUM_COLUMN_WIDTH;
            const didChangeDirection = scrollCache.direction !== direction;
            const shouldUpdate = didCrossThreshold || didChangeDirection;
            if (!shouldUpdate) {
                return renderContext;
            }
            // Render a new context
            if (didChangeDirection) {
                switch(direction){
                    case ScrollDirection.NONE:
                    case ScrollDirection.LEFT:
                    case ScrollDirection.RIGHT:
                        frozenContext.current = undefined;
                        break;
                    default:
                        frozenContext.current = renderContext;
                        break;
                }
            }
            scrollCache.direction = direction;
            scrollCache.buffer = bufferForDirection(isRtl, direction, rootProps.rowBufferPx, rootProps.columnBufferPx, dimensions.rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6);
            const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);
            const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);
            // Prevents batching render context changes
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.flushSync({
                "useGridVirtualScroller.useEventCallback[triggerUpdateRenderContext]": ()=>{
                    updateRenderContext(nextRenderContext);
                }
            }["useGridVirtualScroller.useEventCallback[triggerUpdateRenderContext]"]);
            scrollTimeout.start(1000, triggerUpdateRenderContext);
            return nextRenderContext;
        }
    }["useGridVirtualScroller.useEventCallback[triggerUpdateRenderContext]"]);
    const forceUpdateRenderContext = ()=>{
        const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);
        const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);
        // Reset the frozen context when the render context changes, see the illustration in https://github.com/mui/mui-x/pull/12353
        frozenContext.current = undefined;
        updateRenderContext(nextRenderContext);
    };
    const handleScroll = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridVirtualScroller.useEventCallback[handleScroll]": (event)=>{
            const { scrollTop, scrollLeft } = event.currentTarget;
            // On iOS and macOS, negative offsets are possible when swiping past the start
            if (scrollTop < 0) {
                return;
            }
            if (!isRtl) {
                if (scrollLeft < 0) {
                    return;
                }
            }
            if (isRtl) {
                if (scrollLeft > 0) {
                    return;
                }
            }
            const nextRenderContext = triggerUpdateRenderContext();
            apiRef.current.publishEvent('scrollPositionChange', {
                top: scrollTop,
                left: scrollLeft,
                renderContext: nextRenderContext
            });
        }
    }["useGridVirtualScroller.useEventCallback[handleScroll]"]);
    const handleWheel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridVirtualScroller.useEventCallback[handleWheel]": (event)=>{
            apiRef.current.publishEvent('virtualScrollerWheel', {}, event);
        }
    }["useGridVirtualScroller.useEventCallback[handleWheel]"]);
    const handleTouchMove = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridVirtualScroller.useEventCallback[handleTouchMove]": (event)=>{
            apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);
        }
    }["useGridVirtualScroller.useEventCallback[handleTouchMove]"]);
    const getRows = (params = {})=>{
        if (!params.rows && !currentPage.range) {
            return [];
        }
        const baseRenderContext = params.renderContext ?? renderContext;
        const isLastSection = !hasBottomPinnedRows && params.position === undefined || hasBottomPinnedRows && params.position === 'bottom';
        const isPinnedSection = params.position !== undefined;
        let rowIndexOffset;
        // FIXME: Why is the switch check exhaustiveness not validated with typescript-eslint?
        // eslint-disable-next-line default-case
        switch(params.position){
            case 'top':
                rowIndexOffset = 0;
                break;
            case 'bottom':
                rowIndexOffset = pinnedRows.top.length + currentPage.rows.length;
                break;
            case undefined:
                rowIndexOffset = pinnedRows.top.length;
                break;
        }
        const rowModels = params.rows ?? currentPage.rows;
        const firstRowToRender = baseRenderContext.firstRowIndex;
        const lastRowToRender = Math.min(baseRenderContext.lastRowIndex, rowModels.length);
        const rowIndexes = params.rows ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["range"])(0, params.rows.length) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["range"])(firstRowToRender, lastRowToRender);
        let virtualRowIndex = -1;
        if (!isPinnedSection && focusedCell.rowIndex !== -1) {
            if (focusedCell.rowIndex < firstRowToRender) {
                virtualRowIndex = focusedCell.rowIndex;
                rowIndexes.unshift(virtualRowIndex);
            }
            if (focusedCell.rowIndex >= lastRowToRender) {
                virtualRowIndex = focusedCell.rowIndex;
                rowIndexes.push(virtualRowIndex);
            }
        }
        const rows = [];
        const rowProps = rootProps.slotProps?.row;
        const columnPositions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnPositionsSelector"])(apiRef);
        rowIndexes.forEach((rowIndexInPage)=>{
            const { id, model } = rowModels[rowIndexInPage];
            const rowIndex = (currentPage?.range?.firstRowIndex || 0) + rowIndexOffset + rowIndexInPage;
            // NOTE: This is an expensive feature, the colSpan code could be optimized.
            if (hasColSpan) {
                const minFirstColumn = pinnedColumns.left.length;
                const maxLastColumn = visibleColumns.length - pinnedColumns.right.length;
                apiRef.current.calculateColSpan({
                    rowId: id,
                    minFirstColumn,
                    maxLastColumn,
                    columns: visibleColumns
                });
                if (pinnedColumns.left.length > 0) {
                    apiRef.current.calculateColSpan({
                        rowId: id,
                        minFirstColumn: 0,
                        maxLastColumn: pinnedColumns.left.length,
                        columns: visibleColumns
                    });
                }
                if (pinnedColumns.right.length > 0) {
                    apiRef.current.calculateColSpan({
                        rowId: id,
                        minFirstColumn: visibleColumns.length - pinnedColumns.right.length,
                        maxLastColumn: visibleColumns.length,
                        columns: visibleColumns
                    });
                }
            }
            const hasFocus = cellFocus?.id === id;
            const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';
            let isSelected;
            if (selectedRowsLookup[id] == null) {
                isSelected = false;
            } else {
                isSelected = apiRef.current.isRowSelectable(id);
            }
            let isFirstVisible = false;
            if (params.position === undefined) {
                isFirstVisible = rowIndexInPage === 0;
            }
            let isLastVisible = false;
            const isLastVisibleInSection = rowIndexInPage === rowModels.length - 1;
            if (isLastSection) {
                if (!isPinnedSection) {
                    const lastIndex = currentPage.rows.length - 1;
                    const isLastVisibleRowIndex = rowIndexInPage === lastIndex;
                    if (isLastVisibleRowIndex) {
                        isLastVisible = true;
                    }
                } else {
                    isLastVisible = isLastVisibleInSection;
                }
            }
            const isVirtualRow = rowIndexInPage === virtualRowIndex;
            const isNotVisible = isVirtualRow;
            let tabbableCell = null;
            if (cellTabIndex !== null && cellTabIndex.id === id) {
                const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);
                tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;
            }
            let currentRenderContext = baseRenderContext;
            if (!isPinnedSection && frozenContext.current && rowIndexInPage >= frozenContext.current.firstRowIndex && rowIndexInPage < frozenContext.current.lastRowIndex) {
                currentRenderContext = frozenContext.current;
            }
            const offsetLeft = computeOffsetLeft(columnPositions, currentRenderContext, pinnedColumns.left.length);
            const showBottomBorder = isLastVisibleInSection && params.position === 'top';
            rows.push(/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(rootProps.slots.row, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                row: model,
                rowId: id,
                index: rowIndex,
                selected: isSelected,
                offsetTop: params.rows ? undefined : rowsMeta.positions[rowIndexInPage],
                offsetLeft: offsetLeft,
                dimensions: dimensions,
                rowHeight: baseRowHeight,
                tabbableCell: tabbableCell,
                pinnedColumns: pinnedColumns,
                visibleColumns: visibleColumns,
                renderContext: currentRenderContext,
                focusedColumnIndex: hasFocus ? focusedCell.columnIndex : undefined,
                isFirstVisible: isFirstVisible,
                isLastVisible: isLastVisible,
                isNotVisible: isNotVisible,
                showBottomBorder: showBottomBorder
            }, rowProps), id));
            if (isNotVisible) {
                return;
            }
            const panel = panels.get(id);
            if (panel) {
                rows.push(panel);
            }
            if (params.position === undefined && isLastVisibleInSection) {
                rows.push(apiRef.current.getInfiniteLoadingTriggerElement?.({
                    lastRowId: id
                }));
            }
        });
        return rows;
    };
    const needsHorizontalScrollbar = outerSize.width && columnsTotalWidth > outerSize.width;
    const scrollerStyle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridVirtualScroller.useMemo[scrollerStyle]": ()=>({
                overflowX: !needsHorizontalScrollbar || listView ? 'hidden' : undefined,
                overflowY: rootProps.autoHeight ? 'hidden' : undefined
            })
    }["useGridVirtualScroller.useMemo[scrollerStyle]"], [
        needsHorizontalScrollbar,
        rootProps.autoHeight,
        listView
    ]);
    const contentSize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridVirtualScroller.useMemo[contentSize]": ()=>{
            const size = {
                width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',
                flexBasis: contentHeight,
                flexShrink: 0
            };
            if (size.flexBasis === 0) {
                size.flexBasis = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["minimalContentHeight"]; // Give room to show the overlay when there no rows.
            }
            return size;
        }
    }["useGridVirtualScroller.useMemo[contentSize]"], [
        columnsTotalWidth,
        contentHeight,
        needsHorizontalScrollbar
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridVirtualScroller.useEffect": ()=>{
            apiRef.current.publishEvent('virtualScrollerContentSizeChange');
        }
    }["useGridVirtualScroller.useEffect"], [
        apiRef,
        contentSize
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useGridVirtualScroller.useEnhancedEffect": ()=>{
            // TODO a scroll reset should not be necessary
            if (enabledForColumns) {
                scrollerRef.current.scrollLeft = 0;
            }
            if (enabledForRows) {
                scrollerRef.current.scrollTop = 0;
            }
        }
    }["useGridVirtualScroller.useEnhancedEffect"], [
        enabledForColumns,
        enabledForRows,
        gridRootRef,
        scrollerRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useGridVirtualScroller.useEnhancedEffect": ()=>{
            if (listView) {
                scrollerRef.current.scrollLeft = 0;
            }
        }
    }["useGridVirtualScroller.useEnhancedEffect"], [
        listView,
        scrollerRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useRunOnce$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRunOnce"])(outerSize.width !== 0, {
        "useGridVirtualScroller.useRunOnce": ()=>{
            const inputs = inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns);
            const initialRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);
            updateRenderContext(initialRenderContext);
            apiRef.current.publishEvent('scrollPositionChange', {
                top: scrollPosition.current.top,
                left: scrollPosition.current.left,
                renderContext: initialRenderContext
            });
        }
    }["useGridVirtualScroller.useRunOnce"]);
    apiRef.current.register('private', {
        updateRenderContext: forceUpdateRenderContext
    });
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnsChange', forceUpdateRenderContext);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'filteredRowsSet', forceUpdateRenderContext);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowExpansionChange', forceUpdateRenderContext);
    return {
        renderContext,
        setPanels,
        getRows,
        getContainerProps: ()=>({
                ref: mainRefCallback
            }),
        getScrollerProps: ()=>({
                ref: scrollerRef,
                onScroll: handleScroll,
                onWheel: handleWheel,
                onTouchMove: handleTouchMove,
                style: scrollerStyle,
                role: 'presentation',
                // `tabIndex` shouldn't be used along role=presentation, but it fixes a Firefox bug
                // https://github.com/mui/mui-x/pull/13891#discussion_r1683416024
                tabIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.isFirefox ? -1 : undefined
            }),
        getContentProps: ()=>({
                style: contentSize,
                role: 'presentation'
            }),
        getRenderZoneProps: ()=>({
                role: 'rowgroup'
            }),
        getScrollbarVerticalProps: ()=>({
                ref: scrollbarVerticalRef,
                role: 'presentation'
            }),
        getScrollbarHorizontalProps: ()=>({
                ref: scrollbarHorizontalRef,
                role: 'presentation'
            })
    };
};
function inputsSelector(apiRef, rootProps, enabledForRows, enabledForColumns) {
    const dimensions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"])(apiRef.current.state);
    const currentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getVisibleRows"])(apiRef, rootProps);
    const visibleColumns = rootProps.unstable_listView ? [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridListColumnSelector"])(apiRef.current.state)
    ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef);
    const hiddenCellsOriginMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSpanningHiddenCellsOriginMapSelector"])(apiRef);
    const lastRowId = apiRef.current.state.rows.dataRowIds.at(-1);
    const lastColumn = visibleColumns.at(-1);
    return {
        enabledForRows,
        enabledForColumns,
        apiRef,
        autoHeight: rootProps.autoHeight,
        rowBufferPx: rootProps.rowBufferPx,
        columnBufferPx: rootProps.columnBufferPx,
        leftPinnedWidth: dimensions.leftPinnedWidth,
        columnsTotalWidth: dimensions.columnsTotalWidth,
        viewportInnerWidth: dimensions.viewportInnerSize.width,
        viewportInnerHeight: dimensions.viewportInnerSize.height,
        lastRowHeight: lastRowId !== undefined ? apiRef.current.unstable_getRowHeight(lastRowId) : 0,
        lastColumnWidth: lastColumn?.computedWidth ?? 0,
        rowsMeta: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsMetaSelector"])(apiRef.current.state),
        columnPositions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnPositionsSelector"])(apiRef),
        rows: currentPage.rows,
        range: currentPage.range,
        pinnedColumns: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisiblePinnedColumnDefinitionsSelector"])(apiRef),
        visibleColumns,
        hiddenCellsOriginMap,
        listView: rootProps.unstable_listView ?? false,
        virtualizeColumnsWithAutoRowHeight: rootProps.virtualizeColumnsWithAutoRowHeight
    };
}
function computeRenderContext(inputs, scrollPosition, scrollCache) {
    const renderContext = {
        firstRowIndex: 0,
        lastRowIndex: inputs.rows.length,
        firstColumnIndex: 0,
        lastColumnIndex: inputs.visibleColumns.length
    };
    const { top, left } = scrollPosition;
    const realLeft = Math.abs(left) + inputs.leftPinnedWidth;
    if (inputs.enabledForRows) {
        // Clamp the value because the search may return an index out of bounds.
        // In the last index, this is not needed because Array.slice doesn't include it.
        let firstRowIndex = Math.min(getNearestIndexToRender(inputs, top, {
            atStart: true,
            lastPosition: inputs.rowsMeta.positions[inputs.rowsMeta.positions.length - 1] + inputs.lastRowHeight
        }), inputs.rowsMeta.positions.length - 1);
        // If any of the cells in the `firstRowIndex` is hidden due to an extended row span,
        // Make sure the row from where the rowSpan is originated is visible.
        const rowSpanHiddenCellOrigin = inputs.hiddenCellsOriginMap[firstRowIndex];
        if (rowSpanHiddenCellOrigin) {
            const minSpannedRowIndex = Math.min(...Object.values(rowSpanHiddenCellOrigin));
            firstRowIndex = Math.min(firstRowIndex, minSpannedRowIndex);
        }
        const lastRowIndex = inputs.autoHeight ? firstRowIndex + inputs.rows.length : getNearestIndexToRender(inputs, top + inputs.viewportInnerHeight);
        renderContext.firstRowIndex = firstRowIndex;
        renderContext.lastRowIndex = lastRowIndex;
    }
    if (inputs.enabledForColumns) {
        let firstColumnIndex = 0;
        let lastColumnIndex = inputs.columnPositions.length;
        let hasRowWithAutoHeight = false;
        const [firstRowToRender, lastRowToRender] = getIndexesToRender({
            firstIndex: renderContext.firstRowIndex,
            lastIndex: renderContext.lastRowIndex,
            minFirstIndex: 0,
            maxLastIndex: inputs.rows.length,
            bufferBefore: scrollCache.buffer.rowBefore,
            bufferAfter: scrollCache.buffer.rowAfter,
            positions: inputs.rowsMeta.positions,
            lastSize: inputs.lastRowHeight
        });
        if (!inputs.virtualizeColumnsWithAutoRowHeight) {
            for(let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1){
                const row = inputs.rows[i];
                hasRowWithAutoHeight = inputs.apiRef.current.rowHasAutoHeight(row.id);
            }
        }
        if (!hasRowWithAutoHeight || inputs.virtualizeColumnsWithAutoRowHeight) {
            firstColumnIndex = binarySearch(realLeft, inputs.columnPositions, {
                atStart: true,
                lastPosition: inputs.columnsTotalWidth
            });
            lastColumnIndex = binarySearch(realLeft + inputs.viewportInnerWidth, inputs.columnPositions);
        }
        renderContext.firstColumnIndex = firstColumnIndex;
        renderContext.lastColumnIndex = lastColumnIndex;
    }
    const actualRenderContext = deriveRenderContext(inputs, renderContext, scrollCache);
    return actualRenderContext;
}
function getNearestIndexToRender(inputs, offset, options) {
    const lastMeasuredIndexRelativeToAllRows = inputs.apiRef.current.getLastMeasuredRowIndex();
    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;
    if (inputs.range?.lastRowIndex && !allRowsMeasured) {
        // Check if all rows in this page are already measured
        allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= inputs.range.lastRowIndex;
    }
    const lastMeasuredIndexRelativeToCurrentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(lastMeasuredIndexRelativeToAllRows - (inputs.range?.firstRowIndex || 0), 0, inputs.rowsMeta.positions.length);
    if (allRowsMeasured || inputs.rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {
        // If all rows were measured (when no row has "auto" as height) or all rows before the offset
        // were measured, then use a binary search because it's faster.
        return binarySearch(offset, inputs.rowsMeta.positions, options);
    }
    // Otherwise, use an exponential search.
    // If rows have "auto" as height, their positions will be based on estimated heights.
    // In this case, we can skip several steps until we find a position higher than the offset.
    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js
    return exponentialSearch(offset, inputs.rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage, options);
}
/**
 * Accepts as input a raw render context (the area visible in the viewport) and adds
 * computes the actual render context based on pinned elements, buffer dimensions and
 * spanning.
 */ function deriveRenderContext(inputs, nextRenderContext, scrollCache) {
    const [firstRowToRender, lastRowToRender] = getIndexesToRender({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: inputs.rows.length,
        bufferBefore: scrollCache.buffer.rowBefore,
        bufferAfter: scrollCache.buffer.rowAfter,
        positions: inputs.rowsMeta.positions,
        lastSize: inputs.lastRowHeight
    });
    const [initialFirstColumnToRender, lastColumnToRender] = getIndexesToRender({
        firstIndex: nextRenderContext.firstColumnIndex,
        lastIndex: nextRenderContext.lastColumnIndex,
        minFirstIndex: inputs.pinnedColumns.left.length,
        maxLastIndex: inputs.visibleColumns.length - inputs.pinnedColumns.right.length,
        bufferBefore: scrollCache.buffer.columnBefore,
        bufferAfter: scrollCache.buffer.columnAfter,
        positions: inputs.columnPositions,
        lastSize: inputs.lastColumnWidth
    });
    const firstColumnToRender = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFirstNonSpannedColumnToRender"])({
        firstColumnToRender: initialFirstColumnToRender,
        apiRef: inputs.apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: inputs.rows
    });
    return {
        firstRowIndex: firstRowToRender,
        lastRowIndex: lastRowToRender,
        firstColumnIndex: firstColumnToRender,
        lastColumnIndex: lastColumnToRender
    };
}
/**
 * Use binary search to avoid looping through all possible positions.
 * The `options.atStart` provides the possibility to match for the first element that
 * intersects the screen, even if said element's start position is before `offset`. In
 * other words, we search for `offset + width`.
 */ function binarySearch(offset, positions, options = undefined, sliceStart = 0, sliceEnd = positions.length) {
    if (positions.length <= 0) {
        return -1;
    }
    if (sliceStart >= sliceEnd) {
        return sliceStart;
    }
    const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);
    const position = positions[pivot];
    let isBefore;
    if (options?.atStart) {
        const width = (pivot === positions.length - 1 ? options.lastPosition : positions[pivot + 1]) - position;
        isBefore = offset - width < position;
    } else {
        isBefore = offset <= position;
    }
    return isBefore ? binarySearch(offset, positions, options, sliceStart, pivot) : binarySearch(offset, positions, options, pivot + 1, sliceEnd);
}
function exponentialSearch(offset, positions, index, options = undefined) {
    let interval = 1;
    while(index < positions.length && Math.abs(positions[index]) < offset){
        index += interval;
        interval *= 2;
    }
    return binarySearch(offset, positions, options, Math.floor(index / 2), Math.min(index, positions.length));
}
function getIndexesToRender({ firstIndex, lastIndex, bufferBefore, bufferAfter, minFirstIndex, maxLastIndex, positions, lastSize }) {
    const firstPosition = positions[firstIndex] - bufferBefore;
    const lastPosition = positions[lastIndex] + bufferAfter;
    const firstIndexPadded = binarySearch(firstPosition, positions, {
        atStart: true,
        lastPosition: positions[positions.length - 1] + lastSize
    });
    const lastIndexPadded = binarySearch(lastPosition, positions);
    return [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(firstIndexPadded, minFirstIndex, maxLastIndex),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(lastIndexPadded, minFirstIndex, maxLastIndex)
    ];
}
function areRenderContextsEqual(context1, context2) {
    if (context1 === context2) {
        return true;
    }
    return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;
}
function computeOffsetLeft(columnPositions, renderContext, pinnedLeftLength) {
    const left = (columnPositions[renderContext.firstColumnIndex] ?? 0) - (columnPositions[pinnedLeftLength] ?? 0);
    return Math.abs(left);
}
function directionForDelta(dx, dy) {
    if (dx === 0 && dy === 0) {
        return ScrollDirection.NONE;
    }
    /* eslint-disable */ if (Math.abs(dy) >= Math.abs(dx)) {
        if (dy > 0) {
            return ScrollDirection.DOWN;
        } else {
            return ScrollDirection.UP;
        }
    } else {
        if (dx > 0) {
            return ScrollDirection.RIGHT;
        } else {
            return ScrollDirection.LEFT;
        }
    }
/* eslint-enable */ }
function bufferForDirection(isRtl, direction, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) {
    if (isRtl) {
        switch(direction){
            case ScrollDirection.LEFT:
                direction = ScrollDirection.RIGHT;
                break;
            case ScrollDirection.RIGHT:
                direction = ScrollDirection.LEFT;
                break;
            default:
        }
    }
    switch(direction){
        case ScrollDirection.NONE:
            return {
                rowAfter: rowBufferPx,
                rowBefore: rowBufferPx,
                columnAfter: columnBufferPx,
                columnBefore: columnBufferPx
            };
        case ScrollDirection.LEFT:
            return {
                rowAfter: 0,
                rowBefore: 0,
                columnAfter: 0,
                columnBefore: horizontalBuffer
            };
        case ScrollDirection.RIGHT:
            return {
                rowAfter: 0,
                rowBefore: 0,
                columnAfter: horizontalBuffer,
                columnBefore: 0
            };
        case ScrollDirection.UP:
            return {
                rowAfter: 0,
                rowBefore: verticalBuffer,
                columnAfter: 0,
                columnBefore: 0
            };
        case ScrollDirection.DOWN:
            return {
                rowAfter: verticalBuffer,
                rowBefore: 0,
                columnAfter: 0,
                columnBefore: 0
            };
        default:
            // eslint unable to figure out enum exhaustiveness
            throw new Error('unreachable');
    }
}
// Round to avoid issues with subpixel rendering
// https://github.com/mui/mui-x/issues/15721
function roundDimensions(dimensions) {
    return {
        width: Math.round(dimensions.width * 10) / 10,
        height: Math.round(dimensions.height * 10) / 10
    };
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "GridColumnHeaderRow": (()=>GridColumnHeaderRow),
    "useGridColumnHeaders": (()=>useGridColumnHeaders)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/clsx/dist/clsx.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$material$2f$styles$2f$styled$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__$3c$export__default__as__styled$3e$__ = __turbopack_import__("[project]/node_modules/@mui/material/styles/styled.js [app-client] (ecmascript) <locals> <export default as styled>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/system/esm/RtlProvider/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$useGridVirtualScroller$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsInterfaces.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/constants/gridClasses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$GridScrollbarFillerCell$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/components/GridScrollbarFillerCell.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$utils$2f$getPinnedCellOffset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/internals/utils/getPinnedCellOffset.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$columnHeaders$2f$GridColumnHeaderItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$columnHeaders$2f$GridColumnHeaderSeparator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSeparator.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$columnHeaders$2f$GridColumnGroupHeader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnGroupHeader.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const GridColumnHeaderRow = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$material$2f$styles$2f$styled$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__$3c$export__default__as__styled$3e$__["styled"])('div', {
    name: 'MuiDataGrid',
    slot: 'ColumnHeaderRow',
    overridesResolver: (_, styles)=>styles.columnHeaderRow
})({
    display: 'flex'
});
const useGridColumnHeaders = (props)=>{
    const { visibleColumns, sortColumnLookup, filterColumnLookup, columnHeaderTabIndexState, columnGroupHeaderTabIndexState, columnHeaderFocus, columnGroupHeaderFocus, headerGroupingMaxDepth, columnMenuState, columnVisibility, columnGroupsHeaderStructure, hasOtherElementInTabSequence } = props;
    const [dragCol, setDragCol] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState('');
    const [resizeCol, setResizeCol] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState('');
    const apiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridPrivateApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridPrivateApiContext"])();
    const isRtl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRtl"])();
    const rootProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRootProps"])();
    const dimensions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"]);
    const hasColumnVirtualization = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVirtualizationColumnEnabledSelector"]);
    const columnGroupsModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnGroupsUnwrappedModelSelector"]);
    const columnPositions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnPositionsSelector"]);
    const renderContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRenderContextColumnsSelector"]);
    const pinnedColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisiblePinnedColumnDefinitionsSelector"]);
    const columnsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnLookupSelector"]);
    const offsetLeft = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$useGridVirtualScroller$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["computeOffsetLeft"])(columnPositions, renderContext, pinnedColumns.left.length);
    const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridColumnHeaders.useEffect": ()=>{
            if (apiRef.current.columnHeadersContainerRef.current) {
                apiRef.current.columnHeadersContainerRef.current.scrollLeft = 0;
            }
        }
    }["useGridColumnHeaders.useEffect"], [
        apiRef
    ]);
    const handleColumnResizeStart = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnHeaders.useCallback[handleColumnResizeStart]": (params)=>setResizeCol(params.field)
    }["useGridColumnHeaders.useCallback[handleColumnResizeStart]"], []);
    const handleColumnResizeStop = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnHeaders.useCallback[handleColumnResizeStop]": ()=>setResizeCol('')
    }["useGridColumnHeaders.useCallback[handleColumnResizeStop]"], []);
    const handleColumnReorderStart = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnHeaders.useCallback[handleColumnReorderStart]": (params)=>setDragCol(params.field)
    }["useGridColumnHeaders.useCallback[handleColumnReorderStart]"], []);
    const handleColumnReorderStop = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnHeaders.useCallback[handleColumnReorderStop]": ()=>setDragCol('')
    }["useGridColumnHeaders.useCallback[handleColumnReorderStop]"], []);
    const leftRenderContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridColumnHeaders.useMemo[leftRenderContext]": ()=>{
            return pinnedColumns.left.length ? {
                firstColumnIndex: 0,
                lastColumnIndex: pinnedColumns.left.length
            } : null;
        }
    }["useGridColumnHeaders.useMemo[leftRenderContext]"], [
        pinnedColumns.left.length
    ]);
    const rightRenderContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridColumnHeaders.useMemo[rightRenderContext]": ()=>{
            return pinnedColumns.right.length ? {
                firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,
                lastColumnIndex: visibleColumns.length
            } : null;
        }
    }["useGridColumnHeaders.useMemo[rightRenderContext]"], [
        pinnedColumns.right.length,
        visibleColumns.length
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnResizeStart', handleColumnResizeStart);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnResizeStop', handleColumnResizeStop);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);
    // Helper for computation common between getColumnHeaders and getColumnGroupHeaders
    const getColumnsToRender = (params)=>{
        const { renderContext: currentContext = renderContext, maxLastColumn = visibleColumns.length } = params || {};
        let firstColumnToRender;
        let lastColumnToRender;
        if (!rootProps.disableVirtualization && !hasColumnVirtualization) {
            firstColumnToRender = 0;
            lastColumnToRender = maxLastColumn;
        } else {
            firstColumnToRender = currentContext.firstColumnIndex;
            lastColumnToRender = currentContext.lastColumnIndex;
        }
        const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
        return {
            renderedColumns,
            firstColumnToRender,
            lastColumnToRender
        };
    };
    const getFillers = (params, children, leftOverflow, borderBottom = false)=>{
        const isPinnedRight = params?.position === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].RIGHT;
        const isNotPinned = params?.position === undefined;
        const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;
        const leftOffsetWidth = offsetLeft - leftOverflow;
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Fragment, {
            children: [
                isNotPinned && /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])("div", {
                    role: "presentation",
                    style: {
                        width: leftOffsetWidth
                    }
                }),
                children,
                isNotPinned && /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])("div", {
                    role: "presentation",
                    className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].filler, borderBottom && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"]['filler--borderBottom'])
                }),
                hasScrollbarFiller && /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$GridScrollbarFillerCell$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridScrollbarFillerCell"], {
                    header: true,
                    pinnedRight: isPinnedRight,
                    borderBottom: borderBottom,
                    borderTop: false
                })
            ]
        });
    };
    const getCellOffsetStyle = ({ pinnedPosition, columnIndex, computedWidth })=>{
        let style;
        const isLeftPinned = pinnedPosition === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].LEFT;
        const isRightPinned = pinnedPosition === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].RIGHT;
        if (isLeftPinned || isRightPinned) {
            const pinnedOffset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$utils$2f$getPinnedCellOffset$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPinnedCellOffset"])(pinnedPosition, computedWidth, columnIndex, columnPositions, dimensions);
            let side = isLeftPinned ? 'left' : 'right';
            if (isRtl) {
                side = isLeftPinned ? 'right' : 'left';
            }
            if (pinnedPosition === 'left') {
                style = {
                    [side]: pinnedOffset
                };
            }
            if (pinnedPosition === 'right') {
                style = {
                    [side]: pinnedOffset
                };
            }
        }
        return style;
    };
    const getColumnHeaders = (params, other = {})=>{
        const { renderedColumns, firstColumnToRender } = getColumnsToRender(params);
        const columns = [];
        for(let i = 0; i < renderedColumns.length; i += 1){
            const colDef = renderedColumns[i];
            const columnIndex = firstColumnToRender + i;
            const isFirstColumn = columnIndex === 0;
            const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;
            const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;
            const open = columnMenuState.open && columnMenuState.field === colDef.field;
            const pinnedPosition = params?.position;
            const style = getCellOffsetStyle({
                pinnedPosition,
                columnIndex,
                computedWidth: colDef.computedWidth
            });
            const siblingWithBorderingSeparator = pinnedPosition === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];
            const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;
            const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;
            columns.push(/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$columnHeaders$2f$GridColumnHeaderItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridColumnHeaderItem"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, sortColumnLookup[colDef.field], {
                columnMenuOpen: open,
                filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,
                headerHeight: dimensions.headerHeight,
                isDragging: colDef.field === dragCol,
                colDef: colDef,
                colIndex: columnIndex,
                isResizing: resizeCol === colDef.field,
                isLast: columnIndex === columnPositions.length - 1,
                hasFocus: hasFocus,
                tabIndex: tabIndex,
                pinnedPosition: pinnedPosition,
                style: style,
                indexInSection: i,
                sectionLength: renderedColumns.length,
                gridHasFiller: gridHasFiller,
                isLastUnpinned: isLastUnpinned,
                isSiblingFocused: isSiblingFocused
            }, other), colDef.field));
        }
        return getFillers(params, columns, 0);
    };
    const getColumnHeadersRow = ()=>{
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxs"])(GridColumnHeaderRow, {
            role: "row",
            "aria-rowindex": headerGroupingMaxDepth + 1,
            ownerState: rootProps,
            className: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"]['row--borderBottom'],
            children: [
                leftRenderContext && getColumnHeaders({
                    position: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].LEFT,
                    renderContext: leftRenderContext,
                    maxLastColumn: leftRenderContext.lastColumnIndex
                }, {
                    disableReorder: true
                }),
                getColumnHeaders({
                    renderContext,
                    maxLastColumn: visibleColumns.length - pinnedColumns.right.length
                }),
                rightRenderContext && getColumnHeaders({
                    position: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].RIGHT,
                    renderContext: rightRenderContext,
                    maxLastColumn: rightRenderContext.lastColumnIndex
                }, {
                    disableReorder: true,
                    separatorSide: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$columnHeaders$2f$GridColumnHeaderSeparator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridColumnHeaderSeparatorSides"].Left
                })
            ]
        });
    };
    const getColumnGroupHeaders = ({ depth, params })=>{
        const columnsToRender = getColumnsToRender(params);
        if (columnsToRender.renderedColumns.length === 0) {
            return null;
        }
        const { firstColumnToRender, lastColumnToRender } = columnsToRender;
        const rowStructure = columnGroupsHeaderStructure[depth];
        const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;
        const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;
        const firstGroupIndex = rowStructure.findIndex(({ groupId, columnFields })=>groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));
        const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;
        const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;
        const lastGroupIndex = rowStructure.findIndex(({ groupId, columnFields })=>groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));
        const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map((groupStructure)=>{
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, groupStructure, {
                columnFields: groupStructure.columnFields.filter((field)=>columnVisibility[field] !== false)
            });
        }).filter((groupStructure)=>groupStructure.columnFields.length > 0);
        const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);
        const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);
        const leftOverflow = hiddenGroupColumns.reduce((acc, field)=>{
            const column = columnsLookup[field];
            return acc + (column.computedWidth ?? 0);
        }, 0);
        let columnIndex = firstColumnToRender;
        const children = visibleColumnGroupHeader.map(({ groupId, columnFields }, index)=>{
            const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);
            const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;
            const headerInfo = {
                groupId,
                width: columnFields.reduce((acc, field)=>acc + columnsLookup[field].computedWidth, 0),
                fields: columnFields,
                colIndex: columnIndex,
                hasFocus,
                tabIndex
            };
            const pinnedPosition = params.position;
            const style = getCellOffsetStyle({
                pinnedPosition,
                columnIndex,
                computedWidth: headerInfo.width
            });
            columnIndex += columnFields.length;
            let indexInSection = index;
            if (pinnedPosition === 'left') {
                // Group headers can expand to multiple columns, we need to adjust the index
                indexInSection = columnIndex - 1;
            }
            return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$columnHeaders$2f$GridColumnGroupHeader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridColumnGroupHeader"], {
                groupId: groupId,
                width: headerInfo.width,
                fields: headerInfo.fields,
                colIndex: headerInfo.colIndex,
                depth: depth,
                isLastColumn: index === visibleColumnGroupHeader.length - 1,
                maxDepth: headerGroupingMaxDepth,
                height: dimensions.groupHeaderHeight,
                hasFocus: hasFocus,
                tabIndex: tabIndex,
                pinnedPosition: pinnedPosition,
                style: style,
                indexInSection: indexInSection,
                sectionLength: visibleColumnGroupHeader.length,
                gridHasFiller: gridHasFiller
            }, index);
        });
        return getFillers(params, children, leftOverflow);
    };
    const getColumnGroupHeadersRows = ()=>{
        if (headerGroupingMaxDepth === 0) {
            return null;
        }
        const headerRows = [];
        for(let depth = 0; depth < headerGroupingMaxDepth; depth += 1){
            headerRows.push(/*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxs"])(GridColumnHeaderRow, {
                role: "row",
                "aria-rowindex": depth + 1,
                ownerState: rootProps,
                children: [
                    leftRenderContext && getColumnGroupHeaders({
                        depth,
                        params: {
                            position: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].LEFT,
                            renderContext: leftRenderContext,
                            maxLastColumn: leftRenderContext.lastColumnIndex
                        }
                    }),
                    getColumnGroupHeaders({
                        depth,
                        params: {
                            renderContext
                        }
                    }),
                    rightRenderContext && getColumnGroupHeaders({
                        depth,
                        params: {
                            position: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].RIGHT,
                            renderContext: rightRenderContext,
                            maxLastColumn: rightRenderContext.lastColumnIndex
                        }
                    })
                ]
            }, depth));
        }
        return headerRows;
    };
    return {
        renderContext,
        leftRenderContext,
        rightRenderContext,
        pinnedColumns,
        visibleColumns,
        getCellOffsetStyle,
        getFillers,
        getColumnHeadersRow,
        getColumnsToRender,
        getColumnGroupHeadersRows,
        isDragging: !!dragCol,
        getInnerProps: ()=>({
                role: 'rowgroup'
            })
    };
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridConfiguration.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridConfiguration": (()=>useGridConfiguration)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$GridConfigurationContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/components/GridConfigurationContext.js [app-client] (ecmascript)");
;
;
const useGridConfiguration = ()=>{
    const configuration = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useContext(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$GridConfigurationContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridConfigurationContext"]);
    if (configuration === undefined) {
        throw new Error([
            'MUI X: Could not find the Data Grid configuration context.',
            'It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.',
            'This can also happen if you are bundling multiple versions of the Data Grid.'
        ].join('\n'));
    }
    return configuration;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/editing/gridEditingSelectors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Select the row editing state.
 */ __turbopack_esm__({
    "gridEditRowsStateSelector": (()=>gridEditRowsStateSelector)
});
const gridEditRowsStateSelector = (state)=>state.editRows;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "unwrapPrivateAPI": (()=>unwrapPrivateAPI),
    "useGridApiInitialization": (()=>useGridApiInitialization)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$Store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/Store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$EventManager$2f$EventManager$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/EventManager/EventManager.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
;
const SYMBOL_API_PRIVATE = Symbol('mui.api_private');
const isSyntheticEvent = (event)=>{
    return event.isPropagationStopped !== undefined;
};
function unwrapPrivateAPI(publicApi) {
    return publicApi[SYMBOL_API_PRIVATE];
}
let globalId = 0;
function createPrivateAPI(publicApiRef) {
    const existingPrivateApi = publicApiRef.current?.[SYMBOL_API_PRIVATE];
    if (existingPrivateApi) {
        return existingPrivateApi;
    }
    const state = {};
    const privateApi = {
        state,
        store: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$Store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Store"].create(state),
        instanceId: {
            id: globalId
        }
    };
    globalId += 1;
    privateApi.getPublicApi = ()=>publicApiRef.current;
    privateApi.register = (visibility, methods)=>{
        Object.keys(methods).forEach((methodName)=>{
            const method = methods[methodName];
            const currentPrivateMethod = privateApi[methodName];
            if (currentPrivateMethod?.spying === true) {
                currentPrivateMethod.target = method;
            } else {
                privateApi[methodName] = method;
            }
            if (visibility === 'public') {
                const publicApi = publicApiRef.current;
                const currentPublicMethod = publicApi[methodName];
                if (currentPublicMethod?.spying === true) {
                    currentPublicMethod.target = method;
                } else {
                    publicApi[methodName] = method;
                }
            }
        });
    };
    privateApi.register('private', {
        caches: {},
        eventManager: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$EventManager$2f$EventManager$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EventManager"]()
    });
    return privateApi;
}
function createPublicAPI(privateApiRef) {
    const publicApi = {
        get state () {
            return privateApiRef.current.state;
        },
        get store () {
            return privateApiRef.current.store;
        },
        get instanceId () {
            return privateApiRef.current.instanceId;
        },
        [SYMBOL_API_PRIVATE]: privateApiRef.current
    };
    return publicApi;
}
function useGridApiInitialization(inputApiRef, props) {
    const publicApiRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const privateApiRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    if (!privateApiRef.current) {
        privateApiRef.current = createPrivateAPI(publicApiRef);
    }
    if (!publicApiRef.current) {
        publicApiRef.current = createPublicAPI(privateApiRef);
    }
    const publishEvent = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridApiInitialization.useCallback[publishEvent]": (...args)=>{
            const [name, params, event = {}] = args;
            event.defaultMuiPrevented = false;
            if (isSyntheticEvent(event) && event.isPropagationStopped()) {
                return;
            }
            const details = props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGridPro || props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGridPremium ? {
                api: privateApiRef.current.getPublicApi()
            } : {};
            privateApiRef.current.eventManager.emit(name, params, event, details);
        }
    }["useGridApiInitialization.useCallback[publishEvent]"], [
        privateApiRef,
        props.signature
    ]);
    const subscribeEvent = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridApiInitialization.useCallback[subscribeEvent]": (event, handler, options)=>{
            privateApiRef.current.eventManager.on(event, handler, options);
            const api = privateApiRef.current;
            return ({
                "useGridApiInitialization.useCallback[subscribeEvent]": ()=>{
                    api.eventManager.removeListener(event, handler);
                }
            })["useGridApiInitialization.useCallback[subscribeEvent]"];
        }
    }["useGridApiInitialization.useCallback[subscribeEvent]"], [
        privateApiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(privateApiRef, {
        subscribeEvent,
        publishEvent
    }, 'public');
    if (inputApiRef && !inputApiRef.current?.state) {
        inputApiRef.current = publicApiRef.current;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useImperativeHandle(inputApiRef, {
        "useGridApiInitialization.useImperativeHandle": ()=>publicApiRef.current
    }["useGridApiInitialization.useImperativeHandle"], [
        publicApiRef
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridApiInitialization.useEffect": ()=>{
            const api = privateApiRef.current;
            return ({
                "useGridApiInitialization.useEffect": ()=>{
                    api.publishEvent('unmount');
                }
            })["useGridApiInitialization.useEffect"];
        }
    }["useGridApiInitialization.useEffect"], [
        privateApiRef
    ]);
    return privateApiRef;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/useGridRefs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRefs": (()=>useGridRefs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
const useGridRefs = (apiRef)=>{
    const rootElementRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const mainElementRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const virtualScrollerRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const virtualScrollbarVerticalRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const virtualScrollbarHorizontalRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const columnHeadersContainerRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    apiRef.current.register('public', {
        rootElementRef
    });
    apiRef.current.register('private', {
        mainElementRef,
        virtualScrollerRef,
        virtualScrollbarVerticalRef,
        virtualScrollbarHorizontalRef,
        columnHeadersContainerRef
    });
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/useGridIsRtl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridIsRtl": (()=>useGridIsRtl)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/system/esm/RtlProvider/index.js [app-client] (ecmascript)");
;
;
;
const useGridIsRtl = (apiRef)=>{
    const isRtl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRtl"])();
    if (apiRef.current.state.isRtl === undefined) {
        apiRef.current.state.isRtl = isRtl;
    }
    const isFirstEffect = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridIsRtl.useEffect": ()=>{
            if (isFirstEffect.current) {
                isFirstEffect.current = false;
            } else {
                apiRef.current.setState({
                    "useGridIsRtl.useEffect": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            isRtl
                        })
                }["useGridIsRtl.useEffect"]);
            }
        }
    }["useGridIsRtl.useEffect"], [
        apiRef,
        isRtl
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridLoggerFactory": (()=>useGridLoggerFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
;
;
;
const forceDebug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["localStorageAvailable"])() && window.localStorage.getItem('DEBUG') != null;
const noop = ()=>{};
const noopLogger = {
    debug: noop,
    info: noop,
    warn: noop,
    error: noop
};
const LOG_LEVELS = [
    'debug',
    'info',
    'warn',
    'error'
];
function getAppender(name, logLevel, appender = console) {
    const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);
    if (minLogLevelIdx === -1) {
        throw new Error(`MUI X: Log level ${logLevel} not recognized.`);
    }
    const logger = LOG_LEVELS.reduce((loggerObj, method, idx)=>{
        if (idx >= minLogLevelIdx) {
            loggerObj[method] = (...args)=>{
                const [message, ...other] = args;
                appender[method](`MUI X: ${name} - ${message}`, ...other);
            };
        } else {
            loggerObj[method] = noop;
        }
        return loggerObj;
    }, {});
    return logger;
}
const useGridLoggerFactory = (apiRef, props)=>{
    const getLogger = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridLoggerFactory.useCallback[getLogger]": (name)=>{
            if (forceDebug) {
                return getAppender(name, 'debug', props.logger);
            }
            if (!props.logLevel) {
                return noopLogger;
            }
            return getAppender(name, props.logLevel.toString(), props.logger);
        }
    }["useGridLoggerFactory.useCallback[getLogger]"], [
        props.logLevel,
        props.logger
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, {
        getLogger
    }, 'private');
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridStateInitialization": (()=>useGridStateInitialization)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
const useGridStateInitialization = (apiRef)=>{
    const controlStateMapRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef({});
    const [, rawForceUpdate] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState();
    const registerControlState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStateInitialization.useCallback[registerControlState]": (controlStateItem)=>{
            controlStateMapRef.current[controlStateItem.stateId] = controlStateItem;
        }
    }["useGridStateInitialization.useCallback[registerControlState]"], []);
    const setState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStateInitialization.useCallback[setState]": (state, reason)=>{
            let newState;
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(state)) {
                newState = state(apiRef.current.state);
            } else {
                newState = state;
            }
            if (apiRef.current.state === newState) {
                return false;
            }
            let ignoreSetState = false;
            // Apply the control state constraints
            const updatedControlStateIds = [];
            Object.keys(controlStateMapRef.current).forEach({
                "useGridStateInitialization.useCallback[setState]": (stateId)=>{
                    const controlState = controlStateMapRef.current[stateId];
                    const oldSubState = controlState.stateSelector(apiRef.current.state, apiRef.current.instanceId);
                    const newSubState = controlState.stateSelector(newState, apiRef.current.instanceId);
                    if (newSubState === oldSubState) {
                        return;
                    }
                    updatedControlStateIds.push({
                        stateId: controlState.stateId,
                        hasPropChanged: newSubState !== controlState.propModel
                    });
                    // The state is controlled, the prop should always win
                    if (controlState.propModel !== undefined && newSubState !== controlState.propModel) {
                        ignoreSetState = true;
                    }
                }
            }["useGridStateInitialization.useCallback[setState]"]);
            if (updatedControlStateIds.length > 1) {
                // Each hook modify its own state, and it should not leak
                // Events are here to forward to other hooks and apply changes.
                // You are trying to update several states in a no isolated way.
                throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map({
                    "useGridStateInitialization.useCallback[setState]": (el)=>el.stateId
                }["useGridStateInitialization.useCallback[setState]"]).join(', ')} in the same transaction.`);
            }
            if (!ignoreSetState) {
                // We always assign it as we mutate rows for perf reason.
                apiRef.current.state = newState;
                apiRef.current.publishEvent('stateChange', newState);
                apiRef.current.store.update(newState);
            }
            if (updatedControlStateIds.length === 1) {
                const { stateId, hasPropChanged } = updatedControlStateIds[0];
                const controlState = controlStateMapRef.current[stateId];
                const model = controlState.stateSelector(newState, apiRef.current.instanceId);
                if (controlState.propOnChange && hasPropChanged) {
                    controlState.propOnChange(model, {
                        reason,
                        api: apiRef.current
                    });
                }
                if (!ignoreSetState) {
                    apiRef.current.publishEvent(controlState.changeEvent, model, {
                        reason
                    });
                }
            }
            return !ignoreSetState;
        }
    }["useGridStateInitialization.useCallback[setState]"], [
        apiRef
    ]);
    const updateControlState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStateInitialization.useCallback[updateControlState]": (key, state, reason)=>{
            return apiRef.current.setState({
                "useGridStateInitialization.useCallback[updateControlState]": (previousState)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, previousState, {
                        [key]: state(previousState[key])
                    });
                }
            }["useGridStateInitialization.useCallback[updateControlState]"], reason);
        }
    }["useGridStateInitialization.useCallback[updateControlState]"], [
        apiRef
    ]);
    const forceUpdate = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStateInitialization.useCallback[forceUpdate]": ()=>rawForceUpdate({
                "useGridStateInitialization.useCallback[forceUpdate]": ()=>apiRef.current.state
            }["useGridStateInitialization.useCallback[forceUpdate]"])
    }["useGridStateInitialization.useCallback[forceUpdate]"], [
        apiRef
    ]);
    const publicStateApi = {
        setState,
        forceUpdate
    };
    const privateStateApi = {
        updateControlState,
        registerControlState
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, publicStateApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, privateStateApi, 'private');
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridPipeProcessing": (()=>useGridPipeProcessing)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
const useGridPipeProcessing = (apiRef)=>{
    const cache = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef({});
    const isRunning = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(false);
    const runAppliers = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPipeProcessing.useCallback[runAppliers]": (groupCache)=>{
            if (isRunning.current || !groupCache) {
                return;
            }
            isRunning.current = true;
            Object.values(groupCache.appliers).forEach({
                "useGridPipeProcessing.useCallback[runAppliers]": (callback)=>{
                    callback();
                }
            }["useGridPipeProcessing.useCallback[runAppliers]"]);
            isRunning.current = false;
        }
    }["useGridPipeProcessing.useCallback[runAppliers]"], []);
    const registerPipeProcessor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPipeProcessing.useCallback[registerPipeProcessor]": (group, id, processor)=>{
            if (!cache.current[group]) {
                cache.current[group] = {
                    processors: new Map(),
                    processorsAsArray: [],
                    appliers: {}
                };
            }
            const groupCache = cache.current[group];
            const oldProcessor = groupCache.processors.get(id);
            if (oldProcessor !== processor) {
                groupCache.processors.set(id, processor);
                groupCache.processorsAsArray = Array.from(cache.current[group].processors.values());
                runAppliers(groupCache);
            }
            return ({
                "useGridPipeProcessing.useCallback[registerPipeProcessor]": ()=>{
                    cache.current[group].processors.delete(id);
                    cache.current[group].processorsAsArray = Array.from(cache.current[group].processors.values());
                }
            })["useGridPipeProcessing.useCallback[registerPipeProcessor]"];
        }
    }["useGridPipeProcessing.useCallback[registerPipeProcessor]"], [
        runAppliers
    ]);
    const registerPipeApplier = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPipeProcessing.useCallback[registerPipeApplier]": (group, id, applier)=>{
            if (!cache.current[group]) {
                cache.current[group] = {
                    processors: new Map(),
                    processorsAsArray: [],
                    appliers: {}
                };
            }
            cache.current[group].appliers[id] = applier;
            return ({
                "useGridPipeProcessing.useCallback[registerPipeApplier]": ()=>{
                    const _appliers = cache.current[group].appliers, otherAppliers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_appliers, [
                        id
                    ].map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]));
                    cache.current[group].appliers = otherAppliers;
                }
            })["useGridPipeProcessing.useCallback[registerPipeApplier]"];
        }
    }["useGridPipeProcessing.useCallback[registerPipeApplier]"], []);
    const requestPipeProcessorsApplication = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPipeProcessing.useCallback[requestPipeProcessorsApplication]": (group)=>{
            runAppliers(cache.current[group]);
        }
    }["useGridPipeProcessing.useCallback[requestPipeProcessorsApplication]"], [
        runAppliers
    ]);
    const applyPipeProcessors = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPipeProcessing.useCallback[applyPipeProcessors]": (...args)=>{
            const [group, value, context] = args;
            if (!cache.current[group]) {
                return value;
            }
            const processors = cache.current[group].processorsAsArray;
            let result = value;
            for(let i = 0; i < processors.length; i += 1){
                result = processors[i](result, context);
            }
            return result;
        }
    }["useGridPipeProcessing.useCallback[applyPipeProcessors]"], []);
    const preProcessingPrivateApi = {
        registerPipeProcessor,
        registerPipeApplier,
        requestPipeProcessorsApplication
    };
    const preProcessingPublicApi = {
        unstable_applyPipeProcessors: applyPipeProcessors
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, preProcessingPrivateApi, 'private');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, preProcessingPublicApi, 'public');
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "GRID_DEFAULT_STRATEGY": (()=>GRID_DEFAULT_STRATEGY),
    "GRID_STRATEGIES_PROCESSORS": (()=>GRID_STRATEGIES_PROCESSORS),
    "useGridStrategyProcessing": (()=>useGridStrategyProcessing)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
const GRID_DEFAULT_STRATEGY = 'none';
const GRID_STRATEGIES_PROCESSORS = {
    rowTreeCreation: 'rowTree',
    filtering: 'rowTree',
    sorting: 'rowTree',
    visibleRowsLookupCreation: 'rowTree'
};
const useGridStrategyProcessing = (apiRef)=>{
    const availableStrategies = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(new Map());
    const strategiesCache = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef({});
    const registerStrategyProcessor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStrategyProcessing.useCallback[registerStrategyProcessor]": (strategyName, processorName, processor)=>{
            const cleanup = {
                "useGridStrategyProcessing.useCallback[registerStrategyProcessor].cleanup": ()=>{
                    const _ref = strategiesCache.current[processorName], otherProcessors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_ref, [
                        strategyName
                    ].map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]));
                    strategiesCache.current[processorName] = otherProcessors;
                }
            }["useGridStrategyProcessing.useCallback[registerStrategyProcessor].cleanup"];
            if (!strategiesCache.current[processorName]) {
                strategiesCache.current[processorName] = {};
            }
            const groupPreProcessors = strategiesCache.current[processorName];
            const previousProcessor = groupPreProcessors[strategyName];
            groupPreProcessors[strategyName] = processor;
            if (!previousProcessor || previousProcessor === processor) {
                return cleanup;
            }
            if (strategyName === apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])) {
                apiRef.current.publishEvent('activeStrategyProcessorChange', processorName);
            }
            return cleanup;
        }
    }["useGridStrategyProcessing.useCallback[registerStrategyProcessor]"], [
        apiRef
    ]);
    const applyStrategyProcessor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStrategyProcessing.useCallback[applyStrategyProcessor]": (processorName, params)=>{
            const activeStrategy = apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);
            if (activeStrategy == null) {
                throw new Error("Can't apply a strategy processor before defining an active strategy");
            }
            const groupCache = strategiesCache.current[processorName];
            if (!groupCache || !groupCache[activeStrategy]) {
                throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);
            }
            const processor = groupCache[activeStrategy];
            return processor(params);
        }
    }["useGridStrategyProcessing.useCallback[applyStrategyProcessor]"], [
        apiRef
    ]);
    const getActiveStrategy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStrategyProcessing.useCallback[getActiveStrategy]": (strategyGroup)=>{
            const strategyEntries = Array.from(availableStrategies.current.entries());
            const availableStrategyEntry = strategyEntries.find({
                "useGridStrategyProcessing.useCallback[getActiveStrategy].availableStrategyEntry": ([, strategy])=>{
                    if (strategy.group !== strategyGroup) {
                        return false;
                    }
                    return strategy.isAvailable();
                }
            }["useGridStrategyProcessing.useCallback[getActiveStrategy].availableStrategyEntry"]);
            return availableStrategyEntry?.[0] ?? GRID_DEFAULT_STRATEGY;
        }
    }["useGridStrategyProcessing.useCallback[getActiveStrategy]"], []);
    const setStrategyAvailability = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStrategyProcessing.useCallback[setStrategyAvailability]": (strategyGroup, strategyName, isAvailable)=>{
            availableStrategies.current.set(strategyName, {
                group: strategyGroup,
                isAvailable
            });
            apiRef.current.publishEvent('strategyAvailabilityChange');
        }
    }["useGridStrategyProcessing.useCallback[setStrategyAvailability]"], [
        apiRef
    ]);
    const strategyProcessingApi = {
        registerStrategyProcessor,
        applyStrategyProcessor,
        getActiveStrategy,
        setStrategyAvailability
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, strategyProcessingApi, 'private');
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/useGridLocaleText.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridLocaleText": (()=>useGridLocaleText)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
const useGridLocaleText = (apiRef, props)=>{
    const getLocaleText = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridLocaleText.useCallback[getLocaleText]": (key)=>{
            if (props.localeText[key] == null) {
                throw new Error(`Missing translation for key ${key}.`);
            }
            return props.localeText[key];
        }
    }["useGridLocaleText.useCallback[getLocaleText]"], [
        props.localeText
    ]);
    apiRef.current.register('public', {
        getLocaleText
    });
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/useGridInitialization.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridInitialization": (()=>useGridInitialization)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridApiInitialization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridRefs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/useGridRefs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridIsRtl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/useGridIsRtl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridLoggerFactory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridStateInitialization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridPipeProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridLocaleText$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/useGridLocaleText.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
const useGridInitialization = (inputApiRef, props)=>{
    const privateApiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridApiInitialization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiInitialization"])(inputApiRef, props);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridRefs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRefs"])(privateApiRef);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridIsRtl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridIsRtl"])(privateApiRef);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridLoggerFactory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLoggerFactory"])(privateApiRef, props);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridStateInitialization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridStateInitialization"])(privateApiRef);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridPipeProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridPipeProcessing"])(privateApiRef);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridStrategyProcessing"])(privateApiRef);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$useGridLocaleText$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLocaleText"])(privateApiRef, props);
    privateApiRef.current.register('private', {
        rootProps: props
    });
    return privateApiRef;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useFirstRender": (()=>useFirstRender)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
const useFirstRender = (callback)=>{
    const isFirstRender = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    if (isFirstRender.current) {
        isFirstRender.current = false;
        callback();
    }
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRegisterPipeProcessor": (()=>useGridRegisterPipeProcessor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js [app-client] (ecmascript)");
;
;
const useGridRegisterPipeProcessor = (apiRef, group, callback)=>{
    const cleanup = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
    const registerPreProcessor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRegisterPipeProcessor.useCallback[registerPreProcessor]": ()=>{
            cleanup.current = apiRef.current.registerPipeProcessor(group, id.current, callback);
        }
    }["useGridRegisterPipeProcessor.useCallback[registerPreProcessor]"], [
        apiRef,
        callback,
        group
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useFirstRender"])({
        "useGridRegisterPipeProcessor.useFirstRender": ()=>{
            registerPreProcessor();
        }
    }["useGridRegisterPipeProcessor.useFirstRender"]);
    const isFirstRender = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRegisterPipeProcessor.useEffect": ()=>{
            if (isFirstRender.current) {
                isFirstRender.current = false;
            } else {
                registerPreProcessor();
            }
            return ({
                "useGridRegisterPipeProcessor.useEffect": ()=>{
                    if (cleanup.current) {
                        cleanup.current();
                        cleanup.current = null;
                    }
                }
            })["useGridRegisterPipeProcessor.useEffect"];
        }
    }["useGridRegisterPipeProcessor.useEffect"], [
        registerPreProcessor
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelectionPreProcessors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRowSelectionPreProcessors": (()=>useGridRowSelectionPreProcessors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$composeClasses$2f$composeClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/composeClasses/composeClasses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/constants/gridClasses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
;
;
;
;
;
;
const useUtilityClasses = (ownerState)=>{
    const { classes } = ownerState;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useUtilityClasses.useMemo": ()=>{
            const slots = {
                cellCheckbox: [
                    'cellCheckbox'
                ],
                columnHeaderCheckbox: [
                    'columnHeaderCheckbox'
                ]
            };
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$composeClasses$2f$composeClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(slots, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDataGridUtilityClass"], classes);
        }
    }["useUtilityClasses.useMemo"], [
        classes
    ]);
};
const useGridRowSelectionPreProcessors = (apiRef, props)=>{
    const ownerState = {
        classes: props.classes
    };
    const classes = useUtilityClasses(ownerState);
    const updateSelectionColumn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelectionPreProcessors.useCallback[updateSelectionColumn]": (columnsState)=>{
            const selectionColumn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_COL_DEF"], {
                cellClassName: classes.cellCheckbox,
                headerClassName: classes.columnHeaderCheckbox,
                headerName: apiRef.current.getLocaleText('checkboxSelectionHeaderName')
            });
            const shouldHaveSelectionColumn = props.checkboxSelection;
            const haveSelectionColumn = columnsState.lookup[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_FIELD"]] != null;
            if (shouldHaveSelectionColumn && !haveSelectionColumn) {
                columnsState.lookup[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_FIELD"]] = selectionColumn;
                columnsState.orderedFields = [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_FIELD"],
                    ...columnsState.orderedFields
                ];
            } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {
                delete columnsState.lookup[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_FIELD"]];
                columnsState.orderedFields = columnsState.orderedFields.filter({
                    "useGridRowSelectionPreProcessors.useCallback[updateSelectionColumn]": (field)=>field !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_FIELD"]
                }["useGridRowSelectionPreProcessors.useCallback[updateSelectionColumn]"]);
            } else if (shouldHaveSelectionColumn && haveSelectionColumn) {
                columnsState.lookup[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_FIELD"]] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, selectionColumn, columnsState.lookup[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_FIELD"]]);
            }
            return columnsState;
        }
    }["useGridRowSelectionPreProcessors.useCallback[updateSelectionColumn]"], [
        apiRef,
        classes,
        props.checkboxSelection
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'hydrateColumns', updateSelectionColumn);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRegisterStrategyProcessor": (()=>useGridRegisterStrategyProcessor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js [app-client] (ecmascript)");
;
;
const useGridRegisterStrategyProcessor = (apiRef, strategyName, group, processor)=>{
    const registerPreProcessor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRegisterStrategyProcessor.useCallback[registerPreProcessor]": ()=>{
            apiRef.current.registerStrategyProcessor(strategyName, group, processor);
        }
    }["useGridRegisterStrategyProcessor.useCallback[registerPreProcessor]"], [
        apiRef,
        processor,
        group,
        strategyName
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useFirstRender"])({
        "useGridRegisterStrategyProcessor.useFirstRender": ()=>{
            registerPreProcessor();
        }
    }["useGridRegisterStrategyProcessor.useFirstRender"]);
    const isFirstRender = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRegisterStrategyProcessor.useEffect": ()=>{
            if (isFirstRender.current) {
                isFirstRender.current = false;
            } else {
                registerPreProcessor();
            }
        }
    }["useGridRegisterStrategyProcessor.useEffect"], [
        registerPreProcessor
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRowsPreProcessors": (()=>useGridRowsPreProcessors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridRegisterStrategyProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js [app-client] (ecmascript)");
;
;
;
const createFlatRowTree = (rows)=>{
    const tree = {
        [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildRootGroup"])(), {
            children: rows
        })
    };
    for(let i = 0; i < rows.length; i += 1){
        const rowId = rows[i];
        tree[rowId] = {
            id: rowId,
            depth: 0,
            parent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"],
            type: 'leaf',
            groupingKey: null
        };
    }
    return {
        groupingName: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DEFAULT_STRATEGY"],
        tree,
        treeDepths: {
            0: rows.length
        },
        dataRowIds: rows
    };
};
const updateFlatRowTree = ({ previousTree, actions })=>{
    const tree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, previousTree);
    const idsToRemoveFromRootGroup = {};
    for(let i = 0; i < actions.remove.length; i += 1){
        const idToDelete = actions.remove[i];
        idsToRemoveFromRootGroup[idToDelete] = true;
        delete tree[idToDelete];
    }
    for(let i = 0; i < actions.insert.length; i += 1){
        const idToInsert = actions.insert[i];
        tree[idToInsert] = {
            id: idToInsert,
            depth: 0,
            parent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"],
            type: 'leaf',
            groupingKey: null
        };
    }
    // TODO rows v6: Support row unpinning
    const rootGroup = tree[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]];
    let rootGroupChildren = [
        ...rootGroup.children,
        ...actions.insert
    ];
    if (Object.values(idsToRemoveFromRootGroup).length) {
        rootGroupChildren = rootGroupChildren.filter((id)=>!idsToRemoveFromRootGroup[id]);
    }
    tree[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, rootGroup, {
        children: rootGroupChildren
    });
    return {
        groupingName: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DEFAULT_STRATEGY"],
        tree,
        treeDepths: {
            0: rootGroupChildren.length
        },
        dataRowIds: rootGroupChildren
    };
};
const flatRowTreeCreationMethod = (params)=>{
    if (params.updates.type === 'full') {
        return createFlatRowTree(params.updates.rows);
    }
    return updateFlatRowTree({
        previousTree: params.previousTree,
        actions: params.updates.actions
    });
};
const useGridRowsPreProcessors = (apiRef)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridRegisterStrategyProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterStrategyProcessor"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DEFAULT_STRATEGY"], 'rowTreeCreation', flatRowTreeCreationMethod);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridInitializeState.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridInitializeState": (()=>useGridInitializeState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
const useGridInitializeState = (initializer, privateApiRef, props)=>{
    const isInitialized = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(false);
    if (!isInitialized.current) {
        privateApiRef.current.state = initializer(privateApiRef.current.state, props, privateApiRef);
        isInitialized.current = true;
    }
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridLogger": (()=>useGridLogger)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
function useGridLogger(privateApiRef, name) {
    const logger = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    if (logger.current) {
        return logger.current;
    }
    const newLogger = privateApiRef.current.getLogger(name);
    logger.current = newLogger;
    return newLogger;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "dimensionsStateInitializer": (()=>dimensionsStateInitializer),
    "useGridDimensions": (()=>useGridDimensions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$dataGridPropsDefaultValues$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/constants/dataGridPropsDefaultValues.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$throttle$2f$throttle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/throttle/throttle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js [app-client] (ecmascript) <export default as unstable_useEventCallback>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerWindow$2f$ownerWindow$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerWindow$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js [app-client] (ecmascript) <export default as unstable_ownerWindow>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js [app-client] (ecmascript) <export default as unstable_useEnhancedEffect>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js [app-client] (ecmascript) <export default as unstable_ownerDocument>");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const EMPTY_SIZE = {
    width: 0,
    height: 0
};
const EMPTY_DIMENSIONS = {
    isReady: false,
    root: EMPTY_SIZE,
    viewportOuterSize: EMPTY_SIZE,
    viewportInnerSize: EMPTY_SIZE,
    contentSize: EMPTY_SIZE,
    minimumSize: EMPTY_SIZE,
    hasScrollX: false,
    hasScrollY: false,
    scrollbarSize: 0,
    headerHeight: 0,
    groupHeaderHeight: 0,
    headerFilterHeight: 0,
    rowWidth: 0,
    rowHeight: 0,
    columnsTotalWidth: 0,
    leftPinnedWidth: 0,
    rightPinnedWidth: 0,
    headersTotalHeight: 0,
    topContainerHeight: 0,
    bottomContainerHeight: 0
};
const dimensionsStateInitializer = (state)=>{
    const dimensions = EMPTY_DIMENSIONS;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        dimensions
    });
};
function useGridDimensions(apiRef, props) {
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useResizeContainer');
    const errorShown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(false);
    const rootDimensionsRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(EMPTY_SIZE);
    const dimensionsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"]);
    const rowsMeta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsMetaSelector"]);
    const pinnedColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisiblePinnedColumnDefinitionsSelector"]);
    const densityFactor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDensityFactorSelector"]);
    const validRowHeight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridDimensions.useMemo[validRowHeight]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValidRowHeight"])(props.rowHeight, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$dataGridPropsDefaultValues$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DATA_GRID_PROPS_DEFAULT_VALUES"].rowHeight, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rowHeightWarning"])
    }["useGridDimensions.useMemo[validRowHeight]"], [
        props.rowHeight
    ]);
    const rowHeight = Math.floor(validRowHeight * densityFactor);
    const headerHeight = Math.floor(props.columnHeaderHeight * densityFactor);
    const groupHeaderHeight = Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * densityFactor);
    const headerFilterHeight = Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * densityFactor);
    const columnsTotalWidth = roundToDecimalPlaces((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnsTotalWidthSelector"])(apiRef), 6);
    const headersTotalHeight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTotalHeaderHeight"])(apiRef, props);
    const leftPinnedWidth = pinnedColumns.left.reduce((w, col)=>w + col.computedWidth, 0);
    const rightPinnedWidth = pinnedColumns.right.reduce((w, col)=>w + col.computedWidth, 0);
    const [savedSize, setSavedSize] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState();
    const debouncedSetSavedSize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridDimensions.useMemo[debouncedSetSavedSize]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$throttle$2f$throttle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["throttle"])(setSavedSize, props.resizeThrottleMs)
    }["useGridDimensions.useMemo[debouncedSetSavedSize]"], [
        props.resizeThrottleMs
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridDimensions.useEffect": ()=>debouncedSetSavedSize.clear
    }["useGridDimensions.useEffect"], [
        debouncedSetSavedSize
    ]);
    const previousSize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const getRootDimensions = ()=>apiRef.current.state.dimensions;
    const setDimensions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridDimensions.useEventCallback[setDimensions]": (dimensions)=>{
            apiRef.current.setState({
                "useGridDimensions.useEventCallback[setDimensions]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        dimensions
                    })
            }["useGridDimensions.useEventCallback[setDimensions]"]);
        }
    }["useGridDimensions.useEventCallback[setDimensions]"]);
    const resize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridDimensions.useCallback[resize]": ()=>{
            const element = apiRef.current.mainElementRef.current;
            if (!element) {
                return;
            }
            const computedStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerWindow$2f$ownerWindow$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerWindow$3e$__["unstable_ownerWindow"])(element).getComputedStyle(element);
            const newSize = {
                width: parseFloat(computedStyle.width) || 0,
                height: parseFloat(computedStyle.height) || 0
            };
            if (!previousSize.current || !areElementSizesEqual(previousSize.current, newSize)) {
                apiRef.current.publishEvent('resize', newSize);
                previousSize.current = newSize;
            }
        }
    }["useGridDimensions.useCallback[resize]"], [
        apiRef
    ]);
    const getViewportPageSize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridDimensions.useCallback[getViewportPageSize]": ()=>{
            const dimensions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"])(apiRef.current.state);
            if (!dimensions.isReady) {
                return 0;
            }
            const currentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getVisibleRows"])(apiRef, {
                pagination: props.pagination,
                paginationMode: props.paginationMode
            });
            // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions
            // to find out the maximum number of rows that can fit in the visible part of the grid
            if (props.getRowHeight) {
                const renderContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRenderContextSelector"])(apiRef);
                const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;
                return Math.min(viewportPageSize - 1, currentPage.rows.length);
            }
            const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);
            return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);
        }
    }["useGridDimensions.useCallback[getViewportPageSize]"], [
        apiRef,
        props.pagination,
        props.paginationMode,
        props.getRowHeight,
        rowHeight
    ]);
    const updateDimensions = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridDimensions.useCallback[updateDimensions]": ()=>{
            const rootElement = apiRef.current.rootElementRef.current;
            const pinnedRowsHeight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["calculatePinnedRowsHeight"])(apiRef);
            const scrollbarSize = measureScrollbarSize(rootElement, columnsTotalWidth, props.scrollbarSize);
            const topContainerHeight = headersTotalHeight + pinnedRowsHeight.top;
            const bottomContainerHeight = pinnedRowsHeight.bottom;
            const nonPinnedColumnsTotalWidth = columnsTotalWidth - leftPinnedWidth - rightPinnedWidth;
            const contentSize = {
                width: nonPinnedColumnsTotalWidth,
                height: rowsMeta.currentPageTotalHeight
            };
            let viewportOuterSize;
            let viewportInnerSize;
            let hasScrollX = false;
            let hasScrollY = false;
            if (props.autoHeight) {
                hasScrollY = false;
                hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);
                viewportOuterSize = {
                    width: rootDimensionsRef.current.width,
                    height: topContainerHeight + bottomContainerHeight + contentSize.height
                };
                viewportInnerSize = {
                    width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),
                    height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))
                };
            } else {
                viewportOuterSize = {
                    width: rootDimensionsRef.current.width,
                    height: rootDimensionsRef.current.height
                };
                viewportInnerSize = {
                    width: Math.max(0, viewportOuterSize.width - leftPinnedWidth - rightPinnedWidth),
                    height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)
                };
                const content = contentSize;
                const container = viewportInnerSize;
                const hasScrollXIfNoYScrollBar = content.width > container.width;
                const hasScrollYIfNoXScrollBar = content.height > container.height;
                if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {
                    hasScrollY = hasScrollYIfNoXScrollBar;
                    hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;
                    // We recalculate the scroll y to consider the size of the x scrollbar.
                    if (hasScrollX) {
                        hasScrollY = content.height + scrollbarSize > container.height;
                    }
                }
                if (hasScrollY) {
                    viewportInnerSize.width -= scrollbarSize;
                }
                if (hasScrollX) {
                    viewportInnerSize.height -= scrollbarSize;
                }
            }
            const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));
            const minimumSize = {
                width: columnsTotalWidth,
                height: topContainerHeight + contentSize.height + bottomContainerHeight
            };
            const newDimensions = {
                isReady: true,
                root: rootDimensionsRef.current,
                viewportOuterSize,
                viewportInnerSize,
                contentSize,
                minimumSize,
                hasScrollX,
                hasScrollY,
                scrollbarSize,
                headerHeight,
                groupHeaderHeight,
                headerFilterHeight,
                rowWidth,
                rowHeight,
                columnsTotalWidth,
                leftPinnedWidth,
                rightPinnedWidth,
                headersTotalHeight,
                topContainerHeight,
                bottomContainerHeight
            };
            const prevDimensions = apiRef.current.state.dimensions;
            setDimensions(newDimensions);
            if (!areElementSizesEqual(newDimensions.viewportInnerSize, prevDimensions.viewportInnerSize)) {
                apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);
            }
            apiRef.current.updateRenderContext?.();
        }
    }["useGridDimensions.useCallback[updateDimensions]"], [
        apiRef,
        setDimensions,
        props.scrollbarSize,
        props.autoHeight,
        rowsMeta.currentPageTotalHeight,
        rowHeight,
        headerHeight,
        groupHeaderHeight,
        headerFilterHeight,
        columnsTotalWidth,
        headersTotalHeight,
        leftPinnedWidth,
        rightPinnedWidth
    ]);
    const apiPublic = {
        resize,
        getRootDimensions
    };
    const apiPrivate = {
        updateDimensions,
        getViewportPageSize
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, apiPublic, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, apiPrivate, 'private');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useGridDimensions.useEnhancedEffect": ()=>{
            if (savedSize) {
                updateDimensions();
                apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);
            }
        }
    }["useGridDimensions.useEnhancedEffect"], [
        apiRef,
        savedSize,
        updateDimensions
    ]);
    const root = apiRef.current.rootElementRef.current;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useGridDimensions.useEnhancedEffect": ()=>{
            if (!root) {
                return;
            }
            const set = {
                "useGridDimensions.useEnhancedEffect.set": (k, v)=>root.style.setProperty(k, v)
            }["useGridDimensions.useEnhancedEffect.set"];
            set('--DataGrid-width', `${dimensionsState.viewportOuterSize.width}px`);
            set('--DataGrid-hasScrollX', `${Number(dimensionsState.hasScrollX)}`);
            set('--DataGrid-hasScrollY', `${Number(dimensionsState.hasScrollY)}`);
            set('--DataGrid-scrollbarSize', `${dimensionsState.scrollbarSize}px`);
            set('--DataGrid-rowWidth', `${dimensionsState.rowWidth}px`);
            set('--DataGrid-columnsTotalWidth', `${dimensionsState.columnsTotalWidth}px`);
            set('--DataGrid-leftPinnedWidth', `${dimensionsState.leftPinnedWidth}px`);
            set('--DataGrid-rightPinnedWidth', `${dimensionsState.rightPinnedWidth}px`);
            set('--DataGrid-headerHeight', `${dimensionsState.headerHeight}px`);
            set('--DataGrid-headersTotalHeight', `${dimensionsState.headersTotalHeight}px`);
            set('--DataGrid-topContainerHeight', `${dimensionsState.topContainerHeight}px`);
            set('--DataGrid-bottomContainerHeight', `${dimensionsState.bottomContainerHeight}px`);
            set('--height', `${dimensionsState.rowHeight}px`);
        }
    }["useGridDimensions.useEnhancedEffect"], [
        root,
        dimensionsState
    ]);
    const isFirstSizing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    const handleResize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridDimensions.useCallback[handleResize]": (size)=>{
            rootDimensionsRef.current = size;
            // jsdom has no layout capabilities
            const isJSDOM = /jsdom|HappyDOM/.test(window.navigator.userAgent);
            if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {
                logger.error([
                    'The parent DOM element of the Data Grid has an empty height.',
                    'Please make sure that this element has an intrinsic height.',
                    'The grid displays with a height of 0px.',
                    '',
                    'More details: https://mui.com/r/x-data-grid-no-dimensions.'
                ].join('\n'));
                errorShown.current = true;
            }
            if (size.width === 0 && !errorShown.current && !isJSDOM) {
                logger.error([
                    'The parent DOM element of the Data Grid has an empty width.',
                    'Please make sure that this element has an intrinsic width.',
                    'The grid displays with a width of 0px.',
                    '',
                    'More details: https://mui.com/r/x-data-grid-no-dimensions.'
                ].join('\n'));
                errorShown.current = true;
            }
            if (isFirstSizing.current) {
                // We want to initialize the grid dimensions as soon as possible to avoid flickering
                setSavedSize(size);
                isFirstSizing.current = false;
                return;
            }
            debouncedSetSavedSize(size);
        }
    }["useGridDimensions.useCallback[handleResize]"], [
        props.autoHeight,
        debouncedSetSavedSize,
        logger
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])(updateDimensions, [
        updateDimensions
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'sortedRowsSet', updateDimensions);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'paginationModelChange', updateDimensions);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnsChange', updateDimensions);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'resize', handleResize);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'debouncedResize', props.onResize);
}
function measureScrollbarSize(rootElement, columnsTotalWidth, scrollbarSize) {
    if (scrollbarSize !== undefined) {
        return scrollbarSize;
    }
    if (rootElement === null || columnsTotalWidth === 0) {
        return 0;
    }
    const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__["unstable_ownerDocument"])(rootElement);
    const scrollDiv = doc.createElement('div');
    scrollDiv.style.width = '99px';
    scrollDiv.style.height = '99px';
    scrollDiv.style.position = 'absolute';
    scrollDiv.style.overflow = 'scroll';
    scrollDiv.className = 'scrollDiv';
    rootElement.appendChild(scrollDiv);
    const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    rootElement.removeChild(scrollDiv);
    return size;
}
// Get rid of floating point imprecision errors
// https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477
function roundToDecimalPlaces(value, decimals) {
    return Math.round(value * 10 ** decimals) / 10 ** decimals;
}
function areElementSizesEqual(a, b) {
    return a.width === b.width && a.height === b.height;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "rowSelectionStateInitializer": (()=>rowSelectionStateInitializer),
    "useGridRowSelection": (()=>useGridRowSelection)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rowSelection/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/keyboardUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/constants/gridClasses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/internals/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridActionsColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridActionsColDef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridEditRowModel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/domUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const getSelectionModelPropValue = (selectionModelProp, prevSelectionModel)=>{
    if (selectionModelProp == null) {
        return selectionModelProp;
    }
    if (Array.isArray(selectionModelProp)) {
        return selectionModelProp;
    }
    if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {
        return prevSelectionModel;
    }
    return [
        selectionModelProp
    ];
};
const rowSelectionStateInitializer = (state, props)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        rowSelection: props.rowSelection ? getSelectionModelPropValue(props.rowSelectionModel) ?? [] : []
    });
const useGridRowSelection = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridSelection');
    const runIfRowSelectionIsEnabled = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[runIfRowSelectionIsEnabled]": (callback)=>({
                "useGridRowSelection.useCallback[runIfRowSelectionIsEnabled]": (...args)=>{
                    if (props.rowSelection) {
                        callback(...args);
                    }
                }
            })["useGridRowSelection.useCallback[runIfRowSelectionIsEnabled]"]
    }["useGridRowSelection.useCallback[runIfRowSelectionIsEnabled]"], [
        props.rowSelection
    ]);
    const applyAutoSelection = props.signature !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid && (props.rowSelectionPropagation?.parents || props.rowSelectionPropagation?.descendants);
    const propRowSelectionModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridRowSelection.useMemo[propRowSelectionModel]": ()=>{
            return getSelectionModelPropValue(props.rowSelectionModel, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSelectionStateSelector"])(apiRef.current.state));
        }
    }["useGridRowSelection.useMemo[propRowSelectionModel]"], [
        apiRef,
        props.rowSelectionModel
    ]);
    const lastRowToggled = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    apiRef.current.registerControlState({
        stateId: 'rowSelection',
        propModel: propRowSelectionModel,
        propOnChange: props.onRowSelectionModelChange,
        stateSelector: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSelectionStateSelector"],
        changeEvent: 'rowSelectionChange'
    });
    const { checkboxSelection, disableRowSelectionOnClick, isRowSelectable: propIsRowSelectable } = props;
    const canHaveMultipleSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMultipleRowSelectionEnabled"])(props);
    const visibleRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridVisibleRows"])(apiRef, props);
    const tree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"]);
    const isNestedData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowMaximumTreeDepthSelector"]) > 1;
    const expandMouseRowRangeSelection = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[expandMouseRowRangeSelection]": (id)=>{
            let endId = id;
            const startId = lastRowToggled.current ?? id;
            const isSelected = apiRef.current.isRowSelected(id);
            if (isSelected) {
                const visibleRowIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowIdsSelector"])(apiRef);
                const startIndex = visibleRowIds.findIndex({
                    "useGridRowSelection.useCallback[expandMouseRowRangeSelection].startIndex": (rowId)=>rowId === startId
                }["useGridRowSelection.useCallback[expandMouseRowRangeSelection].startIndex"]);
                const endIndex = visibleRowIds.findIndex({
                    "useGridRowSelection.useCallback[expandMouseRowRangeSelection].endIndex": (rowId)=>rowId === endId
                }["useGridRowSelection.useCallback[expandMouseRowRangeSelection].endIndex"]);
                if (startIndex === endIndex) {
                    return;
                }
                if (startIndex > endIndex) {
                    endId = visibleRowIds[endIndex + 1];
                } else {
                    endId = visibleRowIds[endIndex - 1];
                }
            }
            lastRowToggled.current = id;
            apiRef.current.selectRowRange({
                startId,
                endId
            }, !isSelected);
        }
    }["useGridRowSelection.useCallback[expandMouseRowRangeSelection]"], [
        apiRef
    ]);
    /*
   * API METHODS
   */ const setRowSelectionModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[setRowSelectionModel]": (model)=>{
            if (props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {
                throw new Error([
                    'MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.',
                    'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'
                ].join('\n'));
            }
            const currentModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSelectionStateSelector"])(apiRef.current.state);
            if (currentModel !== model) {
                logger.debug(`Setting selection model`);
                apiRef.current.setState({
                    "useGridRowSelection.useCallback[setRowSelectionModel]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            rowSelection: props.rowSelection ? model : []
                        })
                }["useGridRowSelection.useCallback[setRowSelectionModel]"]);
                apiRef.current.forceUpdate();
            }
        }
    }["useGridRowSelection.useCallback[setRowSelectionModel]"], [
        apiRef,
        logger,
        props.rowSelection,
        props.signature,
        canHaveMultipleSelection
    ]);
    const isRowSelected = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[isRowSelected]": (id)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSelectionStateSelector"])(apiRef.current.state).includes(id)
    }["useGridRowSelection.useCallback[isRowSelected]"], [
        apiRef
    ]);
    const isRowSelectable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[isRowSelectable]": (id)=>{
            if (props.rowSelection === false) {
                return false;
            }
            if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {
                return false;
            }
            const rowNode = apiRef.current.getRowNode(id);
            if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {
                return false;
            }
            return true;
        }
    }["useGridRowSelection.useCallback[isRowSelectable]"], [
        apiRef,
        props.rowSelection,
        propIsRowSelectable
    ]);
    const getSelectedRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[getSelectedRows]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedGridRowsSelector"])(apiRef)
    }["useGridRowSelection.useCallback[getSelectedRows]"], [
        apiRef
    ]);
    const selectRow = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[selectRow]": (id, isSelected = true, resetSelection = false)=>{
            if (!apiRef.current.isRowSelectable(id)) {
                return;
            }
            lastRowToggled.current = id;
            if (resetSelection) {
                logger.debug(`Setting selection for row ${id}`);
                const newSelection = [];
                const addRow = {
                    "useGridRowSelection.useCallback[selectRow].addRow": (rowId)=>{
                        newSelection.push(rowId);
                    }
                }["useGridRowSelection.useCallback[selectRow].addRow"];
                if (isSelected) {
                    addRow(id);
                    if (applyAutoSelection) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findRowsToSelect"])(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);
                    }
                }
                apiRef.current.setRowSelectionModel(newSelection);
            } else {
                logger.debug(`Toggling selection for row ${id}`);
                const selection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSelectionStateSelector"])(apiRef.current.state);
                const newSelection = new Set(selection);
                newSelection.delete(id);
                const addRow = {
                    "useGridRowSelection.useCallback[selectRow].addRow": (rowId)=>{
                        newSelection.add(rowId);
                    }
                }["useGridRowSelection.useCallback[selectRow].addRow"];
                const removeRow = {
                    "useGridRowSelection.useCallback[selectRow].removeRow": (rowId)=>{
                        newSelection.delete(rowId);
                    }
                }["useGridRowSelection.useCallback[selectRow].removeRow"];
                if (isSelected) {
                    addRow(id);
                    if (applyAutoSelection) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findRowsToSelect"])(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);
                    }
                } else if (applyAutoSelection) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findRowsToDeselect"])(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);
                }
                const isSelectionValid = newSelection.size < 2 || canHaveMultipleSelection;
                if (isSelectionValid) {
                    apiRef.current.setRowSelectionModel(Array.from(newSelection));
                }
            }
        }
    }["useGridRowSelection.useCallback[selectRow]"], [
        apiRef,
        logger,
        applyAutoSelection,
        tree,
        props.rowSelectionPropagation?.descendants,
        props.rowSelectionPropagation?.parents,
        canHaveMultipleSelection
    ]);
    const selectRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[selectRows]": (ids, isSelected = true, resetSelection = false)=>{
            logger.debug(`Setting selection for several rows`);
            const selectableIds = ids.filter({
                "useGridRowSelection.useCallback[selectRows].selectableIds": (id)=>apiRef.current.isRowSelectable(id)
            }["useGridRowSelection.useCallback[selectRows].selectableIds"]);
            let newSelection;
            if (resetSelection) {
                if (isSelected) {
                    newSelection = new Set(selectableIds);
                    if (applyAutoSelection) {
                        const addRow = {
                            "useGridRowSelection.useCallback[selectRows].addRow": (rowId)=>{
                                newSelection.add(rowId);
                            }
                        }["useGridRowSelection.useCallback[selectRows].addRow"];
                        selectableIds.forEach({
                            "useGridRowSelection.useCallback[selectRows]": (id)=>{
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findRowsToSelect"])(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);
                            }
                        }["useGridRowSelection.useCallback[selectRows]"]);
                    }
                } else {
                    newSelection = new Set();
                }
                const currentLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedIdsLookupSelector"])(apiRef);
                if (newSelection.size === Object.keys(currentLookup).length && Array.from(newSelection).every({
                    "useGridRowSelection.useCallback[selectRows]": (id)=>currentLookup[id] === id
                }["useGridRowSelection.useCallback[selectRows]"])) {
                    return;
                }
            } else {
                newSelection = new Set(Object.values((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedIdsLookupSelector"])(apiRef)));
                const addRow = {
                    "useGridRowSelection.useCallback[selectRows].addRow": (rowId)=>{
                        newSelection.add(rowId);
                    }
                }["useGridRowSelection.useCallback[selectRows].addRow"];
                const removeRow = {
                    "useGridRowSelection.useCallback[selectRows].removeRow": (rowId)=>{
                        newSelection.delete(rowId);
                    }
                }["useGridRowSelection.useCallback[selectRows].removeRow"];
                selectableIds.forEach({
                    "useGridRowSelection.useCallback[selectRows]": (id)=>{
                        if (isSelected) {
                            newSelection.add(id);
                            if (applyAutoSelection) {
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findRowsToSelect"])(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);
                            }
                        } else {
                            removeRow(id);
                            if (applyAutoSelection) {
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findRowsToDeselect"])(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);
                            }
                        }
                    }
                }["useGridRowSelection.useCallback[selectRows]"]);
            }
            const isSelectionValid = newSelection.size < 2 || canHaveMultipleSelection;
            if (isSelectionValid) {
                apiRef.current.setRowSelectionModel(Array.from(newSelection));
            }
        }
    }["useGridRowSelection.useCallback[selectRows]"], [
        logger,
        applyAutoSelection,
        canHaveMultipleSelection,
        apiRef,
        tree,
        props.rowSelectionPropagation?.descendants,
        props.rowSelectionPropagation?.parents
    ]);
    const selectRowRange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[selectRowRange]": ({ startId, endId }, isSelected = true, resetSelection = false)=>{
            if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {
                return;
            }
            logger.debug(`Expanding selection from row ${startId} to row ${endId}`);
            // Using rows from all pages allow to select a range across several pages
            const allPagesRowIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowIdsSelector"])(apiRef);
            const startIndex = allPagesRowIds.indexOf(startId);
            const endIndex = allPagesRowIds.indexOf(endId);
            const [start, end] = startIndex > endIndex ? [
                endIndex,
                startIndex
            ] : [
                startIndex,
                endIndex
            ];
            const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);
            apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);
        }
    }["useGridRowSelection.useCallback[selectRowRange]"], [
        apiRef,
        logger
    ]);
    const selectionPublicApi = {
        selectRow,
        setRowSelectionModel,
        getSelectedRows,
        isRowSelected,
        isRowSelectable
    };
    const selectionPrivateApi = {
        selectRows,
        selectRowRange
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, selectionPublicApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, selectionPrivateApi, props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid ? 'private' : 'public');
    /*
   * EVENTS
   */ const removeOutdatedSelection = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[removeOutdatedSelection]": (sortModelUpdated = false)=>{
            const currentSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSelectionStateSelector"])(apiRef.current.state);
            const rowsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLookupSelector"])(apiRef);
            const filteredRowsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredRowsLookupSelector"])(apiRef);
            // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project
            const selectionLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["selectedIdsLookupSelector"])(apiRef));
            const isNonExistent = {
                "useGridRowSelection.useCallback[removeOutdatedSelection].isNonExistent": (id)=>{
                    if (props.filterMode === 'server') {
                        return !rowsLookup[id];
                    }
                    return filteredRowsLookup[id] !== true;
                }
            }["useGridRowSelection.useCallback[removeOutdatedSelection].isNonExistent"];
            let hasChanged = false;
            currentSelection.forEach({
                "useGridRowSelection.useCallback[removeOutdatedSelection]": (id)=>{
                    if (isNonExistent(id)) {
                        if (props.keepNonExistentRowsSelected) {
                            return;
                        }
                        delete selectionLookup[id];
                        hasChanged = true;
                        return;
                    }
                    if (!props.rowSelectionPropagation?.parents) {
                        return;
                    }
                    const node = tree[id];
                    if (node.type === 'group') {
                        const isAutoGenerated = node.isAutoGenerated;
                        if (isAutoGenerated) {
                            delete selectionLookup[id];
                            hasChanged = true;
                            return;
                        }
                        // Keep previously selected tree data parents selected if all their children are filtered out
                        if (!node.children.every({
                            "useGridRowSelection.useCallback[removeOutdatedSelection]": (childId)=>filteredRowsLookup[childId] === false
                        }["useGridRowSelection.useCallback[removeOutdatedSelection]"])) {
                            delete selectionLookup[id];
                            hasChanged = true;
                        }
                    }
                }
            }["useGridRowSelection.useCallback[removeOutdatedSelection]"]);
            // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is
            // not empty, we need to re-run scanning of the tree to propagate the selection changes
            // Example: A parent whose de-selected children are filtered out should now be selected
            const shouldReapplyPropagation = isNestedData && props.rowSelectionPropagation?.parents && Object.keys(selectionLookup).length > 0;
            if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {
                const newSelection = Object.values(selectionLookup);
                if (shouldReapplyPropagation) {
                    apiRef.current.selectRows(newSelection, true, true);
                } else {
                    apiRef.current.setRowSelectionModel(newSelection);
                }
            }
        }
    }["useGridRowSelection.useCallback[removeOutdatedSelection]"], [
        apiRef,
        isNestedData,
        props.rowSelectionPropagation?.parents,
        props.keepNonExistentRowsSelected,
        props.filterMode,
        tree
    ]);
    const handleSingleRowSelection = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[handleSingleRowSelection]": (id, event)=>{
            const hasCtrlKey = event.metaKey || event.ctrlKey;
            // multiple selection is only allowed if:
            // - it is a checkboxSelection
            // - it is a keyboard selection
            // - Ctrl is pressed
            const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isKeyboardEvent"])(event);
            const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;
            const isSelected = apiRef.current.isRowSelected(id);
            if (resetSelection) {
                apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);
            } else {
                apiRef.current.selectRow(id, !isSelected, false);
            }
        }
    }["useGridRowSelection.useCallback[handleSingleRowSelection]"], [
        apiRef,
        canHaveMultipleSelection,
        checkboxSelection
    ]);
    const handleRowClick = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[handleRowClick]": (params, event)=>{
            if (disableRowSelectionOnClick) {
                return;
            }
            const field = event.target.closest(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].cell}`)?.getAttribute('data-field');
            if (field === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_COL_DEF"].field) {
                // click on checkbox should not trigger row selection
                return;
            }
            if (field === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DETAIL_PANEL_TOGGLE_FIELD"]) {
                // click to open the detail panel should not select the row
                return;
            }
            if (field) {
                const column = apiRef.current.getColumn(field);
                if (column?.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridActionsColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ACTIONS_COLUMN_TYPE"]) {
                    return;
                }
            }
            const rowNode = apiRef.current.getRowNode(params.id);
            if (rowNode.type === 'pinnedRow') {
                return;
            }
            if (event.shiftKey && canHaveMultipleSelection) {
                expandMouseRowRangeSelection(params.id);
            } else {
                handleSingleRowSelection(params.id, event);
            }
        }
    }["useGridRowSelection.useCallback[handleRowClick]"], [
        disableRowSelectionOnClick,
        canHaveMultipleSelection,
        apiRef,
        expandMouseRowRangeSelection,
        handleSingleRowSelection
    ]);
    const preventSelectionOnShift = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[preventSelectionOnShift]": (params, event)=>{
            if (canHaveMultipleSelection && event.shiftKey) {
                window.getSelection()?.removeAllRanges();
            }
        }
    }["useGridRowSelection.useCallback[preventSelectionOnShift]"], [
        canHaveMultipleSelection
    ]);
    const handleRowSelectionCheckboxChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[handleRowSelectionCheckboxChange]": (params, event)=>{
            if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {
                expandMouseRowRangeSelection(params.id);
            } else {
                apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);
            }
        }
    }["useGridRowSelection.useCallback[handleRowSelectionCheckboxChange]"], [
        apiRef,
        expandMouseRowRangeSelection,
        canHaveMultipleSelection
    ]);
    const handleHeaderSelectionCheckboxChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[handleHeaderSelectionCheckboxChange]": (params)=>{
            const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginatedVisibleSortedGridRowIdsSelector"])(apiRef) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowIdsSelector"])(apiRef);
            apiRef.current.selectRows(rowsToBeSelected, params.value);
        }
    }["useGridRowSelection.useCallback[handleHeaderSelectionCheckboxChange]"], [
        apiRef,
        props.checkboxSelectionVisibleOnly,
        props.pagination,
        props.paginationMode
    ]);
    const handleCellKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSelection.useCallback[handleCellKeyDown]": (params, event)=>{
            // Get the most recent cell mode because it may have been changed by another listener
            if (apiRef.current.getCellMode(params.id, params.field) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit) {
                return;
            }
            // Ignore portal
            // Do not apply shortcuts if the focus is not on the cell root component
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEventTargetInPortal"])(event)) {
                return;
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNavigationKey"])(event.key) && event.shiftKey) {
                // The cell that has focus after the keyboard navigation
                const focusCell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
                if (focusCell && focusCell.id !== params.id) {
                    event.preventDefault();
                    const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);
                    if (!canHaveMultipleSelection) {
                        apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);
                        return;
                    }
                    const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);
                    const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);
                    let start;
                    let end;
                    if (newRowIndex > previousRowIndex) {
                        if (isNextRowSelected) {
                            // We are navigating to the bottom of the page and adding selected rows
                            start = previousRowIndex;
                            end = newRowIndex - 1;
                        } else {
                            // We are navigating to the bottom of the page and removing selected rows
                            start = previousRowIndex;
                            end = newRowIndex;
                        }
                    } else {
                        // eslint-disable-next-line no-lonely-if
                        if (isNextRowSelected) {
                            // We are navigating to the top of the page and removing selected rows
                            start = newRowIndex + 1;
                            end = previousRowIndex;
                        } else {
                            // We are navigating to the top of the page and adding selected rows
                            start = newRowIndex;
                            end = previousRowIndex;
                        }
                    }
                    const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map({
                        "useGridRowSelection.useCallback[handleCellKeyDown].rowsBetweenStartAndEnd": (row)=>row.id
                    }["useGridRowSelection.useCallback[handleCellKeyDown].rowsBetweenStartAndEnd"]);
                    apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);
                    return;
                }
            }
            if (event.key === ' ' && event.shiftKey) {
                event.preventDefault();
                handleSingleRowSelection(params.id, event);
                return;
            }
            if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {
                event.preventDefault();
                selectRows(apiRef.current.getAllRowIds(), true);
            }
        }
    }["useGridRowSelection.useCallback[handleCellKeyDown]"], [
        apiRef,
        handleSingleRowSelection,
        selectRows,
        visibleRows.rows,
        canHaveMultipleSelection
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled({
        "useGridRowSelection.useGridApiEventHandler": ()=>removeOutdatedSelection(true)
    }["useGridRowSelection.useGridApiEventHandler"]));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));
    /*
   * EFFECTS
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowSelection.useEffect": ()=>{
            if (propRowSelectionModel !== undefined) {
                apiRef.current.setRowSelectionModel(propRowSelectionModel);
            }
        }
    }["useGridRowSelection.useEffect"], [
        apiRef,
        propRowSelectionModel,
        props.rowSelection
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowSelection.useEffect": ()=>{
            if (!props.rowSelection) {
                apiRef.current.setRowSelectionModel([]);
            }
        }
    }["useGridRowSelection.useEffect"], [
        apiRef,
        props.rowSelection
    ]);
    const isStateControlled = propRowSelectionModel != null;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowSelection.useEffect": ()=>{
            if (isStateControlled || !props.rowSelection) {
                return;
            }
            // props.isRowSelectable changed
            const currentSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSelectionStateSelector"])(apiRef.current.state);
            if (isRowSelectable) {
                const newSelection = currentSelection.filter({
                    "useGridRowSelection.useEffect.newSelection": (id)=>isRowSelectable(id)
                }["useGridRowSelection.useEffect.newSelection"]);
                if (newSelection.length < currentSelection.length) {
                    apiRef.current.setRowSelectionModel(newSelection);
                }
            }
        }
    }["useGridRowSelection.useEffect"], [
        apiRef,
        isRowSelectable,
        isStateControlled,
        props.rowSelection
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowSelection.useEffect": ()=>{
            if (!props.rowSelection || isStateControlled) {
                return;
            }
            const currentSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rowSelection$2f$gridRowSelectionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSelectionStateSelector"])(apiRef.current.state);
            if (!canHaveMultipleSelection && currentSelection.length > 1) {
                // See https://github.com/mui/mui-x/issues/8455
                apiRef.current.setRowSelectionModel([]);
            }
        }
    }["useGridRowSelection.useEffect"], [
        apiRef,
        canHaveMultipleSelection,
        checkboxSelection,
        isStateControlled,
        props.rowSelection
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowSelection.useEffect": ()=>{
            runIfRowSelectionIsEnabled(removeOutdatedSelection);
        }
    }["useGridRowSelection.useEffect"], [
        removeOutdatedSelection,
        runIfRowSelectionIsEnabled
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRegisterPipeApplier": (()=>useGridRegisterPipeApplier)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js [app-client] (ecmascript)");
;
;
const useGridRegisterPipeApplier = (apiRef, group, callback)=>{
    const cleanup = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
    const registerPreProcessor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRegisterPipeApplier.useCallback[registerPreProcessor]": ()=>{
            cleanup.current = apiRef.current.registerPipeApplier(group, id.current, callback);
        }
    }["useGridRegisterPipeApplier.useCallback[registerPreProcessor]"], [
        apiRef,
        callback,
        group
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useFirstRender"])({
        "useGridRegisterPipeApplier.useFirstRender": ()=>{
            registerPreProcessor();
        }
    }["useGridRegisterPipeApplier.useFirstRender"]);
    const isFirstRender = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRegisterPipeApplier.useEffect": ()=>{
            if (isFirstRender.current) {
                isFirstRender.current = false;
            } else {
                registerPreProcessor();
            }
            return ({
                "useGridRegisterPipeApplier.useEffect": ()=>{
                    if (cleanup.current) {
                        cleanup.current();
                        cleanup.current = null;
                    }
                }
            })["useGridRegisterPipeApplier.useEffect"];
        }
    }["useGridRegisterPipeApplier.useEffect"], [
        registerPreProcessor
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "columnsStateInitializer": (()=>columnsStateInitializer),
    "useGridColumns": (()=>useGridColumns)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsInterfaces.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$preferencesPanel$2f$gridPreferencePanelsValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelsValue.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeApplier$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
const columnsStateInitializer = (state, props, apiRef)=>{
    const columnsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColumnsState"])({
        apiRef,
        columnsToUpsert: props.columns,
        initialState: props.initialState?.columns,
        columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},
        keepOnlyColumnsToUpsert: true
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        columns: columnsState,
        // In pro/premium, this part of the state is defined. We give it an empty but defined value
        // for the community version.
        pinnedColumns: state.pinnedColumns ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EMPTY_PINNED_COLUMN_FIELDS"]
    });
};
function useGridColumns(apiRef, props) {
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridColumns');
    const previousColumnsProp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(props.columns);
    apiRef.current.registerControlState({
        stateId: 'visibleColumns',
        propModel: props.columnVisibilityModel,
        propOnChange: props.onColumnVisibilityModelChange,
        stateSelector: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnVisibilityModelSelector"],
        changeEvent: 'columnVisibilityModelChange'
    });
    const setGridColumnsState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[setGridColumnsState]": (columnsState)=>{
            logger.debug('Updating columns state.');
            apiRef.current.setState(mergeColumnsState(columnsState));
            apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);
            apiRef.current.updateRenderContext?.();
            apiRef.current.forceUpdate();
        }
    }["useGridColumns.useCallback[setGridColumnsState]"], [
        logger,
        apiRef
    ]);
    /**
   * API METHODS
   */ const getColumn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[getColumn]": (field)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnLookupSelector"])(apiRef)[field]
    }["useGridColumns.useCallback[getColumn]"], [
        apiRef
    ]);
    const getAllColumns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[getAllColumns]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnDefinitionsSelector"])(apiRef)
    }["useGridColumns.useCallback[getAllColumns]"], [
        apiRef
    ]);
    const getVisibleColumns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[getVisibleColumns]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef)
    }["useGridColumns.useCallback[getVisibleColumns]"], [
        apiRef
    ]);
    const getColumnIndex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[getColumnIndex]": (field, useVisibleColumns = true)=>{
            const columns = useVisibleColumns ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnDefinitionsSelector"])(apiRef);
            return columns.findIndex({
                "useGridColumns.useCallback[getColumnIndex]": (col)=>col.field === field
            }["useGridColumns.useCallback[getColumnIndex]"]);
        }
    }["useGridColumns.useCallback[getColumnIndex]"], [
        apiRef
    ]);
    const getColumnPosition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[getColumnPosition]": (field)=>{
            const index = getColumnIndex(field);
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnPositionsSelector"])(apiRef)[index];
        }
    }["useGridColumns.useCallback[getColumnPosition]"], [
        apiRef,
        getColumnIndex
    ]);
    const setColumnVisibilityModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[setColumnVisibilityModel]": (model)=>{
            const currentModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnVisibilityModelSelector"])(apiRef);
            if (currentModel !== model) {
                apiRef.current.setState({
                    "useGridColumns.useCallback[setColumnVisibilityModel]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            columns: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColumnsState"])({
                                apiRef,
                                columnsToUpsert: [],
                                initialState: undefined,
                                columnVisibilityModel: model,
                                keepOnlyColumnsToUpsert: false
                            })
                        })
                }["useGridColumns.useCallback[setColumnVisibilityModel]"]);
                apiRef.current.updateRenderContext?.();
                apiRef.current.forceUpdate();
            }
        }
    }["useGridColumns.useCallback[setColumnVisibilityModel]"], [
        apiRef
    ]);
    const updateColumns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[updateColumns]": (columns)=>{
            const columnsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColumnsState"])({
                apiRef,
                columnsToUpsert: columns,
                initialState: undefined,
                keepOnlyColumnsToUpsert: false
            });
            setGridColumnsState(columnsState);
        }
    }["useGridColumns.useCallback[updateColumns]"], [
        apiRef,
        setGridColumnsState
    ]);
    const setColumnVisibility = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[setColumnVisibility]": (field, isVisible)=>{
            const columnVisibilityModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnVisibilityModelSelector"])(apiRef);
            const isCurrentlyVisible = columnVisibilityModel[field] ?? true;
            if (isVisible !== isCurrentlyVisible) {
                const newModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, columnVisibilityModel, {
                    [field]: isVisible
                });
                apiRef.current.setColumnVisibilityModel(newModel);
            }
        }
    }["useGridColumns.useCallback[setColumnVisibility]"], [
        apiRef
    ]);
    const getColumnIndexRelativeToVisibleColumns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[getColumnIndexRelativeToVisibleColumns]": (field)=>{
            const allColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnFieldsSelector"])(apiRef);
            return allColumns.findIndex({
                "useGridColumns.useCallback[getColumnIndexRelativeToVisibleColumns]": (col)=>col === field
            }["useGridColumns.useCallback[getColumnIndexRelativeToVisibleColumns]"]);
        }
    }["useGridColumns.useCallback[getColumnIndexRelativeToVisibleColumns]"], [
        apiRef
    ]);
    const setColumnIndex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[setColumnIndex]": (field, targetIndexPosition)=>{
            const allColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnFieldsSelector"])(apiRef);
            const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);
            if (oldIndexPosition === targetIndexPosition) {
                return;
            }
            logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);
            const updatedColumns = [
                ...allColumns
            ];
            const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];
            updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);
            setGridColumnsState((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnsStateSelector"])(apiRef.current.state), {
                orderedFields: updatedColumns
            }));
            const params = {
                column: apiRef.current.getColumn(field),
                targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),
                oldIndex: oldIndexPosition
            };
            apiRef.current.publishEvent('columnIndexChange', params);
        }
    }["useGridColumns.useCallback[setColumnIndex]"], [
        apiRef,
        logger,
        setGridColumnsState,
        getColumnIndexRelativeToVisibleColumns
    ]);
    const setColumnWidth = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[setColumnWidth]": (field, width)=>{
            logger.debug(`Updating column ${field} width to ${width}`);
            const columnsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnsStateSelector"])(apiRef.current.state);
            const column = columnsState.lookup[field];
            const newColumn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, column, {
                width,
                hasBeenResized: true
            });
            setGridColumnsState((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hydrateColumnsWidth"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, columnsState, {
                lookup: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, columnsState.lookup, {
                    [field]: newColumn
                })
            }), apiRef.current.getRootDimensions()));
            apiRef.current.publishEvent('columnWidthChange', {
                element: apiRef.current.getColumnHeaderElement(field),
                colDef: newColumn,
                width
            });
        }
    }["useGridColumns.useCallback[setColumnWidth]"], [
        apiRef,
        logger,
        setGridColumnsState
    ]);
    const columnApi = {
        getColumn,
        getAllColumns,
        getColumnIndex,
        getColumnPosition,
        getVisibleColumns,
        getColumnIndexRelativeToVisibleColumns,
        updateColumns,
        setColumnVisibilityModel,
        setColumnVisibility,
        setColumnWidth
    };
    const columnReorderApi = {
        setColumnIndex
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, columnApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, columnReorderApi, props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid ? 'private' : 'public');
    /**
   * PRE-PROCESSING
   */ const stateExportPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[stateExportPreProcessing]": (prevState, context)=>{
            const columnsStateToExport = {};
            const columnVisibilityModelToExport = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnVisibilityModelSelector"])(apiRef);
            const shouldExportColumnVisibilityModel = // Always export if the `exportOnlyDirtyModels` property is not activated
            !context.exportOnlyDirtyModels || // Always export if the model is controlled
            props.columnVisibilityModel != null || // Always export if the model has been initialized
            // TODO v6 Do a nullish check instead to export even if the initial model equals "{}"
            Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 || // Always export if the model is not empty
            Object.keys(columnVisibilityModelToExport).length > 0;
            if (shouldExportColumnVisibilityModel) {
                columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;
            }
            columnsStateToExport.orderedFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnFieldsSelector"])(apiRef);
            const columns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnDefinitionsSelector"])(apiRef);
            const dimensions = {};
            columns.forEach({
                "useGridColumns.useCallback[stateExportPreProcessing]": (colDef)=>{
                    if (colDef.hasBeenResized) {
                        const colDefDimensions = {};
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["COLUMNS_DIMENSION_PROPERTIES"].forEach({
                            "useGridColumns.useCallback[stateExportPreProcessing]": (propertyName)=>{
                                let propertyValue = colDef[propertyName];
                                if (propertyValue === Infinity) {
                                    propertyValue = -1;
                                }
                                colDefDimensions[propertyName] = propertyValue;
                            }
                        }["useGridColumns.useCallback[stateExportPreProcessing]"]);
                        dimensions[colDef.field] = colDefDimensions;
                    }
                }
            }["useGridColumns.useCallback[stateExportPreProcessing]"]);
            if (Object.keys(dimensions).length > 0) {
                columnsStateToExport.dimensions = dimensions;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState, {
                columns: columnsStateToExport
            });
        }
    }["useGridColumns.useCallback[stateExportPreProcessing]"], [
        apiRef,
        props.columnVisibilityModel,
        props.initialState?.columns
    ]);
    const stateRestorePreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[stateRestorePreProcessing]": (params, context)=>{
            const columnVisibilityModelToImport = context.stateToRestore.columns?.columnVisibilityModel;
            const initialState = context.stateToRestore.columns;
            if (columnVisibilityModelToImport == null && initialState == null) {
                return params;
            }
            const columnsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColumnsState"])({
                apiRef,
                columnsToUpsert: [],
                initialState,
                columnVisibilityModel: columnVisibilityModelToImport,
                keepOnlyColumnsToUpsert: false
            });
            apiRef.current.setState(mergeColumnsState(columnsState));
            if (initialState != null) {
                apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);
            }
            return params;
        }
    }["useGridColumns.useCallback[stateRestorePreProcessing]"], [
        apiRef
    ]);
    const preferencePanelPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[preferencePanelPreProcessing]": (initialValue, value)=>{
            if (value === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$preferencesPanel$2f$gridPreferencePanelsValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPreferencePanelsValue"].columns) {
                const ColumnsPanel = props.slots.columnsPanel;
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(ColumnsPanel, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, props.slotProps?.columnsPanel));
            }
            return initialValue;
        }
    }["useGridColumns.useCallback[preferencePanelPreProcessing]"], [
        props.slots.columnsPanel,
        props.slotProps?.columnsPanel
    ]);
    const addColumnMenuItems = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[addColumnMenuItems]": (columnMenuItems)=>{
            if (props.disableColumnSelector) {
                return columnMenuItems;
            }
            return [
                ...columnMenuItems,
                'columnMenuColumnsItem'
            ];
        }
    }["useGridColumns.useCallback[addColumnMenuItems]"], [
        props.disableColumnSelector
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'columnMenu', addColumnMenuItems);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportState', stateExportPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'restoreState', stateRestorePreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'preferencePanel', preferencePanelPreProcessing);
    /*
   * EVENTS
   */ const prevInnerWidth = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const handleGridSizeChange = (viewportInnerSize)=>{
        if (prevInnerWidth.current !== viewportInnerSize.width) {
            prevInnerWidth.current = viewportInnerSize.width;
            setGridColumnsState((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hydrateColumnsWidth"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnsStateSelector"])(apiRef.current.state), apiRef.current.getRootDimensions()));
        }
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);
    /**
   * APPLIERS
   */ const hydrateColumns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumns.useCallback[hydrateColumns]": ()=>{
            logger.info(`Columns pipe processing have changed, regenerating the columns`);
            const columnsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColumnsState"])({
                apiRef,
                columnsToUpsert: [],
                initialState: undefined,
                keepOnlyColumnsToUpsert: false
            });
            setGridColumnsState(columnsState);
        }
    }["useGridColumns.useCallback[hydrateColumns]"], [
        apiRef,
        logger,
        setGridColumnsState
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeApplier$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeApplier"])(apiRef, 'hydrateColumns', hydrateColumns);
    /*
   * EFFECTS
   */ // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`
    // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one
    const isFirstRender = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridColumns.useEffect": ()=>{
            if (isFirstRender.current) {
                isFirstRender.current = false;
                return;
            }
            logger.info(`GridColumns have changed, new length ${props.columns.length}`);
            if (previousColumnsProp.current === props.columns) {
                return;
            }
            const columnsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createColumnsState"])({
                apiRef,
                initialState: undefined,
                // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`
                columnsToUpsert: props.columns,
                keepOnlyColumnsToUpsert: true
            });
            previousColumnsProp.current = props.columns;
            setGridColumnsState(columnsState);
        }
    }["useGridColumns.useEffect"], [
        logger,
        apiRef,
        setGridColumnsState,
        props.columns
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridColumns.useEffect": ()=>{
            if (props.columnVisibilityModel !== undefined) {
                apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);
            }
        }
    }["useGridColumns.useEffect"], [
        apiRef,
        logger,
        props.columnVisibilityModel
    ]);
}
function mergeColumnsState(columnsState) {
    return (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
            columns: columnsState
        });
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "rowsStateInitializer": (()=>rowsStateInitializer),
    "useGridRows": (()=>useGridRows)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useTimeout$2f$useTimeout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useTimeout$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useTimeout/useTimeout.js [app-client] (ecmascript) <export default as useTimeout>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeApplier$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
const rowsStateInitializer = (state, props, apiRef)=>{
    const isDataSourceAvailable = !!props.unstable_dataSource;
    apiRef.current.caches.rows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRowsInternalCache"])({
        rows: isDataSourceAvailable ? [] : props.rows,
        getRowId: props.getRowId,
        loading: props.loading,
        rowCount: props.rowCount
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRowsStateFromCache"])({
            apiRef,
            rowCountProp: props.rowCount,
            loadingProp: isDataSourceAvailable ? true : props.loading,
            previousTree: null,
            previousTreeDepths: null
        })
    });
};
const useGridRows = (apiRef, props)=>{
    if ("TURBOPACK compile-time truthy", 1) {
        try {
            // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().
            Object.freeze(props.rows);
        } catch (error) {
        // Sometimes, it's impossible to freeze, so we give up on it.
        }
    }
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridRows');
    const currentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridVisibleRows"])(apiRef, props);
    const lastUpdateMs = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(Date.now());
    const lastRowCount = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(props.rowCount);
    const timeout = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useTimeout$2f$useTimeout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useTimeout$3e$__["useTimeout"])();
    const getRow = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[getRow]": (id)=>{
            const model = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLookupSelector"])(apiRef)[id];
            if (model) {
                return model;
            }
            const node = apiRef.current.getRowNode(id);
            if (node && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAutogeneratedRowNode"])(node)) {
                return {
                    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ID_AUTOGENERATED"]]: id
                };
            }
            return null;
        }
    }["useGridRows.useCallback[getRow]"], [
        apiRef
    ]);
    const getRowIdProp = props.getRowId;
    const getRowId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[getRowId]": (row)=>{
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ID_AUTOGENERATED"] in row) {
                return row[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ID_AUTOGENERATED"]];
            }
            if (getRowIdProp) {
                return getRowIdProp(row);
            }
            return row.id;
        }
    }["useGridRows.useCallback[getRowId]"], [
        getRowIdProp
    ]);
    const lookup = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridRows.useMemo[lookup]": ()=>currentPage.rows.reduce({
                "useGridRows.useMemo[lookup]": (acc, { id }, index)=>{
                    acc[id] = index;
                    return acc;
                }
            }["useGridRows.useMemo[lookup]"], {})
    }["useGridRows.useMemo[lookup]"], [
        currentPage.rows
    ]);
    const throttledRowsChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[throttledRowsChange]": ({ cache, throttle })=>{
            const run = {
                "useGridRows.useCallback[throttledRowsChange].run": ()=>{
                    lastUpdateMs.current = Date.now();
                    apiRef.current.setState({
                        "useGridRows.useCallback[throttledRowsChange].run": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                                rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRowsStateFromCache"])({
                                    apiRef,
                                    rowCountProp: props.rowCount,
                                    loadingProp: props.loading,
                                    previousTree: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(apiRef),
                                    previousTreeDepths: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeDepthsSelector"])(apiRef),
                                    previousGroupsToFetch: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowGroupsToFetchSelector"])(apiRef)
                                })
                            })
                    }["useGridRows.useCallback[throttledRowsChange].run"]);
                    apiRef.current.publishEvent('rowsSet');
                    apiRef.current.forceUpdate();
                }
            }["useGridRows.useCallback[throttledRowsChange].run"];
            timeout.clear();
            apiRef.current.caches.rows = cache;
            if (!throttle) {
                run();
                return;
            }
            const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);
            if (throttleRemainingTimeMs > 0) {
                timeout.start(throttleRemainingTimeMs, run);
                return;
            }
            run();
        }
    }["useGridRows.useCallback[throttledRowsChange]"], [
        props.throttleRowsMs,
        props.rowCount,
        props.loading,
        apiRef,
        timeout
    ]);
    /**
   * API METHODS
   */ const setRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[setRows]": (rows)=>{
            logger.debug(`Updating all rows, new length ${rows.length}`);
            const cache = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRowsInternalCache"])({
                rows,
                getRowId: props.getRowId,
                loading: props.loading,
                rowCount: props.rowCount
            });
            const prevCache = apiRef.current.caches.rows;
            cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;
            throttledRowsChange({
                cache,
                throttle: true
            });
        }
    }["useGridRows.useCallback[setRows]"], [
        logger,
        props.getRowId,
        props.loading,
        props.rowCount,
        throttledRowsChange,
        apiRef
    ]);
    const updateRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[updateRows]": (updates)=>{
            if (props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid && updates.length > 1) {
                throw new Error([
                    'MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.',
                    'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'
                ].join('\n'));
            }
            const nonPinnedRowsUpdates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["computeRowsUpdates"])(apiRef, updates, props.getRowId);
            const cache = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["updateCacheWithNewRows"])({
                updates: nonPinnedRowsUpdates,
                getRowId: props.getRowId,
                previousCache: apiRef.current.caches.rows
            });
            throttledRowsChange({
                cache,
                throttle: true
            });
        }
    }["useGridRows.useCallback[updateRows]"], [
        props.signature,
        props.getRowId,
        throttledRowsChange,
        apiRef
    ]);
    const updateServerRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[updateServerRows]": (updates, groupKeys)=>{
            const nonPinnedRowsUpdates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["computeRowsUpdates"])(apiRef, updates, props.getRowId);
            const cache = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["updateCacheWithNewRows"])({
                updates: nonPinnedRowsUpdates,
                getRowId: props.getRowId,
                previousCache: apiRef.current.caches.rows,
                groupKeys: groupKeys ?? []
            });
            throttledRowsChange({
                cache,
                throttle: false
            });
        }
    }["useGridRows.useCallback[updateServerRows]"], [
        props.getRowId,
        throttledRowsChange,
        apiRef
    ]);
    const setLoading = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[setLoading]": (loading)=>{
            if (loading === props.loading) {
                return;
            }
            logger.debug(`Setting loading to ${loading}`);
            apiRef.current.setState({
                "useGridRows.useCallback[setLoading]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows, {
                            loading
                        })
                    })
            }["useGridRows.useCallback[setLoading]"]);
            apiRef.current.caches.rows.loadingPropBeforePartialUpdates = loading;
        }
    }["useGridRows.useCallback[setLoading]"], [
        props.loading,
        apiRef,
        logger
    ]);
    const getRowModels = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[getRowModels]": ()=>{
            const dataRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDataRowIdsSelector"])(apiRef);
            const idRowsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLookupSelector"])(apiRef);
            return new Map(dataRows.map({
                "useGridRows.useCallback[getRowModels]": (id)=>[
                        id,
                        idRowsLookup[id] ?? {}
                    ]
            }["useGridRows.useCallback[getRowModels]"]));
        }
    }["useGridRows.useCallback[getRowModels]"], [
        apiRef
    ]);
    const getRowsCount = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[getRowsCount]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowCountSelector"])(apiRef)
    }["useGridRows.useCallback[getRowsCount]"], [
        apiRef
    ]);
    const getAllRowIds = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[getAllRowIds]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDataRowIdsSelector"])(apiRef)
    }["useGridRows.useCallback[getAllRowIds]"], [
        apiRef
    ]);
    const getRowIndexRelativeToVisibleRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[getRowIndexRelativeToVisibleRows]": (id)=>lookup[id]
    }["useGridRows.useCallback[getRowIndexRelativeToVisibleRows]"], [
        lookup
    ]);
    const setRowChildrenExpansion = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[setRowChildrenExpansion]": (id, isExpanded)=>{
            const currentNode = apiRef.current.getRowNode(id);
            if (!currentNode) {
                throw new Error(`MUI X: No row with id #${id} found.`);
            }
            if (currentNode.type !== 'group') {
                throw new Error('MUI X: Only group nodes can be expanded or collapsed.');
            }
            const newNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, currentNode, {
                childrenExpanded: isExpanded
            });
            apiRef.current.setState({
                "useGridRows.useCallback[setRowChildrenExpansion]": (state)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows, {
                            tree: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows.tree, {
                                [id]: newNode
                            })
                        })
                    });
                }
            }["useGridRows.useCallback[setRowChildrenExpansion]"]);
            apiRef.current.forceUpdate();
            apiRef.current.publishEvent('rowExpansionChange', newNode);
        }
    }["useGridRows.useCallback[setRowChildrenExpansion]"], [
        apiRef
    ]);
    const getRowNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[getRowNode]": (id)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(apiRef)[id] ?? null
    }["useGridRows.useCallback[getRowNode]"], [
        apiRef
    ]);
    const getRowGroupChildren = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[getRowGroupChildren]": ({ skipAutoGeneratedRows = true, groupId, applySorting, applyFiltering })=>{
            const tree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(apiRef);
            let children;
            if (applySorting) {
                const groupNode = tree[groupId];
                if (!groupNode) {
                    return [];
                }
                const sortedRowIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortedRowIdsSelector"])(apiRef);
                children = [];
                const startIndex = sortedRowIds.findIndex({
                    "useGridRows.useCallback[getRowGroupChildren]": (id)=>id === groupId
                }["useGridRows.useCallback[getRowGroupChildren]"]) + 1;
                for(let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1){
                    const id = sortedRowIds[index];
                    if (!skipAutoGeneratedRows || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAutogeneratedRowNode"])(tree[id])) {
                        children.push(id);
                    }
                }
            } else {
                children = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTreeNodeDescendants"])(tree, groupId, skipAutoGeneratedRows);
            }
            if (applyFiltering) {
                const filteredRowsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredRowsLookupSelector"])(apiRef);
                children = children.filter({
                    "useGridRows.useCallback[getRowGroupChildren]": (childId)=>filteredRowsLookup[childId] !== false
                }["useGridRows.useCallback[getRowGroupChildren]"]);
            }
            return children;
        }
    }["useGridRows.useCallback[getRowGroupChildren]"], [
        apiRef
    ]);
    const setRowIndex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[setRowIndex]": (rowId, targetIndex)=>{
            const node = apiRef.current.getRowNode(rowId);
            if (!node) {
                throw new Error(`MUI X: No row with id #${rowId} found.`);
            }
            if (node.parent !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]) {
                throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);
            }
            if (node.type !== 'leaf') {
                throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);
            }
            apiRef.current.setState({
                "useGridRows.useCallback[setRowIndex]": (state)=>{
                    const group = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(state, apiRef.current.instanceId)[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]];
                    const allRows = group.children;
                    const oldIndex = allRows.findIndex({
                        "useGridRows.useCallback[setRowIndex].oldIndex": (row)=>row === rowId
                    }["useGridRows.useCallback[setRowIndex].oldIndex"]);
                    if (oldIndex === -1 || oldIndex === targetIndex) {
                        return state;
                    }
                    logger.debug(`Moving row ${rowId} to index ${targetIndex}`);
                    const updatedRows = [
                        ...allRows
                    ];
                    updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows, {
                            tree: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows.tree, {
                                [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, group, {
                                    children: updatedRows
                                })
                            })
                        })
                    });
                }
            }["useGridRows.useCallback[setRowIndex]"]);
            apiRef.current.publishEvent('rowsSet');
        }
    }["useGridRows.useCallback[setRowIndex]"], [
        apiRef,
        logger
    ]);
    const replaceRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[replaceRows]": (firstRowToRender, newRows)=>{
            if (props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid && newRows.length > 1) {
                throw new Error([
                    'MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.',
                    'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'
                ].join('\n'));
            }
            if (newRows.length === 0) {
                return;
            }
            const treeDepth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowMaximumTreeDepthSelector"])(apiRef);
            if (treeDepth > 1) {
                throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');
            }
            const tree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(apiRef));
            const dataRowIdToModelLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLookupSelector"])(apiRef));
            const dataRowIdToIdLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsDataRowIdToIdLookupSelector"])(apiRef));
            const rootGroup = tree[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]];
            const rootGroupChildren = [
                ...rootGroup.children
            ];
            const seenIds = new Set();
            for(let i = 0; i < newRows.length; i += 1){
                const rowModel = newRows[i];
                const rowId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRowIdFromRowModel"])(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');
                const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);
                if (!seenIds.has(removedRowId)) {
                    delete dataRowIdToModelLookup[removedRowId];
                    delete dataRowIdToIdLookup[removedRowId];
                    delete tree[removedRowId];
                }
                const rowTreeNodeConfig = {
                    id: rowId,
                    depth: 0,
                    parent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"],
                    type: 'leaf',
                    groupingKey: null
                };
                dataRowIdToModelLookup[rowId] = rowModel;
                dataRowIdToIdLookup[rowId] = rowId;
                tree[rowId] = rowTreeNodeConfig;
                seenIds.add(rowId);
            }
            tree[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, rootGroup, {
                children: rootGroupChildren
            });
            // Removes potential remaining skeleton rows from the dataRowIds.
            const dataRowIds = rootGroupChildren.filter({
                "useGridRows.useCallback[replaceRows].dataRowIds": (childId)=>tree[childId]?.type === 'leaf'
            }["useGridRows.useCallback[replaceRows].dataRowIds"]);
            apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;
            apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;
            apiRef.current.setState({
                "useGridRows.useCallback[replaceRows]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows, {
                            dataRowIdToModelLookup,
                            dataRowIdToIdLookup,
                            dataRowIds,
                            tree
                        })
                    })
            }["useGridRows.useCallback[replaceRows]"]);
            apiRef.current.publishEvent('rowsSet');
        }
    }["useGridRows.useCallback[replaceRows]"], [
        apiRef,
        props.signature,
        props.getRowId
    ]);
    const rowApi = {
        getRow,
        setLoading,
        getRowId,
        getRowModels,
        getRowsCount,
        getAllRowIds,
        setRows,
        updateRows,
        getRowNode,
        getRowIndexRelativeToVisibleRows,
        unstable_replaceRows: replaceRows
    };
    const rowProApi = {
        setRowIndex,
        setRowChildrenExpansion,
        getRowGroupChildren
    };
    const rowProPrivateApi = {
        updateServerRows
    };
    /**
   * EVENTS
   */ const groupRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[groupRows]": ()=>{
            logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);
            let cache;
            if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {
                // The `props.rows` did not change since the last row grouping
                // We can use the current rows cache which contains the partial updates done recently.
                cache = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, apiRef.current.caches.rows, {
                    updates: {
                        type: 'full',
                        rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDataRowIdsSelector"])(apiRef)
                    }
                });
            } else {
                // The `props.rows` has changed since the last row grouping
                // We must use the new `props.rows` on the new grouping
                // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render
                cache = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRowsInternalCache"])({
                    rows: props.rows,
                    getRowId: props.getRowId,
                    loading: props.loading,
                    rowCount: props.rowCount
                });
            }
            throttledRowsChange({
                cache,
                throttle: false
            });
        }
    }["useGridRows.useCallback[groupRows]"], [
        logger,
        apiRef,
        props.rows,
        props.getRowId,
        props.loading,
        props.rowCount,
        throttledRowsChange
    ]);
    const previousDataSource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
        "useGridRows.useLazyRef[previousDataSource]": ()=>props.unstable_dataSource
    }["useGridRows.useLazyRef[previousDataSource]"]);
    const handleStrategyProcessorChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[handleStrategyProcessorChange]": (methodName)=>{
            if (props.unstable_dataSource && props.unstable_dataSource !== previousDataSource.current) {
                previousDataSource.current = props.unstable_dataSource;
                return;
            }
            if (methodName === 'rowTreeCreation') {
                groupRows();
            }
        }
    }["useGridRows.useCallback[handleStrategyProcessorChange]"], [
        groupRows,
        previousDataSource,
        props.unstable_dataSource
    ]);
    const handleStrategyActivityChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[handleStrategyActivityChange]": ()=>{
            // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.
            // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.
            if (apiRef.current.getActiveStrategy('rowTree') !== (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowGroupingNameSelector"])(apiRef)) {
                groupRows();
            }
        }
    }["useGridRows.useCallback[handleStrategyActivityChange]"], [
        apiRef,
        groupRows
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);
    /**
   * APPLIERS
   */ const applyHydrateRowsProcessor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRows.useCallback[applyHydrateRowsProcessor]": ()=>{
            apiRef.current.setState({
                "useGridRows.useCallback[applyHydrateRowsProcessor]": (state)=>{
                    const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {
                        tree: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(state, apiRef.current.instanceId),
                        treeDepths: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeDepthsSelector"])(state, apiRef.current.instanceId),
                        dataRowIds: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDataRowIdsSelector"])(state, apiRef.current.instanceId),
                        dataRowIdToModelLookup: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLookupSelector"])(state, apiRef.current.instanceId),
                        dataRowIdToIdLookup: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsDataRowIdToIdLookupSelector"])(state, apiRef.current.instanceId)
                    });
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows, response, {
                            totalTopLevelRowCount: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTopLevelRowCount"])({
                                tree: response.tree,
                                rowCountProp: props.rowCount
                            })
                        })
                    });
                }
            }["useGridRows.useCallback[applyHydrateRowsProcessor]"]);
            apiRef.current.publishEvent('rowsSet');
            apiRef.current.forceUpdate();
        }
    }["useGridRows.useCallback[applyHydrateRowsProcessor]"], [
        apiRef,
        props.rowCount
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeApplier$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeApplier"])(apiRef, 'hydrateRows', applyHydrateRowsProcessor);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, rowApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, rowProApi, props.signature === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridSignature"].DataGrid ? 'private' : 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, rowProPrivateApi, 'private');
    // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`
    // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one
    const isFirstRender = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRows.useEffect": ()=>{
            if (isFirstRender.current) {
                isFirstRender.current = false;
                return;
            }
            let isRowCountPropUpdated = false;
            if (props.rowCount !== lastRowCount.current) {
                isRowCountPropUpdated = true;
                lastRowCount.current = props.rowCount;
            }
            const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;
            const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;
            const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;
            // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)
            if (areNewRowsAlreadyInState) {
                // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`
                if (!isNewLoadingAlreadyInState) {
                    apiRef.current.setState({
                        "useGridRows.useEffect": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                                rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows, {
                                    loading: props.loading
                                })
                            })
                    }["useGridRows.useEffect"]);
                    apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;
                    apiRef.current.forceUpdate();
                }
                if (!isNewRowCountAlreadyInState) {
                    apiRef.current.setState({
                        "useGridRows.useEffect": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                                rows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.rows, {
                                    totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),
                                    totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)
                                })
                            })
                    }["useGridRows.useEffect"]);
                    apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;
                    apiRef.current.forceUpdate();
                }
                if (!isRowCountPropUpdated) {
                    return;
                }
            }
            logger.debug(`Updating all rows, new length ${props.rows?.length}`);
            throttledRowsChange({
                cache: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRowsInternalCache"])({
                    rows: props.rows,
                    getRowId: props.getRowId,
                    loading: props.loading,
                    rowCount: props.rowCount
                }),
                throttle: false
            });
        }
    }["useGridRows.useEffect"], [
        props.rows,
        props.rowCount,
        props.getRowId,
        props.loading,
        logger,
        throttledRowsChange,
        apiRef
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/editing/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getDefaultCellValue": (()=>getDefaultCellValue)
});
const getDefaultCellValue = (colDef)=>{
    switch(colDef.type){
        case 'boolean':
            return false;
        case 'date':
        case 'dateTime':
        case 'number':
            return undefined;
        case 'singleSelect':
            return null;
        case 'string':
        default:
            return '';
    }
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridCellEditing": (()=>useGridCellEditing)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridEditRowModel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/params/gridEditCellParams.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/keyboardUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/editing/gridEditingSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js [app-client] (ecmascript) <export default as unstable_useEventCallback>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/editing/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/warning/warning.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js [app-client] (ecmascript) <export default as unstable_useEnhancedEffect>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
;
;
;
const _excluded = [
    "id",
    "field"
], _excluded2 = [
    "id",
    "field"
];
;
;
;
;
;
;
;
;
;
;
;
;
const useGridCellEditing = (apiRef, props)=>{
    const [cellModesModel, setCellModesModel] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState({});
    const cellModesModelRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(cellModesModel);
    const prevCellModesModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef({});
    const { processRowUpdate, onProcessRowUpdateError, cellModesModel: cellModesModelProp, onCellModesModelChange } = props;
    const runIfEditModeIsCell = (callback)=>(...args)=>{
            if (props.editMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridEditModes"].Cell) {
                callback(...args);
            }
        };
    const throwIfNotEditable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[throwIfNotEditable]": (id, field)=>{
            const params = apiRef.current.getCellParams(id, field);
            if (!apiRef.current.isCellEditable(params)) {
                throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);
            }
        }
    }["useGridCellEditing.useCallback[throwIfNotEditable]"], [
        apiRef
    ]);
    const throwIfNotInMode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[throwIfNotInMode]": (id, field, mode)=>{
            if (apiRef.current.getCellMode(id, field) !== mode) {
                throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);
            }
        }
    }["useGridCellEditing.useCallback[throwIfNotInMode]"], [
        apiRef
    ]);
    const handleCellDoubleClick = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[handleCellDoubleClick]": (params, event)=>{
            if (!params.isEditable) {
                return;
            }
            if (params.cellMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit) {
                return;
            }
            const newParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, params, {
                reason: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStartReasons"].cellDoubleClick
            });
            apiRef.current.publishEvent('cellEditStart', newParams, event);
        }
    }["useGridCellEditing.useCallback[handleCellDoubleClick]"], [
        apiRef
    ]);
    const handleCellFocusOut = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[handleCellFocusOut]": (params, event)=>{
            if (params.cellMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View) {
                return;
            }
            if (apiRef.current.getCellMode(params.id, params.field) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View) {
                return;
            }
            const newParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, params, {
                reason: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStopReasons"].cellFocusOut
            });
            apiRef.current.publishEvent('cellEditStop', newParams, event);
        }
    }["useGridCellEditing.useCallback[handleCellFocusOut]"], [
        apiRef
    ]);
    const handleCellKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[handleCellKeyDown]": (params, event)=>{
            if (params.cellMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit) {
                // Wait until IME is settled for Asian languages like Japanese and Chinese
                // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.
                if (event.which === 229) {
                    return;
                }
                let reason;
                if (event.key === 'Escape') {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStopReasons"].escapeKeyDown;
                } else if (event.key === 'Enter') {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStopReasons"].enterKeyDown;
                } else if (event.key === 'Tab') {
                    reason = event.shiftKey ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStopReasons"].shiftTabKeyDown : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStopReasons"].tabKeyDown;
                    event.preventDefault(); // Prevent going to the next element in the tab sequence
                }
                if (reason) {
                    const newParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, params, {
                        reason
                    });
                    apiRef.current.publishEvent('cellEditStop', newParams, event);
                }
            } else if (params.isEditable) {
                let reason;
                const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {
                    event,
                    cellParams: params,
                    editMode: 'cell'
                });
                if (!canStartEditing) {
                    return;
                }
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPrintableKey"])(event)) {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStartReasons"].printableKeyDown;
                } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPasteShortcut"])(event)) {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStartReasons"].pasteKeyDown;
                } else if (event.key === 'Enter') {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStartReasons"].enterKeyDown;
                } else if (event.key === 'Backspace' || event.key === 'Delete') {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStartReasons"].deleteKeyDown;
                }
                if (reason) {
                    const newParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, params, {
                        reason,
                        key: event.key
                    });
                    apiRef.current.publishEvent('cellEditStart', newParams, event);
                }
            }
        }
    }["useGridCellEditing.useCallback[handleCellKeyDown]"], [
        apiRef
    ]);
    const handleCellEditStart = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[handleCellEditStart]": (params)=>{
            const { id, field, reason } = params;
            const startCellEditModeParams = {
                id,
                field
            };
            if (reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStartReasons"].printableKeyDown || reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStartReasons"].deleteKeyDown || reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStartReasons"].pasteKeyDown) {
                startCellEditModeParams.deleteValue = true;
            }
            apiRef.current.startCellEditMode(startCellEditModeParams);
        }
    }["useGridCellEditing.useCallback[handleCellEditStart]"], [
        apiRef
    ]);
    const handleCellEditStop = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[handleCellEditStop]": (params)=>{
            const { id, field, reason } = params;
            apiRef.current.runPendingEditCellValueMutation(id, field);
            let cellToFocusAfter;
            if (reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStopReasons"].enterKeyDown) {
                cellToFocusAfter = 'below';
            } else if (reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStopReasons"].tabKeyDown) {
                cellToFocusAfter = 'right';
            } else if (reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridEditCellParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellEditStopReasons"].shiftTabKeyDown) {
                cellToFocusAfter = 'left';
            }
            const ignoreModifications = reason === 'escapeKeyDown';
            apiRef.current.stopCellEditMode({
                id,
                field,
                ignoreModifications,
                cellToFocusAfter
            });
        }
    }["useGridCellEditing.useCallback[handleCellEditStop]"], [
        apiRef
    ]);
    const runIfNoFieldErrors = (callback)=>async (...args)=>{
            if (callback) {
                const { id, field } = args[0];
                const editRowsState = apiRef.current.state.editRows;
                const hasFieldErrors = editRowsState[id][field]?.error;
                if (!hasFieldErrors) {
                    callback(...args);
                }
            }
        };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'cellEditStart', props.onCellEditStart);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));
    const getCellMode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[getCellMode]": (id, field)=>{
            const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            const isEditing = editingState[id] && editingState[id][field];
            return isEditing ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View;
        }
    }["useGridCellEditing.useCallback[getCellMode]"], [
        apiRef
    ]);
    const updateCellModesModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridCellEditing.useEventCallback[updateCellModesModel]": (newModel)=>{
            const isNewModelDifferentFromProp = newModel !== props.cellModesModel;
            if (onCellModesModelChange && isNewModelDifferentFromProp) {
                onCellModesModelChange(newModel, {
                    api: apiRef.current
                });
            }
            if (props.cellModesModel && isNewModelDifferentFromProp) {
                return; // The prop always win
            }
            setCellModesModel(newModel);
            cellModesModelRef.current = newModel;
            apiRef.current.publishEvent('cellModesModelChange', newModel);
        }
    }["useGridCellEditing.useEventCallback[updateCellModesModel]"]);
    const updateFieldInCellModesModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[updateFieldInCellModesModel]": (id, field, newProps)=>{
            // We use the ref because it always contain the up-to-date value, different from the state
            // that needs a rerender to reflect the new value
            const newModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, cellModesModelRef.current);
            if (newProps !== null) {
                newModel[id] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newModel[id], {
                    [field]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newProps)
                });
            } else {
                const _newModel$id = newModel[id], otherFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_newModel$id, [
                    field
                ].map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])); // Ensure that we have a new object, not a reference
                newModel[id] = otherFields;
                if (Object.keys(newModel[id]).length === 0) {
                    delete newModel[id];
                }
            }
            updateCellModesModel(newModel);
        }
    }["useGridCellEditing.useCallback[updateFieldInCellModesModel]"], [
        updateCellModesModel
    ]);
    const updateOrDeleteFieldState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[updateOrDeleteFieldState]": (id, field, newProps)=>{
            apiRef.current.setState({
                "useGridCellEditing.useCallback[updateOrDeleteFieldState]": (state)=>{
                    const newEditingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.editRows);
                    if (newProps !== null) {
                        newEditingState[id] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newEditingState[id], {
                            [field]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newProps)
                        });
                    } else {
                        delete newEditingState[id][field];
                        if (Object.keys(newEditingState[id]).length === 0) {
                            delete newEditingState[id];
                        }
                    }
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        editRows: newEditingState
                    });
                }
            }["useGridCellEditing.useCallback[updateOrDeleteFieldState]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridCellEditing.useCallback[updateOrDeleteFieldState]"], [
        apiRef
    ]);
    const startCellEditMode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[startCellEditMode]": (params)=>{
            const { id, field } = params, other = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(params, _excluded);
            throwIfNotEditable(id, field);
            throwIfNotInMode(id, field, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View);
            updateFieldInCellModesModel(id, field, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit
            }, other));
        }
    }["useGridCellEditing.useCallback[startCellEditMode]"], [
        throwIfNotEditable,
        throwIfNotInMode,
        updateFieldInCellModesModel
    ]);
    const updateStateToStartCellEditMode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridCellEditing.useEventCallback[updateStateToStartCellEditMode]": async (params)=>{
            const { id, field, deleteValue, initialValue } = params;
            const value = apiRef.current.getCellValue(id, field);
            let newValue = value;
            if (deleteValue) {
                newValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultCellValue"])(apiRef.current.getColumn(field));
            } else if (initialValue) {
                newValue = initialValue;
            }
            const column = apiRef.current.getColumn(field);
            const shouldProcessEditCellProps = !!column.preProcessEditCellProps && deleteValue;
            let newProps = {
                value: newValue,
                error: false,
                isProcessingProps: shouldProcessEditCellProps
            };
            updateOrDeleteFieldState(id, field, newProps);
            apiRef.current.setCellFocus(id, field);
            if (shouldProcessEditCellProps) {
                newProps = await Promise.resolve(column.preProcessEditCellProps({
                    id,
                    row: apiRef.current.getRow(id),
                    props: newProps,
                    hasChanged: newValue !== value
                }));
                // Check if still in edit mode before updating
                if (apiRef.current.getCellMode(id, field) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit) {
                    const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
                    updateOrDeleteFieldState(id, field, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newProps, {
                        value: editingState[id][field].value,
                        isProcessingProps: false
                    }));
                }
            }
        }
    }["useGridCellEditing.useEventCallback[updateStateToStartCellEditMode]"]);
    const stopCellEditMode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[stopCellEditMode]": (params)=>{
            const { id, field } = params, other = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(params, _excluded2);
            throwIfNotInMode(id, field, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit);
            updateFieldInCellModesModel(id, field, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View
            }, other));
        }
    }["useGridCellEditing.useCallback[stopCellEditMode]"], [
        throwIfNotInMode,
        updateFieldInCellModesModel
    ]);
    const updateStateToStopCellEditMode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridCellEditing.useEventCallback[updateStateToStopCellEditMode]": async (params)=>{
            const { id, field, ignoreModifications, cellToFocusAfter = 'none' } = params;
            throwIfNotInMode(id, field, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit);
            apiRef.current.runPendingEditCellValueMutation(id, field);
            const finishCellEditMode = {
                "useGridCellEditing.useEventCallback[updateStateToStopCellEditMode].finishCellEditMode": ()=>{
                    updateOrDeleteFieldState(id, field, null);
                    updateFieldInCellModesModel(id, field, null);
                    if (cellToFocusAfter !== 'none') {
                        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);
                    }
                }
            }["useGridCellEditing.useEventCallback[updateStateToStopCellEditMode].finishCellEditMode"];
            if (ignoreModifications) {
                finishCellEditMode();
                return;
            }
            const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            const { error, isProcessingProps } = editingState[id][field];
            if (error || isProcessingProps) {
                // Attempt to change cell mode to "view" was not successful
                // Update previous mode to allow another attempt
                prevCellModesModel.current[id][field].mode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit;
                // Revert the mode in the cellModesModel prop back to "edit"
                updateFieldInCellModesModel(id, field, {
                    mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit
                });
                return;
            }
            const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);
            if (processRowUpdate) {
                const handleError = {
                    "useGridCellEditing.useEventCallback[updateStateToStopCellEditMode].handleError": (errorThrown)=>{
                        prevCellModesModel.current[id][field].mode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit;
                        // Revert the mode in the cellModesModel prop back to "edit"
                        updateFieldInCellModesModel(id, field, {
                            mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit
                        });
                        if (onProcessRowUpdateError) {
                            onProcessRowUpdateError(errorThrown);
                        } else if ("TURBOPACK compile-time truthy", 1) {
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])([
                                'MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.',
                                'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.',
                                'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'
                            ], 'error');
                        }
                    }
                }["useGridCellEditing.useEventCallback[updateStateToStopCellEditMode].handleError"];
                try {
                    const row = apiRef.current.getRow(id);
                    Promise.resolve(processRowUpdate(rowUpdate, row, {
                        rowId: id
                    })).then({
                        "useGridCellEditing.useEventCallback[updateStateToStopCellEditMode]": (finalRowUpdate)=>{
                            apiRef.current.updateRows([
                                finalRowUpdate
                            ]);
                            finishCellEditMode();
                        }
                    }["useGridCellEditing.useEventCallback[updateStateToStopCellEditMode]"]).catch(handleError);
                } catch (errorThrown) {
                    handleError(errorThrown);
                }
            } else {
                apiRef.current.updateRows([
                    rowUpdate
                ]);
                finishCellEditMode();
            }
        }
    }["useGridCellEditing.useEventCallback[updateStateToStopCellEditMode]"]);
    const setCellEditingEditCellValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[setCellEditingEditCellValue]": async (params)=>{
            const { id, field, value, debounceMs, unstable_skipValueParser: skipValueParser } = params;
            throwIfNotEditable(id, field);
            throwIfNotInMode(id, field, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit);
            const column = apiRef.current.getColumn(field);
            const row = apiRef.current.getRow(id);
            let parsedValue = value;
            if (column.valueParser && !skipValueParser) {
                parsedValue = column.valueParser(value, row, column, apiRef);
            }
            let editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            let newProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, editingState[id][field], {
                value: parsedValue,
                changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'
            });
            if (column.preProcessEditCellProps) {
                const hasChanged = value !== editingState[id][field].value;
                newProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newProps, {
                    isProcessingProps: true
                });
                updateOrDeleteFieldState(id, field, newProps);
                newProps = await Promise.resolve(column.preProcessEditCellProps({
                    id,
                    row,
                    props: newProps,
                    hasChanged
                }));
            }
            // Check again if the cell is in edit mode because the user may have
            // discarded the changes while the props were being processed.
            if (apiRef.current.getCellMode(id, field) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View) {
                return false;
            }
            editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            newProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newProps, {
                isProcessingProps: false
            });
            // We don't update the value with the one coming from the props pre-processing
            // because when the promise resolves it may be already outdated. The only
            // exception to this rule is when there's no pre-processing.
            newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
            updateOrDeleteFieldState(id, field, newProps);
            editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            return !editingState[id]?.[field]?.error;
        }
    }["useGridCellEditing.useCallback[setCellEditingEditCellValue]"], [
        apiRef,
        throwIfNotEditable,
        throwIfNotInMode,
        updateOrDeleteFieldState
    ]);
    const getRowWithUpdatedValuesFromCellEditing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCellEditing.useCallback[getRowWithUpdatedValuesFromCellEditing]": (id, field)=>{
            const column = apiRef.current.getColumn(field);
            const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            const row = apiRef.current.getRow(id);
            if (!editingState[id] || !editingState[id][field]) {
                return apiRef.current.getRow(id);
            }
            const { value } = editingState[id][field];
            return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, row, {
                [field]: value
            });
        }
    }["useGridCellEditing.useCallback[getRowWithUpdatedValuesFromCellEditing]"], [
        apiRef
    ]);
    const editingApi = {
        getCellMode,
        startCellEditMode,
        stopCellEditMode
    };
    const editingPrivateApi = {
        setCellEditingEditCellValue,
        getRowWithUpdatedValuesFromCellEditing
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, editingApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, editingPrivateApi, 'private');
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridCellEditing.useEffect": ()=>{
            if (cellModesModelProp) {
                updateCellModesModel(cellModesModelProp);
            }
        }
    }["useGridCellEditing.useEffect"], [
        cellModesModelProp,
        updateCellModesModel
    ]);
    // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useGridCellEditing.useEnhancedEffect": ()=>{
            const idToIdLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsDataRowIdToIdLookupSelector"])(apiRef);
            // Update the ref here because updateStateToStopCellEditMode may change it later
            const copyOfPrevCellModes = prevCellModesModel.current;
            prevCellModesModel.current = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepClone"])(cellModesModel); // Do a deep-clone because the attributes might be changed later
            Object.entries(cellModesModel).forEach({
                "useGridCellEditing.useEnhancedEffect": ([id, fields])=>{
                    Object.entries(fields).forEach({
                        "useGridCellEditing.useEnhancedEffect": ([field, params])=>{
                            const prevMode = copyOfPrevCellModes[id]?.[field]?.mode || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View;
                            const originalId = idToIdLookup[id] ?? id;
                            if (params.mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit && prevMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View) {
                                updateStateToStartCellEditMode((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                                    id: originalId,
                                    field
                                }, params));
                            } else if (params.mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].View && prevMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit) {
                                updateStateToStopCellEditMode((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                                    id: originalId,
                                    field
                                }, params));
                            }
                        }
                    }["useGridCellEditing.useEnhancedEffect"]);
                }
            }["useGridCellEditing.useEnhancedEffect"]);
        }
    }["useGridCellEditing.useEnhancedEffect"], [
        apiRef,
        cellModesModel,
        updateStateToStartCellEditMode,
        updateStateToStopCellEditMode
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRowEditing": (()=>useGridRowEditing)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridEditRowModel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/editing/gridEditingSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/params/gridRowParams.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/keyboardUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridActionsColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridActionsColDef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js [app-client] (ecmascript) <export default as unstable_useEventCallback>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/editing/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/warning/warning.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js [app-client] (ecmascript) <export default as unstable_useEnhancedEffect>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
;
;
;
const _excluded = [
    "id"
], _excluded2 = [
    "id"
];
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const useGridRowEditing = (apiRef, props)=>{
    const [rowModesModel, setRowModesModel] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState({});
    const rowModesModelRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(rowModesModel);
    const prevRowModesModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef({});
    const focusTimeout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const nextFocusedCell = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const { processRowUpdate, onProcessRowUpdateError, rowModesModel: rowModesModelProp, onRowModesModelChange } = props;
    const runIfEditModeIsRow = (callback)=>(...args)=>{
            if (props.editMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridEditModes"].Row) {
                callback(...args);
            }
        };
    const throwIfNotEditable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[throwIfNotEditable]": (id, field)=>{
            const params = apiRef.current.getCellParams(id, field);
            if (!apiRef.current.isCellEditable(params)) {
                throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);
            }
        }
    }["useGridRowEditing.useCallback[throwIfNotEditable]"], [
        apiRef
    ]);
    const throwIfNotInMode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[throwIfNotInMode]": (id, mode)=>{
            if (apiRef.current.getRowMode(id) !== mode) {
                throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);
            }
        }
    }["useGridRowEditing.useCallback[throwIfNotInMode]"], [
        apiRef
    ]);
    const hasFieldsWithErrors = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[hasFieldsWithErrors]": (rowId)=>{
            const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            return Object.values(editingState[rowId]).some({
                "useGridRowEditing.useCallback[hasFieldsWithErrors]": (fieldProps)=>fieldProps.error
            }["useGridRowEditing.useCallback[hasFieldsWithErrors]"]);
        }
    }["useGridRowEditing.useCallback[hasFieldsWithErrors]"], [
        apiRef
    ]);
    const handleCellDoubleClick = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[handleCellDoubleClick]": (params, event)=>{
            if (!params.isEditable) {
                return;
            }
            if (apiRef.current.getRowMode(params.id) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit) {
                return;
            }
            const rowParams = apiRef.current.getRowParams(params.id);
            const newParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, rowParams, {
                field: params.field,
                reason: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStartReasons"].cellDoubleClick
            });
            apiRef.current.publishEvent('rowEditStart', newParams, event);
        }
    }["useGridRowEditing.useCallback[handleCellDoubleClick]"], [
        apiRef
    ]);
    const handleCellFocusIn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[handleCellFocusIn]": (params)=>{
            nextFocusedCell.current = params;
        }
    }["useGridRowEditing.useCallback[handleCellFocusIn]"], []);
    const handleCellFocusOut = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[handleCellFocusOut]": (params, event)=>{
            if (!params.isEditable) {
                return;
            }
            if (apiRef.current.getRowMode(params.id) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View) {
                return;
            }
            // The mechanism to detect if we can stop editing a row is different from
            // the cell editing. Instead of triggering it when clicking outside a cell,
            // we must check if another cell in the same row was not clicked. To achieve
            // that, first we keep track of all cells that gained focus. When a cell loses
            // focus we check if the next cell that received focus is from a different row.
            nextFocusedCell.current = null;
            focusTimeout.current = setTimeout({
                "useGridRowEditing.useCallback[handleCellFocusOut]": ()=>{
                    if (nextFocusedCell.current?.id !== params.id) {
                        // The row might have been deleted during the click
                        if (!apiRef.current.getRow(params.id)) {
                            return;
                        }
                        // The row may already changed its mode
                        if (apiRef.current.getRowMode(params.id) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View) {
                            return;
                        }
                        if (hasFieldsWithErrors(params.id)) {
                            return;
                        }
                        const rowParams = apiRef.current.getRowParams(params.id);
                        const newParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, rowParams, {
                            field: params.field,
                            reason: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].rowFocusOut
                        });
                        apiRef.current.publishEvent('rowEditStop', newParams, event);
                    }
                }
            }["useGridRowEditing.useCallback[handleCellFocusOut]"]);
        }
    }["useGridRowEditing.useCallback[handleCellFocusOut]"], [
        apiRef,
        hasFieldsWithErrors
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowEditing.useEffect": ()=>{
            return ({
                "useGridRowEditing.useEffect": ()=>{
                    clearTimeout(focusTimeout.current);
                }
            })["useGridRowEditing.useEffect"];
        }
    }["useGridRowEditing.useEffect"], []);
    const handleCellKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[handleCellKeyDown]": (params, event)=>{
            if (params.cellMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit) {
                // Wait until IME is settled for Asian languages like Japanese and Chinese
                // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.
                if (event.which === 229) {
                    return;
                }
                let reason;
                if (event.key === 'Escape') {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].escapeKeyDown;
                } else if (event.key === 'Enter') {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].enterKeyDown;
                } else if (event.key === 'Tab') {
                    const columnFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnFieldsSelector"])(apiRef).filter({
                        "useGridRowEditing.useCallback[handleCellKeyDown].columnFields": (field)=>{
                            const column = apiRef.current.getColumn(field);
                            if (column.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridActionsColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ACTIONS_COLUMN_TYPE"]) {
                                return true;
                            }
                            return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));
                        }
                    }["useGridRowEditing.useCallback[handleCellKeyDown].columnFields"]);
                    if (event.shiftKey) {
                        if (params.field === columnFields[0]) {
                            // Exit if user pressed Shift+Tab on the first field
                            reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].shiftTabKeyDown;
                        }
                    } else if (params.field === columnFields[columnFields.length - 1]) {
                        // Exit if user pressed Tab on the last field
                        reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].tabKeyDown;
                    }
                    // Always prevent going to the next element in the tab sequence because the focus is
                    // handled manually to support edit components rendered inside Portals
                    event.preventDefault();
                    if (!reason) {
                        const index = columnFields.findIndex({
                            "useGridRowEditing.useCallback[handleCellKeyDown].index": (field)=>field === params.field
                        }["useGridRowEditing.useCallback[handleCellKeyDown].index"]);
                        const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];
                        apiRef.current.setCellFocus(params.id, nextFieldToFocus);
                    }
                }
                if (reason) {
                    if (reason !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].escapeKeyDown && hasFieldsWithErrors(params.id)) {
                        return;
                    }
                    const newParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, apiRef.current.getRowParams(params.id), {
                        reason,
                        field: params.field
                    });
                    apiRef.current.publishEvent('rowEditStop', newParams, event);
                }
            } else if (params.isEditable) {
                let reason;
                const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {
                    event,
                    cellParams: params,
                    editMode: 'row'
                });
                if (!canStartEditing) {
                    return;
                }
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPrintableKey"])(event)) {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStartReasons"].printableKeyDown;
                } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPasteShortcut"])(event)) {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStartReasons"].printableKeyDown;
                } else if (event.key === 'Enter') {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStartReasons"].enterKeyDown;
                } else if (event.key === 'Backspace' || event.key === 'Delete') {
                    reason = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStartReasons"].deleteKeyDown;
                }
                if (reason) {
                    const rowParams = apiRef.current.getRowParams(params.id);
                    const newParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, rowParams, {
                        field: params.field,
                        reason
                    });
                    apiRef.current.publishEvent('rowEditStart', newParams, event);
                }
            }
        }
    }["useGridRowEditing.useCallback[handleCellKeyDown]"], [
        apiRef,
        hasFieldsWithErrors
    ]);
    const handleRowEditStart = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[handleRowEditStart]": (params)=>{
            const { id, field, reason } = params;
            const startRowEditModeParams = {
                id,
                fieldToFocus: field
            };
            if (reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStartReasons"].printableKeyDown || reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStartReasons"].deleteKeyDown) {
                startRowEditModeParams.deleteValue = !!field;
            }
            apiRef.current.startRowEditMode(startRowEditModeParams);
        }
    }["useGridRowEditing.useCallback[handleRowEditStart]"], [
        apiRef
    ]);
    const handleRowEditStop = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[handleRowEditStop]": (params)=>{
            const { id, reason, field } = params;
            apiRef.current.runPendingEditCellValueMutation(id);
            let cellToFocusAfter;
            if (reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].enterKeyDown) {
                cellToFocusAfter = 'below';
            } else if (reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].tabKeyDown) {
                cellToFocusAfter = 'right';
            } else if (reason === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$params$2f$gridRowParams$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowEditStopReasons"].shiftTabKeyDown) {
                cellToFocusAfter = 'left';
            }
            const ignoreModifications = reason === 'escapeKeyDown';
            apiRef.current.stopRowEditMode({
                id,
                ignoreModifications,
                field,
                cellToFocusAfter
            });
        }
    }["useGridRowEditing.useCallback[handleRowEditStop]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'rowEditStart', props.onRowEditStart);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'rowEditStop', props.onRowEditStop);
    const getRowMode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[getRowMode]": (id)=>{
            if (props.editMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridEditModes"].Cell) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View;
            }
            const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;
            return isEditing ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View;
        }
    }["useGridRowEditing.useCallback[getRowMode]"], [
        apiRef,
        props.editMode
    ]);
    const updateRowModesModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridRowEditing.useEventCallback[updateRowModesModel]": (newModel)=>{
            const isNewModelDifferentFromProp = newModel !== props.rowModesModel;
            if (onRowModesModelChange && isNewModelDifferentFromProp) {
                onRowModesModelChange(newModel, {
                    api: apiRef.current
                });
            }
            if (props.rowModesModel && isNewModelDifferentFromProp) {
                return; // The prop always win
            }
            setRowModesModel(newModel);
            rowModesModelRef.current = newModel;
            apiRef.current.publishEvent('rowModesModelChange', newModel);
        }
    }["useGridRowEditing.useEventCallback[updateRowModesModel]"]);
    const updateRowInRowModesModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[updateRowInRowModesModel]": (id, newProps)=>{
            const newModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, rowModesModelRef.current);
            if (newProps !== null) {
                newModel[id] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newProps);
            } else {
                delete newModel[id];
            }
            updateRowModesModel(newModel);
        }
    }["useGridRowEditing.useCallback[updateRowInRowModesModel]"], [
        updateRowModesModel
    ]);
    const updateOrDeleteRowState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[updateOrDeleteRowState]": (id, newProps)=>{
            apiRef.current.setState({
                "useGridRowEditing.useCallback[updateOrDeleteRowState]": (state)=>{
                    const newEditingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.editRows);
                    if (newProps !== null) {
                        newEditingState[id] = newProps;
                    } else {
                        delete newEditingState[id];
                    }
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        editRows: newEditingState
                    });
                }
            }["useGridRowEditing.useCallback[updateOrDeleteRowState]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridRowEditing.useCallback[updateOrDeleteRowState]"], [
        apiRef
    ]);
    const updateOrDeleteFieldState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[updateOrDeleteFieldState]": (id, field, newProps)=>{
            apiRef.current.setState({
                "useGridRowEditing.useCallback[updateOrDeleteFieldState]": (state)=>{
                    const newEditingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.editRows);
                    if (newProps !== null) {
                        newEditingState[id] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newEditingState[id], {
                            [field]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newProps)
                        });
                    } else {
                        delete newEditingState[id][field];
                        if (Object.keys(newEditingState[id]).length === 0) {
                            delete newEditingState[id];
                        }
                    }
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        editRows: newEditingState
                    });
                }
            }["useGridRowEditing.useCallback[updateOrDeleteFieldState]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridRowEditing.useCallback[updateOrDeleteFieldState]"], [
        apiRef
    ]);
    const startRowEditMode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[startRowEditMode]": (params)=>{
            const { id } = params, other = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(params, _excluded);
            throwIfNotInMode(id, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View);
            updateRowInRowModesModel(id, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit
            }, other));
        }
    }["useGridRowEditing.useCallback[startRowEditMode]"], [
        throwIfNotInMode,
        updateRowInRowModesModel
    ]);
    const updateStateToStartRowEditMode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridRowEditing.useEventCallback[updateStateToStartRowEditMode]": (params)=>{
            const { id, fieldToFocus, deleteValue, initialValue } = params;
            const columnFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnFieldsSelector"])(apiRef);
            const newProps = columnFields.reduce({
                "useGridRowEditing.useEventCallback[updateStateToStartRowEditMode].newProps": (acc, field)=>{
                    const cellParams = apiRef.current.getCellParams(id, field);
                    if (!cellParams.isEditable) {
                        return acc;
                    }
                    const column = apiRef.current.getColumn(field);
                    let newValue = apiRef.current.getCellValue(id, field);
                    if (fieldToFocus === field && (deleteValue || initialValue)) {
                        if (deleteValue) {
                            newValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultCellValue"])(column);
                        } else if (initialValue) {
                            newValue = initialValue;
                        }
                    }
                    acc[field] = {
                        value: newValue,
                        error: false,
                        isProcessingProps: !!column.preProcessEditCellProps && deleteValue
                    };
                    return acc;
                }
            }["useGridRowEditing.useEventCallback[updateStateToStartRowEditMode].newProps"], {});
            updateOrDeleteRowState(id, newProps);
            if (fieldToFocus) {
                apiRef.current.setCellFocus(id, fieldToFocus);
            }
            columnFields.filter({
                "useGridRowEditing.useEventCallback[updateStateToStartRowEditMode]": (field)=>!!apiRef.current.getColumn(field).preProcessEditCellProps && deleteValue
            }["useGridRowEditing.useEventCallback[updateStateToStartRowEditMode]"]).forEach({
                "useGridRowEditing.useEventCallback[updateStateToStartRowEditMode]": (field)=>{
                    const column = apiRef.current.getColumn(field);
                    const value = apiRef.current.getCellValue(id, field);
                    const newValue = deleteValue ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultCellValue"])(column) : initialValue ?? value;
                    Promise.resolve(column.preProcessEditCellProps({
                        id,
                        row: apiRef.current.getRow(id),
                        props: newProps[field],
                        hasChanged: newValue !== value
                    })).then({
                        "useGridRowEditing.useEventCallback[updateStateToStartRowEditMode]": (processedProps)=>{
                            // Check if still in edit mode before updating
                            if (apiRef.current.getRowMode(id) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit) {
                                const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
                                updateOrDeleteFieldState(id, field, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, processedProps, {
                                    value: editingState[id][field].value,
                                    isProcessingProps: false
                                }));
                            }
                        }
                    }["useGridRowEditing.useEventCallback[updateStateToStartRowEditMode]"]);
                }
            }["useGridRowEditing.useEventCallback[updateStateToStartRowEditMode]"]);
        }
    }["useGridRowEditing.useEventCallback[updateStateToStartRowEditMode]"]);
    const stopRowEditMode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[stopRowEditMode]": (params)=>{
            const { id } = params, other = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(params, _excluded2);
            throwIfNotInMode(id, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit);
            updateRowInRowModesModel(id, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View
            }, other));
        }
    }["useGridRowEditing.useCallback[stopRowEditMode]"], [
        throwIfNotInMode,
        updateRowInRowModesModel
    ]);
    const updateStateToStopRowEditMode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridRowEditing.useEventCallback[updateStateToStopRowEditMode]": (params)=>{
            const { id, ignoreModifications, field: focusedField, cellToFocusAfter = 'none' } = params;
            apiRef.current.runPendingEditCellValueMutation(id);
            const finishRowEditMode = {
                "useGridRowEditing.useEventCallback[updateStateToStopRowEditMode].finishRowEditMode": ()=>{
                    if (cellToFocusAfter !== 'none' && focusedField) {
                        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);
                    }
                    updateOrDeleteRowState(id, null);
                    updateRowInRowModesModel(id, null);
                }
            }["useGridRowEditing.useEventCallback[updateStateToStopRowEditMode].finishRowEditMode"];
            if (ignoreModifications) {
                finishRowEditMode();
                return;
            }
            const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            const row = apiRef.current.getRow(id);
            const isSomeFieldProcessingProps = Object.values(editingState[id]).some({
                "useGridRowEditing.useEventCallback[updateStateToStopRowEditMode].isSomeFieldProcessingProps": (fieldProps)=>fieldProps.isProcessingProps
            }["useGridRowEditing.useEventCallback[updateStateToStopRowEditMode].isSomeFieldProcessingProps"]);
            if (isSomeFieldProcessingProps) {
                prevRowModesModel.current[id].mode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit;
                return;
            }
            if (hasFieldsWithErrors(id)) {
                prevRowModesModel.current[id].mode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit;
                // Revert the mode in the rowModesModel prop back to "edit"
                updateRowInRowModesModel(id, {
                    mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit
                });
                return;
            }
            const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
            if (processRowUpdate) {
                const handleError = {
                    "useGridRowEditing.useEventCallback[updateStateToStopRowEditMode].handleError": (errorThrown)=>{
                        prevRowModesModel.current[id].mode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit;
                        // Revert the mode in the rowModesModel prop back to "edit"
                        updateRowInRowModesModel(id, {
                            mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit
                        });
                        if (onProcessRowUpdateError) {
                            onProcessRowUpdateError(errorThrown);
                        } else if ("TURBOPACK compile-time truthy", 1) {
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])([
                                'MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.',
                                'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.',
                                'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'
                            ], 'error');
                        }
                    }
                }["useGridRowEditing.useEventCallback[updateStateToStopRowEditMode].handleError"];
                try {
                    Promise.resolve(processRowUpdate(rowUpdate, row, {
                        rowId: id
                    })).then({
                        "useGridRowEditing.useEventCallback[updateStateToStopRowEditMode]": (finalRowUpdate)=>{
                            apiRef.current.updateRows([
                                finalRowUpdate
                            ]);
                            finishRowEditMode();
                        }
                    }["useGridRowEditing.useEventCallback[updateStateToStopRowEditMode]"]).catch(handleError);
                } catch (errorThrown) {
                    handleError(errorThrown);
                }
            } else {
                apiRef.current.updateRows([
                    rowUpdate
                ]);
                finishRowEditMode();
            }
        }
    }["useGridRowEditing.useEventCallback[updateStateToStopRowEditMode]"]);
    const setRowEditingEditCellValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[setRowEditingEditCellValue]": (params)=>{
            const { id, field, value, debounceMs, unstable_skipValueParser: skipValueParser } = params;
            throwIfNotEditable(id, field);
            const column = apiRef.current.getColumn(field);
            const row = apiRef.current.getRow(id);
            let parsedValue = value;
            if (column.valueParser && !skipValueParser) {
                parsedValue = column.valueParser(value, row, column, apiRef);
            }
            let editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            let newProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, editingState[id][field], {
                value: parsedValue,
                changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'
            });
            if (!column.preProcessEditCellProps) {
                updateOrDeleteFieldState(id, field, newProps);
            }
            return new Promise({
                "useGridRowEditing.useCallback[setRowEditingEditCellValue]": (resolve)=>{
                    const promises = [];
                    if (column.preProcessEditCellProps) {
                        const hasChanged = newProps.value !== editingState[id][field].value;
                        newProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newProps, {
                            isProcessingProps: true
                        });
                        updateOrDeleteFieldState(id, field, newProps);
                        const _editingState$id = editingState[id], otherFieldsProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_editingState$id, [
                            field
                        ].map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]));
                        const promise = Promise.resolve(column.preProcessEditCellProps({
                            id,
                            row,
                            props: newProps,
                            hasChanged,
                            otherFieldsProps
                        })).then({
                            "useGridRowEditing.useCallback[setRowEditingEditCellValue].promise": (processedProps)=>{
                                // Check again if the row is in edit mode because the user may have
                                // discarded the changes while the props were being processed.
                                if (apiRef.current.getRowMode(id) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View) {
                                    resolve(false);
                                    return;
                                }
                                editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
                                processedProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, processedProps, {
                                    isProcessingProps: false
                                });
                                // We don't reuse the value from the props pre-processing because when the
                                // promise resolves it may be already outdated. The only exception to this rule
                                // is when there's no pre-processing.
                                processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
                                updateOrDeleteFieldState(id, field, processedProps);
                            }
                        }["useGridRowEditing.useCallback[setRowEditingEditCellValue].promise"]);
                        promises.push(promise);
                    }
                    Object.entries(editingState[id]).forEach({
                        "useGridRowEditing.useCallback[setRowEditingEditCellValue]": ([thisField, fieldProps])=>{
                            if (thisField === field) {
                                return;
                            }
                            const fieldColumn = apiRef.current.getColumn(thisField);
                            if (!fieldColumn.preProcessEditCellProps) {
                                return;
                            }
                            fieldProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, fieldProps, {
                                isProcessingProps: true
                            });
                            updateOrDeleteFieldState(id, thisField, fieldProps);
                            editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
                            const _editingState$id2 = editingState[id], otherFieldsProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_editingState$id2, [
                                thisField
                            ].map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]));
                            const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({
                                id,
                                row,
                                props: fieldProps,
                                hasChanged: false,
                                otherFieldsProps
                            })).then({
                                "useGridRowEditing.useCallback[setRowEditingEditCellValue].promise": (processedProps)=>{
                                    // Check again if the row is in edit mode because the user may have
                                    // discarded the changes while the props were being processed.
                                    if (apiRef.current.getRowMode(id) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View) {
                                        resolve(false);
                                        return;
                                    }
                                    processedProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, processedProps, {
                                        isProcessingProps: false
                                    });
                                    updateOrDeleteFieldState(id, thisField, processedProps);
                                }
                            }["useGridRowEditing.useCallback[setRowEditingEditCellValue].promise"]);
                            promises.push(promise);
                        }
                    }["useGridRowEditing.useCallback[setRowEditingEditCellValue]"]);
                    Promise.all(promises).then({
                        "useGridRowEditing.useCallback[setRowEditingEditCellValue]": ()=>{
                            if (apiRef.current.getRowMode(id) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit) {
                                editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
                                resolve(!editingState[id][field].error);
                            } else {
                                resolve(false);
                            }
                        }
                    }["useGridRowEditing.useCallback[setRowEditingEditCellValue]"]);
                }
            }["useGridRowEditing.useCallback[setRowEditingEditCellValue]"]);
        }
    }["useGridRowEditing.useCallback[setRowEditingEditCellValue]"], [
        apiRef,
        throwIfNotEditable,
        updateOrDeleteFieldState
    ]);
    const getRowWithUpdatedValuesFromRowEditing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowEditing.useCallback[getRowWithUpdatedValuesFromRowEditing]": (id)=>{
            const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            const row = apiRef.current.getRow(id);
            if (!editingState[id]) {
                return apiRef.current.getRow(id);
            }
            let rowUpdate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, row);
            Object.entries(editingState[id]).forEach({
                "useGridRowEditing.useCallback[getRowWithUpdatedValuesFromRowEditing]": ([field, fieldProps])=>{
                    const column = apiRef.current.getColumn(field);
                    if (column.valueSetter) {
                        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);
                    } else {
                        rowUpdate[field] = fieldProps.value;
                    }
                }
            }["useGridRowEditing.useCallback[getRowWithUpdatedValuesFromRowEditing]"]);
            return rowUpdate;
        }
    }["useGridRowEditing.useCallback[getRowWithUpdatedValuesFromRowEditing]"], [
        apiRef
    ]);
    const editingApi = {
        getRowMode,
        startRowEditMode,
        stopRowEditMode
    };
    const editingPrivateApi = {
        setRowEditingEditCellValue,
        getRowWithUpdatedValuesFromRowEditing
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, editingApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, editingPrivateApi, 'private');
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowEditing.useEffect": ()=>{
            if (rowModesModelProp) {
                updateRowModesModel(rowModesModelProp);
            }
        }
    }["useGridRowEditing.useEffect"], [
        rowModesModelProp,
        updateRowModesModel
    ]);
    // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useGridRowEditing.useEnhancedEffect": ()=>{
            const idToIdLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsDataRowIdToIdLookupSelector"])(apiRef);
            // Update the ref here because updateStateToStopRowEditMode may change it later
            const copyOfPrevRowModesModel = prevRowModesModel.current;
            prevRowModesModel.current = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deepClone"])(rowModesModel); // Do a deep-clone because the attributes might be changed later
            const ids = new Set([
                ...Object.keys(rowModesModel),
                ...Object.keys(copyOfPrevRowModesModel)
            ]);
            Array.from(ids).forEach({
                "useGridRowEditing.useEnhancedEffect": (id)=>{
                    const params = rowModesModel[id] ?? {
                        mode: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View
                    };
                    const prevMode = copyOfPrevRowModesModel[id]?.mode || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View;
                    const originalId = idToIdLookup[id] ?? id;
                    if (params.mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit && prevMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View) {
                        updateStateToStartRowEditMode((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                            id: originalId
                        }, params));
                    } else if (params.mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].View && prevMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridRowModes"].Edit) {
                        updateStateToStopRowEditMode((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                            id: originalId
                        }, params));
                    }
                }
            }["useGridRowEditing.useEnhancedEffect"]);
        }
    }["useGridRowEditing.useEnhancedEffect"], [
        apiRef,
        rowModesModel,
        updateStateToStartRowEditMode,
        updateStateToStopRowEditMode
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/editing/useGridEditing.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "editingStateInitializer": (()=>editingStateInitializer),
    "useGridEditing": (()=>useGridEditing)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$useGridCellEditing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$useGridRowEditing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridEditRowModel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/editing/gridEditingSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
const editingStateInitializer = (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        editRows: {}
    });
const useGridEditing = (apiRef, props)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$useGridCellEditing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridCellEditing"])(apiRef, props);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$useGridRowEditing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRowEditing"])(apiRef, props);
    const debounceMap = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef({});
    const { isCellEditable: isCellEditableProp } = props;
    const isCellEditable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridEditing.useCallback[isCellEditable]": (params)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAutogeneratedRowNode"])(params.rowNode)) {
                return false;
            }
            if (!params.colDef.editable) {
                return false;
            }
            if (!params.colDef.renderEditCell) {
                return false;
            }
            if (isCellEditableProp) {
                return isCellEditableProp(params);
            }
            return true;
        }
    }["useGridEditing.useCallback[isCellEditable]"], [
        isCellEditableProp
    ]);
    const maybeDebounce = (id, field, debounceMs, callback)=>{
        if (!debounceMs) {
            callback();
            return;
        }
        if (!debounceMap.current[id]) {
            debounceMap.current[id] = {};
        }
        if (debounceMap.current[id][field]) {
            const [timeout] = debounceMap.current[id][field];
            clearTimeout(timeout);
        }
        // To run the callback immediately without waiting the timeout
        const runImmediately = ()=>{
            const [timeout] = debounceMap.current[id][field];
            clearTimeout(timeout);
            callback();
            delete debounceMap.current[id][field];
        };
        const timeout = setTimeout(()=>{
            callback();
            delete debounceMap.current[id][field];
        }, debounceMs);
        debounceMap.current[id][field] = [
            timeout,
            runImmediately
        ];
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridEditing.useEffect": ()=>{
            const debounces = debounceMap.current;
            return ({
                "useGridEditing.useEffect": ()=>{
                    Object.entries(debounces).forEach({
                        "useGridEditing.useEffect": ([id, fields])=>{
                            Object.keys(fields).forEach({
                                "useGridEditing.useEffect": (field)=>{
                                    const [timeout] = debounces[id][field];
                                    clearTimeout(timeout);
                                    delete debounces[id][field];
                                }
                            }["useGridEditing.useEffect"]);
                        }
                    }["useGridEditing.useEffect"]);
                }
            })["useGridEditing.useEffect"];
        }
    }["useGridEditing.useEffect"], []);
    const runPendingEditCellValueMutation = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridEditing.useCallback[runPendingEditCellValueMutation]": (id, field)=>{
            if (!debounceMap.current[id]) {
                return;
            }
            if (!field) {
                Object.keys(debounceMap.current[id]).forEach({
                    "useGridEditing.useCallback[runPendingEditCellValueMutation]": (debouncedField)=>{
                        const [, runCallback] = debounceMap.current[id][debouncedField];
                        runCallback();
                    }
                }["useGridEditing.useCallback[runPendingEditCellValueMutation]"]);
            } else if (debounceMap.current[id][field]) {
                const [, runCallback] = debounceMap.current[id][field];
                runCallback();
            }
        }
    }["useGridEditing.useCallback[runPendingEditCellValueMutation]"], []);
    const setEditCellValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridEditing.useCallback[setEditCellValue]": (params)=>{
            const { id, field, debounceMs } = params;
            return new Promise({
                "useGridEditing.useCallback[setEditCellValue]": (resolve)=>{
                    maybeDebounce(id, field, debounceMs, {
                        "useGridEditing.useCallback[setEditCellValue]": async ()=>{
                            const setEditCellValueToCall = props.editMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridEditModes"].Row ? apiRef.current.setRowEditingEditCellValue : apiRef.current.setCellEditingEditCellValue;
                            // Check if the cell is in edit mode
                            // By the time this callback runs the user may have cancelled the editing
                            if (apiRef.current.getCellMode(id, field) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit) {
                                const result = await setEditCellValueToCall(params);
                                resolve(result);
                            }
                        }
                    }["useGridEditing.useCallback[setEditCellValue]"]);
                }
            }["useGridEditing.useCallback[setEditCellValue]"]);
        }
    }["useGridEditing.useCallback[setEditCellValue]"], [
        apiRef,
        props.editMode
    ]);
    const getRowWithUpdatedValues = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridEditing.useCallback[getRowWithUpdatedValues]": (id, field)=>{
            return props.editMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridEditModes"].Cell ? apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
        }
    }["useGridEditing.useCallback[getRowWithUpdatedValues]"], [
        apiRef,
        props.editMode
    ]);
    const getEditCellMeta = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridEditing.useCallback[getEditCellMeta]": (id, field)=>{
            const editingState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$editing$2f$gridEditingSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridEditRowsStateSelector"])(apiRef.current.state);
            return editingState[id]?.[field] ?? null;
        }
    }["useGridEditing.useCallback[getEditCellMeta]"], [
        apiRef
    ]);
    const editingSharedApi = {
        isCellEditable,
        setEditCellValue,
        getRowWithUpdatedValues,
        unstable_getEditCellMeta: getEditCellMeta
    };
    const editingSharedPrivateApi = {
        runPendingEditCellValueMutation
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, editingSharedApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, editingSharedPrivateApi, 'private');
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "focusStateInitializer": (()=>focusStateInitializer),
    "useGridFocus": (()=>useGridFocus)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/keyboardUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/constants/gridClasses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js [app-client] (ecmascript) <export default as unstable_useEventCallback>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js [app-client] (ecmascript) <export default as unstable_ownerDocument>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
const focusStateInitializer = (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        focus: {
            cell: null,
            columnHeader: null,
            columnHeaderFilter: null,
            columnGroupHeader: null
        },
        tabIndex: {
            cell: null,
            columnHeader: null,
            columnHeaderFilter: null,
            columnGroupHeader: null
        }
    });
const useGridFocus = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridFocus');
    const lastClickedCell = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const hasRootReference = apiRef.current.rootElementRef.current !== null;
    const publishCellFocusOut = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[publishCellFocusOut]": (cell, event)=>{
            if (cell) {
                // The row might have been deleted
                if (apiRef.current.getRow(cell.id)) {
                    apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);
                }
            }
        }
    }["useGridFocus.useCallback[publishCellFocusOut]"], [
        apiRef
    ]);
    const setCellFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[setCellFocus]": (id, field)=>{
            const focusedCell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            if (focusedCell?.id === id && focusedCell?.field === field) {
                return;
            }
            apiRef.current.setState({
                "useGridFocus.useCallback[setCellFocus]": (state)=>{
                    logger.debug(`Focusing on cell with id=${id} and field=${field}`);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        tabIndex: {
                            cell: {
                                id,
                                field
                            },
                            columnHeader: null,
                            columnHeaderFilter: null,
                            columnGroupHeader: null
                        },
                        focus: {
                            cell: {
                                id,
                                field
                            },
                            columnHeader: null,
                            columnHeaderFilter: null,
                            columnGroupHeader: null
                        }
                    });
                }
            }["useGridFocus.useCallback[setCellFocus]"]);
            apiRef.current.forceUpdate();
            // The row might have been deleted
            if (!apiRef.current.getRow(id)) {
                return;
            }
            if (focusedCell) {
                // There's a focused cell but another cell was clicked
                // Publishes an event to notify that the focus was lost
                publishCellFocusOut(focusedCell, {});
            }
            apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));
        }
    }["useGridFocus.useCallback[setCellFocus]"], [
        apiRef,
        logger,
        publishCellFocusOut
    ]);
    const setColumnHeaderFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[setColumnHeaderFocus]": (field, event = {})=>{
            const cell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            publishCellFocusOut(cell, event);
            apiRef.current.setState({
                "useGridFocus.useCallback[setColumnHeaderFocus]": (state)=>{
                    logger.debug(`Focusing on column header with colIndex=${field}`);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        tabIndex: {
                            columnHeader: {
                                field
                            },
                            columnHeaderFilter: null,
                            cell: null,
                            columnGroupHeader: null
                        },
                        focus: {
                            columnHeader: {
                                field
                            },
                            columnHeaderFilter: null,
                            cell: null,
                            columnGroupHeader: null
                        }
                    });
                }
            }["useGridFocus.useCallback[setColumnHeaderFocus]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridFocus.useCallback[setColumnHeaderFocus]"], [
        apiRef,
        logger,
        publishCellFocusOut
    ]);
    const setColumnHeaderFilterFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[setColumnHeaderFilterFocus]": (field, event = {})=>{
            const cell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            publishCellFocusOut(cell, event);
            apiRef.current.setState({
                "useGridFocus.useCallback[setColumnHeaderFilterFocus]": (state)=>{
                    logger.debug(`Focusing on column header filter with colIndex=${field}`);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        tabIndex: {
                            columnHeader: null,
                            columnHeaderFilter: {
                                field
                            },
                            cell: null,
                            columnGroupHeader: null
                        },
                        focus: {
                            columnHeader: null,
                            columnHeaderFilter: {
                                field
                            },
                            cell: null,
                            columnGroupHeader: null
                        }
                    });
                }
            }["useGridFocus.useCallback[setColumnHeaderFilterFocus]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridFocus.useCallback[setColumnHeaderFilterFocus]"], [
        apiRef,
        logger,
        publishCellFocusOut
    ]);
    const setColumnGroupHeaderFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[setColumnGroupHeaderFocus]": (field, depth, event = {})=>{
            const cell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            if (cell) {
                apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);
            }
            apiRef.current.setState({
                "useGridFocus.useCallback[setColumnGroupHeaderFocus]": (state)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        tabIndex: {
                            columnGroupHeader: {
                                field,
                                depth
                            },
                            columnHeader: null,
                            columnHeaderFilter: null,
                            cell: null
                        },
                        focus: {
                            columnGroupHeader: {
                                field,
                                depth
                            },
                            columnHeader: null,
                            columnHeaderFilter: null,
                            cell: null
                        }
                    });
                }
            }["useGridFocus.useCallback[setColumnGroupHeaderFocus]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridFocus.useCallback[setColumnGroupHeaderFocus]"], [
        apiRef
    ]);
    const getColumnGroupHeaderFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[getColumnGroupHeaderFocus]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusColumnGroupHeaderSelector"])(apiRef)
    }["useGridFocus.useCallback[getColumnGroupHeaderFocus]"], [
        apiRef
    ]);
    const moveFocusToRelativeCell = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[moveFocusToRelativeCell]": (id, field, direction)=>{
            let columnIndexToFocus = apiRef.current.getColumnIndex(field);
            const visibleColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef);
            const currentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getVisibleRows"])(apiRef, {
                pagination: props.pagination,
                paginationMode: props.paginationMode
            });
            const pinnedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPinnedRowsSelector"])(apiRef);
            // Include pinned rows as well
            const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);
            let rowIndexToFocus = currentPageRows.findIndex({
                "useGridFocus.useCallback[moveFocusToRelativeCell].rowIndexToFocus": (row)=>row.id === id
            }["useGridFocus.useCallback[moveFocusToRelativeCell].rowIndexToFocus"]);
            if (direction === 'right') {
                columnIndexToFocus += 1;
            } else if (direction === 'left') {
                columnIndexToFocus -= 1;
            } else {
                rowIndexToFocus += 1;
            }
            if (columnIndexToFocus >= visibleColumns.length) {
                // Go to next row if we are after the last column
                rowIndexToFocus += 1;
                if (rowIndexToFocus < currentPageRows.length) {
                    // Go to first column of the next row if there's one more row
                    columnIndexToFocus = 0;
                }
            } else if (columnIndexToFocus < 0) {
                // Go to previous row if we are before the first column
                rowIndexToFocus -= 1;
                if (rowIndexToFocus >= 0) {
                    // Go to last column of the previous if there's one more row
                    columnIndexToFocus = visibleColumns.length - 1;
                }
            }
            rowIndexToFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(rowIndexToFocus, 0, currentPageRows.length - 1);
            const rowToFocus = currentPageRows[rowIndexToFocus];
            if (!rowToFocus) {
                return;
            }
            const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);
            if (colSpanInfo && colSpanInfo.spannedByColSpan) {
                if (direction === 'left' || direction === 'below') {
                    columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;
                } else if (direction === 'right') {
                    columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;
                }
            }
            columnIndexToFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(columnIndexToFocus, 0, visibleColumns.length - 1);
            const columnToFocus = visibleColumns[columnIndexToFocus];
            apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);
        }
    }["useGridFocus.useCallback[moveFocusToRelativeCell]"], [
        apiRef,
        props.pagination,
        props.paginationMode
    ]);
    const handleCellDoubleClick = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleCellDoubleClick]": ({ id, field })=>{
            apiRef.current.setCellFocus(id, field);
        }
    }["useGridFocus.useCallback[handleCellDoubleClick]"], [
        apiRef
    ]);
    const handleCellKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleCellKeyDown]": (params, event)=>{
            // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys
            if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNavigationKey"])(event.key)) {
                return;
            }
            apiRef.current.setCellFocus(params.id, params.field);
        }
    }["useGridFocus.useCallback[handleCellKeyDown]"], [
        apiRef
    ]);
    const handleColumnHeaderFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleColumnHeaderFocus]": ({ field }, event)=>{
            if (event.target !== event.currentTarget) {
                return;
            }
            apiRef.current.setColumnHeaderFocus(field, event);
        }
    }["useGridFocus.useCallback[handleColumnHeaderFocus]"], [
        apiRef
    ]);
    const handleColumnGroupHeaderFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleColumnGroupHeaderFocus]": ({ fields, depth }, event)=>{
            if (event.target !== event.currentTarget) {
                return;
            }
            const focusedColumnGroup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusColumnGroupHeaderSelector"])(apiRef);
            if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {
                // This group cell has already been focused
                return;
            }
            apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);
        }
    }["useGridFocus.useCallback[handleColumnGroupHeaderFocus]"], [
        apiRef
    ]);
    const handleBlur = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleBlur]": (_, event)=>{
            if (event.relatedTarget?.getAttribute('class')?.includes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].columnHeader)) {
                return;
            }
            logger.debug(`Clearing focus`);
            apiRef.current.setState({
                "useGridFocus.useCallback[handleBlur]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        focus: {
                            cell: null,
                            columnHeader: null,
                            columnHeaderFilter: null,
                            columnGroupHeader: null
                        }
                    })
            }["useGridFocus.useCallback[handleBlur]"]);
        }
    }["useGridFocus.useCallback[handleBlur]"], [
        logger,
        apiRef
    ]);
    const handleCellMouseDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleCellMouseDown]": (params)=>{
            lastClickedCell.current = params;
        }
    }["useGridFocus.useCallback[handleCellMouseDown]"], []);
    const handleDocumentClick = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleDocumentClick]": (event)=>{
            const cellParams = lastClickedCell.current;
            lastClickedCell.current = null;
            const focusedCell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {
                event,
                cell: cellParams
            });
            if (!canUpdateFocus) {
                return;
            }
            if (!focusedCell) {
                if (cellParams) {
                    apiRef.current.setCellFocus(cellParams.id, cellParams.field);
                }
                return;
            }
            if (cellParams?.id === focusedCell.id && cellParams?.field === focusedCell.field) {
                return;
            }
            const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);
            if (cellElement?.contains(event.target)) {
                return;
            }
            if (cellParams) {
                apiRef.current.setCellFocus(cellParams.id, cellParams.field);
            } else {
                apiRef.current.setState({
                    "useGridFocus.useCallback[handleDocumentClick]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            focus: {
                                cell: null,
                                columnHeader: null,
                                columnHeaderFilter: null,
                                columnGroupHeader: null
                            }
                        })
                }["useGridFocus.useCallback[handleDocumentClick]"]);
                apiRef.current.forceUpdate();
                // There's a focused cell but another element (not a cell) was clicked
                // Publishes an event to notify that the focus was lost
                publishCellFocusOut(focusedCell, event);
            }
        }
    }["useGridFocus.useCallback[handleDocumentClick]"], [
        apiRef,
        publishCellFocusOut
    ]);
    const handleCellModeChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleCellModeChange]": (params)=>{
            if (params.cellMode === 'view') {
                return;
            }
            const cell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            if (cell?.id !== params.id || cell?.field !== params.field) {
                apiRef.current.setCellFocus(params.id, params.field);
            }
        }
    }["useGridFocus.useCallback[handleCellModeChange]"], [
        apiRef
    ]);
    const handleRowSet = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFocus.useCallback[handleRowSet]": ()=>{
            const cell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            // If the focused cell is in a row which does not exist anymore,
            // focus previous row or remove the focus
            if (cell && !apiRef.current.getRow(cell.id)) {
                const lastFocusedRowId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef)?.id;
                let nextRowId = null;
                if (typeof lastFocusedRowId !== 'undefined') {
                    const lastFocusedRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(lastFocusedRowId);
                    const currentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getVisibleRows"])(apiRef, {
                        pagination: props.pagination,
                        paginationMode: props.paginationMode
                    });
                    const nextRow = currentPage.rows[(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(lastFocusedRowIndex, 0, currentPage.rows.length - 1)];
                    nextRowId = nextRow?.id ?? null;
                }
                apiRef.current.setState({
                    "useGridFocus.useCallback[handleRowSet]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            focus: {
                                cell: nextRowId === null ? null : {
                                    id: nextRowId,
                                    field: cell.field
                                },
                                columnHeader: null,
                                columnHeaderFilter: null,
                                columnGroupHeader: null
                            }
                        })
                }["useGridFocus.useCallback[handleRowSet]"]);
            }
        }
    }["useGridFocus.useCallback[handleRowSet]"], [
        apiRef,
        props.pagination,
        props.paginationMode
    ]);
    const handlePaginationModelChange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridFocus.useEventcallback[handlePaginationModelChange]": ()=>{
            const currentFocusedCell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            if (!currentFocusedCell) {
                return;
            }
            const currentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getVisibleRows"])(apiRef, {
                pagination: props.pagination,
                paginationMode: props.paginationMode
            });
            const rowIsInCurrentPage = currentPage.rows.find({
                "useGridFocus.useEventcallback[handlePaginationModelChange].rowIsInCurrentPage": (row)=>row.id === currentFocusedCell.id
            }["useGridFocus.useEventcallback[handlePaginationModelChange].rowIsInCurrentPage"]);
            if (rowIsInCurrentPage) {
                return;
            }
            const visibleColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef);
            apiRef.current.setState({
                "useGridFocus.useEventcallback[handlePaginationModelChange]": (state)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        tabIndex: {
                            cell: {
                                id: currentPage.rows[0].id,
                                field: visibleColumns[0].field
                            },
                            columnGroupHeader: null,
                            columnHeader: null,
                            columnHeaderFilter: null
                        }
                    });
                }
            }["useGridFocus.useEventcallback[handlePaginationModelChange]"]);
        }
    }["useGridFocus.useEventcallback[handlePaginationModelChange]"]);
    const focusApi = {
        setCellFocus,
        setColumnHeaderFocus,
        setColumnHeaderFilterFocus
    };
    const focusPrivateApi = {
        moveFocusToRelativeCell,
        setColumnGroupHeaderFocus,
        getColumnGroupHeaderFocus
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, focusApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, focusPrivateApi, 'private');
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridFocus.useEffect": ()=>{
            const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__["unstable_ownerDocument"])(apiRef.current.rootElementRef.current);
            doc.addEventListener('mouseup', handleDocumentClick);
            return ({
                "useGridFocus.useEffect": ()=>{
                    doc.removeEventListener('mouseup', handleDocumentClick);
                }
            })["useGridFocus.useEffect"];
        }
    }["useGridFocus.useEffect"], [
        apiRef,
        hasRootReference,
        handleDocumentClick
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnHeaderBlur', handleBlur);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellDoubleClick', handleCellDoubleClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellMouseDown', handleCellMouseDown);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellKeyDown', handleCellKeyDown);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellModeChange', handleCellModeChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowsSet', handleRowSet);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'paginationModelChange', handlePaginationModelChange);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "sortingStateInitializer": (()=>sortingStateInitializer),
    "useGridSorting": (()=>useGridSorting)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridRegisterStrategyProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js [app-client] (ecmascript) <export default as unstable_useEnhancedEffect>");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const sortingStateInitializer = (state, props)=>{
    const sortModel = props.sortModel ?? props.initialState?.sorting?.sortModel ?? [];
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        sorting: {
            sortModel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sanitizeSortModel"])(sortModel, props.disableMultipleColumnsSorting),
            sortedRows: []
        }
    });
};
const useGridSorting = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridSorting');
    apiRef.current.registerControlState({
        stateId: 'sortModel',
        propModel: props.sortModel,
        propOnChange: props.onSortModelChange,
        stateSelector: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"],
        changeEvent: 'sortModelChange'
    });
    const upsertSortModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[upsertSortModel]": (field, sortItem)=>{
            const sortModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"])(apiRef);
            const existingIdx = sortModel.findIndex({
                "useGridSorting.useCallback[upsertSortModel].existingIdx": (c)=>c.field === field
            }["useGridSorting.useCallback[upsertSortModel].existingIdx"]);
            let newSortModel = [
                ...sortModel
            ];
            if (existingIdx > -1) {
                if (sortItem?.sort == null) {
                    newSortModel.splice(existingIdx, 1);
                } else {
                    newSortModel.splice(existingIdx, 1, sortItem);
                }
            } else {
                newSortModel = [
                    ...sortModel,
                    sortItem
                ];
            }
            return newSortModel;
        }
    }["useGridSorting.useCallback[upsertSortModel]"], [
        apiRef
    ]);
    const createSortItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[createSortItem]": (col, directionOverride)=>{
            const sortModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"])(apiRef);
            const existing = sortModel.find({
                "useGridSorting.useCallback[createSortItem].existing": (c)=>c.field === col.field
            }["useGridSorting.useCallback[createSortItem].existing"]);
            if (existing) {
                const nextSort = directionOverride === undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNextGridSortDirection"])(col.sortingOrder ?? props.sortingOrder, existing.sort) : directionOverride;
                return nextSort === undefined ? undefined : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, existing, {
                    sort: nextSort
                });
            }
            return {
                field: col.field,
                sort: directionOverride === undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNextGridSortDirection"])(col.sortingOrder ?? props.sortingOrder) : directionOverride
            };
        }
    }["useGridSorting.useCallback[createSortItem]"], [
        apiRef,
        props.sortingOrder
    ]);
    const addColumnMenuItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[addColumnMenuItem]": (columnMenuItems, colDef)=>{
            if (colDef == null || colDef.sortable === false || props.disableColumnSorting) {
                return columnMenuItems;
            }
            const sortingOrder = colDef.sortingOrder || props.sortingOrder;
            if (sortingOrder.some({
                "useGridSorting.useCallback[addColumnMenuItem]": (item)=>!!item
            }["useGridSorting.useCallback[addColumnMenuItem]"])) {
                return [
                    ...columnMenuItems,
                    'columnMenuSortItem'
                ];
            }
            return columnMenuItems;
        }
    }["useGridSorting.useCallback[addColumnMenuItem]"], [
        props.sortingOrder,
        props.disableColumnSorting
    ]);
    /**
   * API METHODS
   */ const applySorting = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[applySorting]": ()=>{
            apiRef.current.setState({
                "useGridSorting.useCallback[applySorting]": (state)=>{
                    if (props.sortingMode === 'server') {
                        logger.debug('Skipping sorting rows as sortingMode = server');
                        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            sorting: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.sorting, {
                                sortedRows: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTreeNodeDescendants"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(apiRef), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"], false)
                            })
                        });
                    }
                    const sortModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"])(state, apiRef.current.instanceId);
                    const sortRowList = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildAggregatedSortingApplier"])(sortModel, apiRef);
                    const sortedRows = apiRef.current.applyStrategyProcessor('sorting', {
                        sortRowList
                    });
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        sorting: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.sorting, {
                            sortedRows
                        })
                    });
                }
            }["useGridSorting.useCallback[applySorting]"]);
            apiRef.current.publishEvent('sortedRowsSet');
            apiRef.current.forceUpdate();
        }
    }["useGridSorting.useCallback[applySorting]"], [
        apiRef,
        logger,
        props.sortingMode
    ]);
    const setSortModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[setSortModel]": (model)=>{
            const currentModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"])(apiRef);
            if (currentModel !== model) {
                logger.debug(`Setting sort model`);
                apiRef.current.setState((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeStateWithSortModel"])(model, props.disableMultipleColumnsSorting));
                apiRef.current.forceUpdate();
                apiRef.current.applySorting();
            }
        }
    }["useGridSorting.useCallback[setSortModel]"], [
        apiRef,
        logger,
        props.disableMultipleColumnsSorting
    ]);
    const sortColumn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[sortColumn]": (field, direction, allowMultipleSorting)=>{
            const column = apiRef.current.getColumn(field);
            const sortItem = createSortItem(column, direction);
            let sortModel;
            if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {
                sortModel = sortItem?.sort == null ? [] : [
                    sortItem
                ];
            } else {
                sortModel = upsertSortModel(column.field, sortItem);
            }
            apiRef.current.setSortModel(sortModel);
        }
    }["useGridSorting.useCallback[sortColumn]"], [
        apiRef,
        upsertSortModel,
        createSortItem,
        props.disableMultipleColumnsSorting
    ]);
    const getSortModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[getSortModel]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"])(apiRef)
    }["useGridSorting.useCallback[getSortModel]"], [
        apiRef
    ]);
    const getSortedRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[getSortedRows]": ()=>{
            const sortedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortedRowEntriesSelector"])(apiRef);
            return sortedRows.map({
                "useGridSorting.useCallback[getSortedRows]": (row)=>row.model
            }["useGridSorting.useCallback[getSortedRows]"]);
        }
    }["useGridSorting.useCallback[getSortedRows]"], [
        apiRef
    ]);
    const getSortedRowIds = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[getSortedRowIds]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortedRowIdsSelector"])(apiRef)
    }["useGridSorting.useCallback[getSortedRowIds]"], [
        apiRef
    ]);
    const getRowIdFromRowIndex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[getRowIdFromRowIndex]": (index)=>apiRef.current.getSortedRowIds()[index]
    }["useGridSorting.useCallback[getRowIdFromRowIndex]"], [
        apiRef
    ]);
    const sortApi = {
        getSortModel,
        getSortedRows,
        getSortedRowIds,
        getRowIdFromRowIndex,
        setSortModel,
        sortColumn,
        applySorting
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, sortApi, 'public');
    /**
   * PRE-PROCESSING
   */ const stateExportPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[stateExportPreProcessing]": (prevState, context)=>{
            const sortModelToExport = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"])(apiRef);
            const shouldExportSortModel = // Always export if the `exportOnlyDirtyModels` property is not activated
            !context.exportOnlyDirtyModels || // Always export if the model is controlled
            props.sortModel != null || // Always export if the model has been initialized
            props.initialState?.sorting?.sortModel != null || // Export if the model is not empty
            sortModelToExport.length > 0;
            if (!shouldExportSortModel) {
                return prevState;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState, {
                sorting: {
                    sortModel: sortModelToExport
                }
            });
        }
    }["useGridSorting.useCallback[stateExportPreProcessing]"], [
        apiRef,
        props.sortModel,
        props.initialState?.sorting?.sortModel
    ]);
    const stateRestorePreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[stateRestorePreProcessing]": (params, context)=>{
            const sortModel = context.stateToRestore.sorting?.sortModel;
            if (sortModel == null) {
                return params;
            }
            apiRef.current.setState((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeStateWithSortModel"])(sortModel, props.disableMultipleColumnsSorting));
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, params, {
                callbacks: [
                    ...params.callbacks,
                    apiRef.current.applySorting
                ]
            });
        }
    }["useGridSorting.useCallback[stateRestorePreProcessing]"], [
        apiRef,
        props.disableMultipleColumnsSorting
    ]);
    const flatSortingMethod = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[flatSortingMethod]": (params)=>{
            const rowTree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(apiRef);
            const rootGroupNode = rowTree[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ROOT_GROUP_ID"]];
            const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map({
                "useGridSorting.useCallback[flatSortingMethod]": (childId)=>rowTree[childId]
            }["useGridSorting.useCallback[flatSortingMethod]"])) : [
                ...rootGroupNode.children
            ];
            if (rootGroupNode.footerId != null) {
                sortedChildren.push(rootGroupNode.footerId);
            }
            return sortedChildren;
        }
    }["useGridSorting.useCallback[flatSortingMethod]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportState', stateExportPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'restoreState', stateRestorePreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridRegisterStrategyProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterStrategyProcessor"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DEFAULT_STRATEGY"], 'sorting', flatSortingMethod);
    /**
   * EVENTS
   */ const handleColumnHeaderClick = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[handleColumnHeaderClick]": ({ field, colDef }, event)=>{
            if (!colDef.sortable || props.disableColumnSorting) {
                return;
            }
            const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;
            sortColumn(field, undefined, allowMultipleSorting);
        }
    }["useGridSorting.useCallback[handleColumnHeaderClick]"], [
        sortColumn,
        props.disableColumnSorting
    ]);
    const handleColumnHeaderKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[handleColumnHeaderKeyDown]": ({ field, colDef }, event)=>{
            if (!colDef.sortable || props.disableColumnSorting) {
                return;
            }
            // Ctrl + Enter opens the column menu
            if (event.key === 'Enter' && !event.ctrlKey && !event.metaKey) {
                sortColumn(field, undefined, event.shiftKey);
            }
        }
    }["useGridSorting.useCallback[handleColumnHeaderKeyDown]"], [
        sortColumn,
        props.disableColumnSorting
    ]);
    const handleColumnsChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[handleColumnsChange]": ()=>{
            // When the columns change we check that the sorted columns are still part of the dataset
            const sortModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"])(apiRef);
            const latestColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnLookupSelector"])(apiRef);
            if (sortModel.length > 0) {
                const newModel = sortModel.filter({
                    "useGridSorting.useCallback[handleColumnsChange].newModel": (sortItem)=>latestColumns[sortItem.field]
                }["useGridSorting.useCallback[handleColumnsChange].newModel"]);
                if (newModel.length < sortModel.length) {
                    apiRef.current.setSortModel(newModel);
                }
            }
        }
    }["useGridSorting.useCallback[handleColumnsChange]"], [
        apiRef
    ]);
    const handleStrategyProcessorChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridSorting.useCallback[handleStrategyProcessorChange]": (methodName)=>{
            if (methodName === 'sorting') {
                apiRef.current.applySorting();
            }
        }
    }["useGridSorting.useCallback[handleStrategyProcessorChange]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'columnMenu', addColumnMenuItem);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnHeaderClick', handleColumnHeaderClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowsSet', apiRef.current.applySorting);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnsChange', handleColumnsChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);
    /**
   * 1ST RENDER
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useFirstRender"])({
        "useGridSorting.useFirstRender": ()=>{
            apiRef.current.applySorting();
        }
    }["useGridSorting.useFirstRender"]);
    /**
   * EFFECTS
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useGridSorting.useEnhancedEffect": ()=>{
            if (props.sortModel !== undefined) {
                apiRef.current.setSortModel(props.sortModel);
            }
        }
    }["useGridSorting.useEnhancedEffect"], [
        apiRef,
        props.sortModel
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "preferencePanelStateInitializer": (()=>preferencePanelStateInitializer),
    "useGridPreferencesPanel": (()=>useGridPreferencesPanel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$preferencesPanel$2f$gridPreferencePanelSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
;
;
;
;
;
;
const preferencePanelStateInitializer = (state, props)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        preferencePanel: props.initialState?.preferencePanel ?? {
            open: false
        }
    });
const useGridPreferencesPanel = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridPreferencesPanel');
    const hideTimeout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const immediateTimeout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    /**
   * API METHODS
   */ const hidePreferences = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPreferencesPanel.useCallback[hidePreferences]": ()=>{
            logger.debug('Hiding Preferences Panel');
            const preferencePanelState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$preferencesPanel$2f$gridPreferencePanelSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPreferencePanelStateSelector"])(apiRef.current.state);
            if (preferencePanelState.openedPanelValue) {
                apiRef.current.publishEvent('preferencePanelClose', {
                    openedPanelValue: preferencePanelState.openedPanelValue
                });
            }
            apiRef.current.setState({
                "useGridPreferencesPanel.useCallback[hidePreferences]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        preferencePanel: {
                            open: false
                        }
                    })
            }["useGridPreferencesPanel.useCallback[hidePreferences]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridPreferencesPanel.useCallback[hidePreferences]"], [
        apiRef,
        logger
    ]);
    // This is to prevent the preferences from closing when you open a select box or another panel,
    // The issue is in MUI core V4 => Fixed in V5
    const doNotHidePanel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPreferencesPanel.useCallback[doNotHidePanel]": ()=>{
            immediateTimeout.current = setTimeout({
                "useGridPreferencesPanel.useCallback[doNotHidePanel]": ()=>clearTimeout(hideTimeout.current)
            }["useGridPreferencesPanel.useCallback[doNotHidePanel]"], 0);
        }
    }["useGridPreferencesPanel.useCallback[doNotHidePanel]"], []);
    // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,
    // we can cancel the action if the trigger element still need the panel...
    const hidePreferencesDelayed = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPreferencesPanel.useCallback[hidePreferencesDelayed]": ()=>{
            hideTimeout.current = setTimeout(hidePreferences, 100);
        }
    }["useGridPreferencesPanel.useCallback[hidePreferencesDelayed]"], [
        hidePreferences
    ]);
    const showPreferences = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPreferencesPanel.useCallback[showPreferences]": (newValue, panelId, labelId)=>{
            logger.debug('Opening Preferences Panel');
            doNotHidePanel();
            apiRef.current.setState({
                "useGridPreferencesPanel.useCallback[showPreferences]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        preferencePanel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.preferencePanel, {
                            open: true,
                            openedPanelValue: newValue,
                            panelId,
                            labelId
                        })
                    })
            }["useGridPreferencesPanel.useCallback[showPreferences]"]);
            apiRef.current.publishEvent('preferencePanelOpen', {
                openedPanelValue: newValue
            });
            apiRef.current.forceUpdate();
        }
    }["useGridPreferencesPanel.useCallback[showPreferences]"], [
        logger,
        doNotHidePanel,
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, {
        showPreferences,
        hidePreferences: hidePreferencesDelayed
    }, 'public');
    /**
   * PRE-PROCESSING
   */ const stateExportPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPreferencesPanel.useCallback[stateExportPreProcessing]": (prevState, context)=>{
            const preferencePanelToExport = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$preferencesPanel$2f$gridPreferencePanelSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPreferencePanelStateSelector"])(apiRef.current.state);
            const shouldExportPreferencePanel = // Always export if the `exportOnlyDirtyModels` property is not activated
            !context.exportOnlyDirtyModels || // Always export if the panel was initialized
            props.initialState?.preferencePanel != null || // Always export if the panel is opened
            preferencePanelToExport.open;
            if (!shouldExportPreferencePanel) {
                return prevState;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState, {
                preferencePanel: preferencePanelToExport
            });
        }
    }["useGridPreferencesPanel.useCallback[stateExportPreProcessing]"], [
        apiRef,
        props.initialState?.preferencePanel
    ]);
    const stateRestorePreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPreferencesPanel.useCallback[stateRestorePreProcessing]": (params, context)=>{
            const preferencePanel = context.stateToRestore.preferencePanel;
            if (preferencePanel != null) {
                apiRef.current.setState({
                    "useGridPreferencesPanel.useCallback[stateRestorePreProcessing]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            preferencePanel
                        })
                }["useGridPreferencesPanel.useCallback[stateRestorePreProcessing]"]);
            }
            return params;
        }
    }["useGridPreferencesPanel.useCallback[stateRestorePreProcessing]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportState', stateExportPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'restoreState', stateRestorePreProcessing);
    /**
   * EFFECTS
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridPreferencesPanel.useEffect": ()=>{
            return ({
                "useGridPreferencesPanel.useEffect": ()=>{
                    clearTimeout(hideTimeout.current);
                    clearTimeout(immediateTimeout.current);
                }
            })["useGridPreferencesPanel.useEffect"];
        }
    }["useGridPreferencesPanel.useEffect"], []);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "filterStateInitializer": (()=>filterStateInitializer),
    "useGridFilter": (()=>useGridFilter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$preferencesPanel$2f$gridPreferencePanelsValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelsValue.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterState$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterState.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useLazyRef$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js [app-client] (ecmascript) <export default as useLazyRef>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridRegisterStrategyProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js [app-client] (ecmascript) <export default as unstable_useEnhancedEffect>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/reselect/dist/reselect.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const filterStateInitializer = (state, props, apiRef)=>{
    const filterModel = props.filterModel ?? props.initialState?.filter?.filterModel ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterState$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultGridFilterModel"])();
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        filter: {
            filterModel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sanitizeFilterModel"])(filterModel, props.disableMultipleColumnsFiltering, apiRef),
            filteredRowsLookup: {},
            filteredChildrenCountLookup: {},
            filteredDescendantCountLookup: {}
        },
        visibleRowsLookup: {}
    });
};
const getVisibleRowsLookup = (params)=>{
    // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.
    return params.filteredRowsLookup;
};
function getVisibleRowsLookupState(apiRef, state) {
    return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {
        tree: state.rows.tree,
        filteredRowsLookup: state.filter.filteredRowsLookup
    });
}
function createMemoizedValues() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lruMemoize"])(Object.values);
}
const useGridFilter = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridFilter');
    apiRef.current.registerControlState({
        stateId: 'filter',
        propModel: props.filterModel,
        propOnChange: props.onFilterModelChange,
        stateSelector: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"],
        changeEvent: 'filterModelChange'
    });
    const updateFilteredRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[updateFilteredRows]": ()=>{
            apiRef.current.setState({
                "useGridFilter.useCallback[updateFilteredRows]": (state)=>{
                    const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(state, apiRef.current.instanceId);
                    const filterState = apiRef.current.getFilterState(filterModel);
                    const newState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        filter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.filter, filterState)
                    });
                    const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, newState, {
                        visibleRowsLookup: visibleRowsLookupState
                    });
                }
            }["useGridFilter.useCallback[updateFilteredRows]"]);
            apiRef.current.publishEvent('filteredRowsSet');
        }
    }["useGridFilter.useCallback[updateFilteredRows]"], [
        apiRef
    ]);
    const addColumnMenuItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[addColumnMenuItem]": (columnMenuItems, colDef)=>{
            if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {
                return columnMenuItems;
            }
            return [
                ...columnMenuItems,
                'columnMenuFilterItem'
            ];
        }
    }["useGridFilter.useCallback[addColumnMenuItem]"], [
        props.disableColumnFilter
    ]);
    /**
   * API METHODS
   */ const applyFilters = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[applyFilters]": ()=>{
            updateFilteredRows();
            apiRef.current.forceUpdate();
        }
    }["useGridFilter.useCallback[applyFilters]"], [
        apiRef,
        updateFilteredRows
    ]);
    const upsertFilterItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[upsertFilterItem]": (item)=>{
            const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            const items = [
                ...filterModel.items
            ];
            const itemIndex = items.findIndex({
                "useGridFilter.useCallback[upsertFilterItem].itemIndex": (filterItem)=>filterItem.id === item.id
            }["useGridFilter.useCallback[upsertFilterItem].itemIndex"]);
            if (itemIndex === -1) {
                items.push(item);
            } else {
                items[itemIndex] = item;
            }
            apiRef.current.setFilterModel((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterModel, {
                items
            }), 'upsertFilterItem');
        }
    }["useGridFilter.useCallback[upsertFilterItem]"], [
        apiRef
    ]);
    const upsertFilterItems = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[upsertFilterItems]": (items)=>{
            const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            const existingItems = [
                ...filterModel.items
            ];
            items.forEach({
                "useGridFilter.useCallback[upsertFilterItems]": (item)=>{
                    const itemIndex = existingItems.findIndex({
                        "useGridFilter.useCallback[upsertFilterItems].itemIndex": (filterItem)=>filterItem.id === item.id
                    }["useGridFilter.useCallback[upsertFilterItems].itemIndex"]);
                    if (itemIndex === -1) {
                        existingItems.push(item);
                    } else {
                        existingItems[itemIndex] = item;
                    }
                }
            }["useGridFilter.useCallback[upsertFilterItems]"]);
            apiRef.current.setFilterModel((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterModel, {
                items: existingItems
            }), 'upsertFilterItems');
        }
    }["useGridFilter.useCallback[upsertFilterItems]"], [
        apiRef
    ]);
    const deleteFilterItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[deleteFilterItem]": (itemToDelete)=>{
            const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            const items = filterModel.items.filter({
                "useGridFilter.useCallback[deleteFilterItem].items": (item)=>item.id !== itemToDelete.id
            }["useGridFilter.useCallback[deleteFilterItem].items"]);
            if (items.length === filterModel.items.length) {
                return;
            }
            apiRef.current.setFilterModel((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterModel, {
                items
            }), 'deleteFilterItem');
        }
    }["useGridFilter.useCallback[deleteFilterItem]"], [
        apiRef
    ]);
    const showFilterPanel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[showFilterPanel]": (targetColumnField, panelId, labelId)=>{
            logger.debug('Displaying filter panel');
            if (targetColumnField) {
                const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
                const filterItemsWithValue = filterModel.items.filter({
                    "useGridFilter.useCallback[showFilterPanel].filterItemsWithValue": (item)=>{
                        if (item.value !== undefined) {
                            // Some filters like `isAnyOf` support array as `item.value`.
                            // If array is empty, we want to remove it from the filter model.
                            if (Array.isArray(item.value) && item.value.length === 0) {
                                return false;
                            }
                            return true;
                        }
                        const column = apiRef.current.getColumn(item.field);
                        const filterOperator = column.filterOperators?.find({
                            "useGridFilter.useCallback[showFilterPanel].filterItemsWithValue": (operator)=>operator.value === item.operator
                        }["useGridFilter.useCallback[showFilterPanel].filterItemsWithValue"]);
                        const requiresFilterValue = typeof filterOperator?.requiresFilterValue === 'undefined' ? true : filterOperator?.requiresFilterValue;
                        // Operators like `isEmpty` don't have and don't require `item.value`.
                        // So we don't want to remove them from the filter model if `item.value === undefined`.
                        // See https://github.com/mui/mui-x/issues/5402
                        if (requiresFilterValue) {
                            return false;
                        }
                        return true;
                    }
                }["useGridFilter.useCallback[showFilterPanel].filterItemsWithValue"]);
                let newFilterItems;
                const filterItemOnTarget = filterItemsWithValue.find({
                    "useGridFilter.useCallback[showFilterPanel].filterItemOnTarget": (item)=>item.field === targetColumnField
                }["useGridFilter.useCallback[showFilterPanel].filterItemOnTarget"]);
                const targetColumn = apiRef.current.getColumn(targetColumnField);
                if (filterItemOnTarget) {
                    newFilterItems = filterItemsWithValue;
                } else if (props.disableMultipleColumnsFiltering) {
                    newFilterItems = [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cleanFilterItem"])({
                            field: targetColumnField,
                            operator: targetColumn.filterOperators[0].value
                        }, apiRef)
                    ];
                } else {
                    newFilterItems = [
                        ...filterItemsWithValue,
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cleanFilterItem"])({
                            field: targetColumnField,
                            operator: targetColumn.filterOperators[0].value
                        }, apiRef)
                    ];
                }
                apiRef.current.setFilterModel((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterModel, {
                    items: newFilterItems
                }));
            }
            apiRef.current.showPreferences(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$preferencesPanel$2f$gridPreferencePanelsValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPreferencePanelsValue"].filters, panelId, labelId);
        }
    }["useGridFilter.useCallback[showFilterPanel]"], [
        apiRef,
        logger,
        props.disableMultipleColumnsFiltering
    ]);
    const hideFilterPanel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[hideFilterPanel]": ()=>{
            logger.debug('Hiding filter panel');
            apiRef.current.hidePreferences();
        }
    }["useGridFilter.useCallback[hideFilterPanel]"], [
        apiRef,
        logger
    ]);
    const setFilterLogicOperator = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[setFilterLogicOperator]": (logicOperator)=>{
            const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            if (filterModel.logicOperator === logicOperator) {
                return;
            }
            apiRef.current.setFilterModel((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterModel, {
                logicOperator
            }), 'changeLogicOperator');
        }
    }["useGridFilter.useCallback[setFilterLogicOperator]"], [
        apiRef
    ]);
    const setQuickFilterValues = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[setQuickFilterValues]": (values)=>{
            const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDeepEqual"])(filterModel.quickFilterValues, values)) {
                return;
            }
            apiRef.current.setFilterModel((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterModel, {
                quickFilterValues: [
                    ...values
                ]
            }));
        }
    }["useGridFilter.useCallback[setQuickFilterValues]"], [
        apiRef
    ]);
    const setFilterModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[setFilterModel]": (model, reason)=>{
            const currentModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            if (currentModel !== model) {
                logger.debug('Setting filter model');
                apiRef.current.updateControlState('filter', (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeStateWithFilterModel"])(model, props.disableMultipleColumnsFiltering, apiRef), reason);
                apiRef.current.unstable_applyFilters();
            }
        }
    }["useGridFilter.useCallback[setFilterModel]"], [
        apiRef,
        logger,
        props.disableMultipleColumnsFiltering
    ]);
    const getFilterState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[getFilterState]": (inputFilterModel)=>{
            const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sanitizeFilterModel"])(inputFilterModel, props.disableMultipleColumnsFiltering, apiRef);
            const isRowMatchingFilters = props.filterMode === 'client' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildAggregatedFilterApplier"])(filterModel, apiRef, props.disableEval) : null;
            const filterResult = apiRef.current.applyStrategyProcessor('filtering', {
                isRowMatchingFilters,
                filterModel: filterModel ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterState$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultGridFilterModel"])()
            });
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterResult, {
                filterModel
            });
        }
    }["useGridFilter.useCallback[getFilterState]"], [
        props.disableMultipleColumnsFiltering,
        props.filterMode,
        props.disableEval,
        apiRef
    ]);
    const filterApi = {
        setFilterLogicOperator,
        unstable_applyFilters: applyFilters,
        deleteFilterItem,
        upsertFilterItem,
        upsertFilterItems,
        setFilterModel,
        showFilterPanel,
        hideFilterPanel,
        setQuickFilterValues,
        ignoreDiacritics: props.ignoreDiacritics,
        getFilterState
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, filterApi, 'public');
    /**
   * PRE-PROCESSING
   */ const stateExportPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[stateExportPreProcessing]": (prevState, context)=>{
            const filterModelToExport = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is not activated
            !context.exportOnlyDirtyModels || // Always export if the model is controlled
            props.filterModel != null || // Always export if the model has been initialized
            props.initialState?.filter?.filterModel != null || // Export if the model is not equal to the default value
            !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDeepEqual"])(filterModelToExport, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterState$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultGridFilterModel"])());
            if (!shouldExportFilterModel) {
                return prevState;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState, {
                filter: {
                    filterModel: filterModelToExport
                }
            });
        }
    }["useGridFilter.useCallback[stateExportPreProcessing]"], [
        apiRef,
        props.filterModel,
        props.initialState?.filter?.filterModel
    ]);
    const stateRestorePreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[stateRestorePreProcessing]": (params, context)=>{
            const filterModel = context.stateToRestore.filter?.filterModel;
            if (filterModel == null) {
                return params;
            }
            apiRef.current.updateControlState('filter', (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mergeStateWithFilterModel"])(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, params, {
                callbacks: [
                    ...params.callbacks,
                    apiRef.current.unstable_applyFilters
                ]
            });
        }
    }["useGridFilter.useCallback[stateRestorePreProcessing]"], [
        apiRef,
        props.disableMultipleColumnsFiltering
    ]);
    const preferencePanelPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[preferencePanelPreProcessing]": (initialValue, value)=>{
            if (value === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$preferencesPanel$2f$gridPreferencePanelsValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPreferencePanelsValue"].filters) {
                const FilterPanel = props.slots.filterPanel;
                return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FilterPanel, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, props.slotProps?.filterPanel));
            }
            return initialValue;
        }
    }["useGridFilter.useCallback[preferencePanelPreProcessing]"], [
        props.slots.filterPanel,
        props.slotProps?.filterPanel
    ]);
    const { getRowId } = props;
    const getRowsRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useLazyRef$3e$__["useLazyRef"])(createMemoizedValues);
    const flatFilteringMethod = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[flatFilteringMethod]": (params)=>{
            if (props.filterMode !== 'client' || !params.isRowMatchingFilters) {
                return {
                    filteredRowsLookup: {},
                    filteredChildrenCountLookup: {},
                    filteredDescendantCountLookup: {}
                };
            }
            const dataRowIdToModelLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLookupSelector"])(apiRef);
            const filteredRowsLookup = {};
            const { isRowMatchingFilters } = params;
            const filterCache = {};
            const result = {
                passingFilterItems: null,
                passingQuickFilterValues: null
            };
            const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);
            for(let i = 0; i < rows.length; i += 1){
                const row = rows[i];
                const id = getRowId ? getRowId(row) : row.id;
                isRowMatchingFilters(row, undefined, result);
                const isRowPassing = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["passFilterLogic"])([
                    result.passingFilterItems
                ], [
                    result.passingQuickFilterValues
                ], params.filterModel, apiRef, filterCache);
                filteredRowsLookup[id] = isRowPassing;
            }
            const footerId = 'auto-generated-group-footer-root';
            const footer = dataRowIdToModelLookup[footerId];
            if (footer) {
                filteredRowsLookup[footerId] = true;
            }
            return {
                filteredRowsLookup,
                filteredChildrenCountLookup: {},
                filteredDescendantCountLookup: {}
            };
        }
    }["useGridFilter.useCallback[flatFilteringMethod]"], [
        apiRef,
        props.filterMode,
        getRowId,
        getRowsRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'columnMenu', addColumnMenuItem);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportState', stateExportPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'restoreState', stateRestorePreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'preferencePanel', preferencePanelPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridRegisterStrategyProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterStrategyProcessor"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DEFAULT_STRATEGY"], 'filtering', flatFilteringMethod);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridRegisterStrategyProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterStrategyProcessor"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$strategyProcessing$2f$useGridStrategyProcessing$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DEFAULT_STRATEGY"], 'visibleRowsLookupCreation', getVisibleRowsLookup);
    /**
   * EVENTS
   */ const handleColumnsChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[handleColumnsChange]": ()=>{
            logger.debug('onColUpdated - GridColumns changed, applying filters');
            const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            const columnsLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnLookupSelector"])(apiRef);
            const newFilterItems = filterModel.items.filter({
                "useGridFilter.useCallback[handleColumnsChange].newFilterItems": (item)=>item.field && columnsLookup[item.field]
            }["useGridFilter.useCallback[handleColumnsChange].newFilterItems"]);
            if (newFilterItems.length < filterModel.items.length) {
                apiRef.current.setFilterModel((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, filterModel, {
                    items: newFilterItems
                }));
            }
        }
    }["useGridFilter.useCallback[handleColumnsChange]"], [
        apiRef,
        logger
    ]);
    const handleStrategyProcessorChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[handleStrategyProcessorChange]": (methodName)=>{
            if (methodName === 'filtering') {
                apiRef.current.unstable_applyFilters();
            }
        }
    }["useGridFilter.useCallback[handleStrategyProcessorChange]"], [
        apiRef
    ]);
    const updateVisibleRowsLookupState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridFilter.useCallback[updateVisibleRowsLookupState]": ()=>{
            apiRef.current.setState({
                "useGridFilter.useCallback[updateVisibleRowsLookupState]": (state)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)
                    });
                }
            }["useGridFilter.useCallback[updateVisibleRowsLookupState]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridFilter.useCallback[updateVisibleRowsLookupState]"], [
        apiRef
    ]);
    // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.
    // Otherwise, the state is not consistent during the render
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowsSet', updateFilteredRows);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnsChange', handleColumnsChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnVisibilityModelChange', {
        "useGridFilter.useGridApiEventHandler": ()=>{
            const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"])(apiRef);
            if (filterModel.quickFilterValues && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["shouldQuickFilterExcludeHiddenColumns"])(filterModel)) {
                // re-apply filters because the quick filter results may have changed
                apiRef.current.unstable_applyFilters();
            }
        }
    }["useGridFilter.useGridApiEventHandler"]);
    /**
   * 1ST RENDER
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useFirstRender$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useFirstRender"])({
        "useGridFilter.useFirstRender": ()=>{
            apiRef.current.unstable_applyFilters();
        }
    }["useGridFilter.useFirstRender"]);
    /**
   * EFFECTS
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEnhancedEffect$2f$useEnhancedEffect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEnhancedEffect$3e$__["unstable_useEnhancedEffect"])({
        "useGridFilter.useEnhancedEffect": ()=>{
            if (props.filterModel !== undefined) {
                apiRef.current.setFilterModel(props.filterModel);
            }
        }
    }["useGridFilter.useEnhancedEffect"], [
        apiRef,
        logger,
        props.filterModel
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowSpanningUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getCellValue": (()=>getCellValue),
    "getUnprocessedRange": (()=>getUnprocessedRange),
    "isRowContextInitialized": (()=>isRowContextInitialized),
    "isRowRangeUpdated": (()=>isRowRangeUpdated)
});
function getUnprocessedRange(testRange, processedRange) {
    if (testRange.firstRowIndex >= processedRange.firstRowIndex && testRange.lastRowIndex <= processedRange.lastRowIndex) {
        return null;
    }
    // Overflowing at the end
    // Example: testRange={ firstRowIndex: 10, lastRowIndex: 20 }, processedRange={ firstRowIndex: 0, lastRowIndex: 15 }
    // Unprocessed Range={ firstRowIndex: 16, lastRowIndex: 20 }
    if (testRange.firstRowIndex >= processedRange.firstRowIndex && testRange.lastRowIndex > processedRange.lastRowIndex) {
        return {
            firstRowIndex: processedRange.lastRowIndex,
            lastRowIndex: testRange.lastRowIndex
        };
    }
    // Overflowing at the beginning
    // Example: testRange={ firstRowIndex: 0, lastRowIndex: 20 }, processedRange={ firstRowIndex: 16, lastRowIndex: 30 }
    // Unprocessed Range={ firstRowIndex: 0, lastRowIndex: 15 }
    if (testRange.firstRowIndex < processedRange.firstRowIndex && testRange.lastRowIndex <= processedRange.lastRowIndex) {
        return {
            firstRowIndex: testRange.firstRowIndex,
            lastRowIndex: processedRange.firstRowIndex - 1
        };
    }
    // TODO: Should return two ranges handle overflowing at both ends ?
    return testRange;
}
function isRowContextInitialized(renderContext) {
    return renderContext.firstRowIndex !== 0 || renderContext.lastRowIndex !== 0;
}
function isRowRangeUpdated(range1, range2) {
    return range1.firstRowIndex !== range2.firstRowIndex || range1.lastRowIndex !== range2.lastRowIndex;
}
const getCellValue = (row, colDef, apiRef)=>{
    if (!row) {
        return null;
    }
    let cellValue = row[colDef.field];
    const valueGetter = colDef.rowSpanValueGetter ?? colDef.valueGetter;
    if (valueGetter) {
        cellValue = valueGetter(cellValue, row, colDef, apiRef);
    }
    return cellValue;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowSpanning.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "rowSpanningStateInitializer": (()=>rowSpanningStateInitializer),
    "useGridRowSpanning": (()=>useGridRowSpanning)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/internals/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowSpanningUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
const EMPTY_STATE = {
    spannedCells: {},
    hiddenCells: {},
    hiddenCellOriginMap: {}
};
const EMPTY_RANGE = {
    firstRowIndex: 0,
    lastRowIndex: 0
};
const skippedFields = new Set([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_FIELD"],
    '__reorder__',
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DETAIL_PANEL_TOGGLE_FIELD"]
]);
/**
 * Default number of rows to process during state initialization to avoid flickering.
 * Number `20` is arbitrarily chosen to be large enough to cover most of the cases without
 * compromising performance.
 */ const DEFAULT_ROWS_TO_PROCESS = 20;
const computeRowSpanningState = (apiRef, colDefs, visibleRows, range, rangeToProcess, resetState, processedRange)=>{
    const spannedCells = resetState ? {} : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, apiRef.current.state.rowSpanning.spannedCells);
    const hiddenCells = resetState ? {} : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, apiRef.current.state.rowSpanning.hiddenCells);
    const hiddenCellOriginMap = resetState ? {} : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, apiRef.current.state.rowSpanning.hiddenCellOriginMap);
    if (resetState) {
        processedRange = EMPTY_RANGE;
    }
    colDefs.forEach((colDef)=>{
        if (skippedFields.has(colDef.field)) {
            return;
        }
        for(let index = rangeToProcess.firstRowIndex; index < rangeToProcess.lastRowIndex; index += 1){
            const row = visibleRows[index];
            if (hiddenCells[row.id]?.[colDef.field]) {
                continue;
            }
            const cellValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getCellValue"])(row.model, colDef, apiRef);
            if (cellValue == null) {
                continue;
            }
            let spannedRowId = row.id;
            let spannedRowIndex = index;
            let rowSpan = 0;
            // For first index, also scan in the previous rows to handle the reset state case e.g by sorting
            const backwardsHiddenCells = [];
            if (index === rangeToProcess.firstRowIndex) {
                let prevIndex = index - 1;
                const prevRowEntry = visibleRows[prevIndex];
                while(prevIndex >= range.firstRowIndex && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getCellValue"])(prevRowEntry.model, colDef, apiRef) === cellValue){
                    const currentRow = visibleRows[prevIndex + 1];
                    if (hiddenCells[currentRow.id]) {
                        hiddenCells[currentRow.id][colDef.field] = true;
                    } else {
                        hiddenCells[currentRow.id] = {
                            [colDef.field]: true
                        };
                    }
                    backwardsHiddenCells.push(index);
                    rowSpan += 1;
                    spannedRowId = prevRowEntry.id;
                    spannedRowIndex = prevIndex;
                    prevIndex -= 1;
                }
            }
            backwardsHiddenCells.forEach((hiddenCellIndex)=>{
                if (hiddenCellOriginMap[hiddenCellIndex]) {
                    hiddenCellOriginMap[hiddenCellIndex][colDef.field] = spannedRowIndex;
                } else {
                    hiddenCellOriginMap[hiddenCellIndex] = {
                        [colDef.field]: spannedRowIndex
                    };
                }
            });
            // Scan the next rows
            let relativeIndex = index + 1;
            while(relativeIndex <= range.lastRowIndex && visibleRows[relativeIndex] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getCellValue"])(visibleRows[relativeIndex].model, colDef, apiRef) === cellValue){
                const currentRow = visibleRows[relativeIndex];
                if (hiddenCells[currentRow.id]) {
                    hiddenCells[currentRow.id][colDef.field] = true;
                } else {
                    hiddenCells[currentRow.id] = {
                        [colDef.field]: true
                    };
                }
                if (hiddenCellOriginMap[relativeIndex]) {
                    hiddenCellOriginMap[relativeIndex][colDef.field] = spannedRowIndex;
                } else {
                    hiddenCellOriginMap[relativeIndex] = {
                        [colDef.field]: spannedRowIndex
                    };
                }
                relativeIndex += 1;
                rowSpan += 1;
            }
            if (rowSpan > 0) {
                if (spannedCells[spannedRowId]) {
                    spannedCells[spannedRowId][colDef.field] = rowSpan + 1;
                } else {
                    spannedCells[spannedRowId] = {
                        [colDef.field]: rowSpan + 1
                    };
                }
            }
        }
        processedRange = {
            firstRowIndex: Math.min(processedRange.firstRowIndex, rangeToProcess.firstRowIndex),
            lastRowIndex: Math.max(processedRange.lastRowIndex, rangeToProcess.lastRowIndex)
        };
    });
    return {
        spannedCells,
        hiddenCells,
        hiddenCellOriginMap,
        processedRange
    };
};
const rowSpanningStateInitializer = (state, props, apiRef)=>{
    if (props.unstable_rowSpanning) {
        const rowIds = state.rows.dataRowIds || [];
        const orderedFields = state.columns.orderedFields || [];
        const dataRowIdToModelLookup = state.rows.dataRowIdToModelLookup;
        const columnsLookup = state.columns.lookup;
        const isFilteringPending = Boolean(state.filter.filterModel.items.length) || Boolean(state.filter.filterModel.quickFilterValues?.length);
        if (!rowIds.length || !orderedFields.length || !dataRowIdToModelLookup || !columnsLookup || isFilteringPending) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                rowSpanning: EMPTY_STATE
            });
        }
        const rangeToProcess = {
            firstRowIndex: 0,
            lastRowIndex: Math.min(DEFAULT_ROWS_TO_PROCESS, Math.max(rowIds.length, 0))
        };
        const rows = rowIds.map((id)=>({
                id,
                model: dataRowIdToModelLookup[id]
            }));
        const colDefs = orderedFields.map((field)=>columnsLookup[field]);
        const { spannedCells, hiddenCells, hiddenCellOriginMap } = computeRowSpanningState(apiRef, colDefs, rows, rangeToProcess, rangeToProcess, true, EMPTY_RANGE);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
            rowSpanning: {
                spannedCells,
                hiddenCells,
                hiddenCellOriginMap
            }
        });
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        rowSpanning: EMPTY_STATE
    });
};
const useGridRowSpanning = (apiRef, props)=>{
    const { range, rows: visibleRows } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridVisibleRows"])(apiRef, props);
    const renderContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRenderContextSelector"]);
    const colDefs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"]);
    const tree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"]);
    const processedRange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
        "useGridRowSpanning.useLazyRef[processedRange]": ()=>{
            return Object.keys(apiRef.current.state.rowSpanning.spannedCells).length > 0 ? {
                firstRowIndex: 0,
                lastRowIndex: Math.min(DEFAULT_ROWS_TO_PROCESS, Math.max(apiRef.current.state.rows.dataRowIds.length, 0))
            } : EMPTY_RANGE;
        }
    }["useGridRowSpanning.useLazyRef[processedRange]"]);
    const lastRange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(EMPTY_RANGE);
    const updateRowSpanningState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowSpanning.useCallback[updateRowSpanningState]": // A reset needs to occur when:
        // - The `unstable_rowSpanning` prop is updated (feature flag)
        // - The filtering is applied
        // - The sorting is applied
        // - The `paginationModel` is updated
        // - The rows are updated
        (resetState = true)=>{
            if (!props.unstable_rowSpanning) {
                if (apiRef.current.state.rowSpanning !== EMPTY_STATE) {
                    apiRef.current.setState({
                        "useGridRowSpanning.useCallback[updateRowSpanningState]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                                rowSpanning: EMPTY_STATE
                            })
                    }["useGridRowSpanning.useCallback[updateRowSpanningState]"]);
                }
                return;
            }
            if (range === null || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRowContextInitialized"])(renderContext)) {
                return;
            }
            if (resetState) {
                processedRange.current = EMPTY_RANGE;
            }
            const rangeToProcess = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUnprocessedRange"])({
                firstRowIndex: renderContext.firstRowIndex,
                lastRowIndex: Math.min(renderContext.lastRowIndex, range.lastRowIndex + 1)
            }, processedRange.current);
            if (rangeToProcess === null) {
                return;
            }
            const { spannedCells, hiddenCells, hiddenCellOriginMap, processedRange: newProcessedRange } = computeRowSpanningState(apiRef, colDefs, visibleRows, range, rangeToProcess, resetState, processedRange.current);
            processedRange.current = newProcessedRange;
            const newSpannedCellsCount = Object.keys(spannedCells).length;
            const newHiddenCellsCount = Object.keys(hiddenCells).length;
            const currentSpannedCellsCount = Object.keys(apiRef.current.state.rowSpanning.spannedCells).length;
            const currentHiddenCellsCount = Object.keys(apiRef.current.state.rowSpanning.hiddenCells).length;
            const shouldUpdateState = resetState || newSpannedCellsCount !== currentSpannedCellsCount || newHiddenCellsCount !== currentHiddenCellsCount;
            if (!shouldUpdateState) {
                return;
            }
            apiRef.current.setState({
                "useGridRowSpanning.useCallback[updateRowSpanningState]": (state)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        rowSpanning: {
                            spannedCells,
                            hiddenCells,
                            hiddenCellOriginMap
                        }
                    });
                }
            }["useGridRowSpanning.useCallback[updateRowSpanningState]"]);
        }
    }["useGridRowSpanning.useCallback[updateRowSpanningState]"], [
        apiRef,
        props.unstable_rowSpanning,
        range,
        renderContext,
        visibleRows,
        colDefs,
        processedRange
    ]);
    const prevRenderContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(renderContext);
    const isFirstRender = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(true);
    const shouldResetState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(false);
    const previousTree = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(tree);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowSpanning.useEffect": ()=>{
            const firstRender = isFirstRender.current;
            if (isFirstRender.current) {
                isFirstRender.current = false;
            }
            if (tree !== previousTree.current) {
                previousTree.current = tree;
                updateRowSpanningState(true);
                return;
            }
            if (range && lastRange.current && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRowRangeUpdated"])(range, lastRange.current)) {
                lastRange.current = range;
                shouldResetState.current = true;
            }
            if (!firstRender && prevRenderContext.current !== renderContext) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRowRangeUpdated"])(prevRenderContext.current, renderContext)) {
                    updateRowSpanningState(shouldResetState.current);
                    shouldResetState.current = false;
                }
                prevRenderContext.current = renderContext;
                return;
            }
            updateRowSpanningState();
        }
    }["useGridRowSpanning.useEffect"], [
        updateRowSpanningState,
        renderContext,
        range,
        lastRange,
        tree
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "densityStateInitializer": (()=>densityStateInitializer),
    "useGridDensity": (()=>useGridDensity)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
const densityStateInitializer = (state, props)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        density: props.initialState?.density ?? props.density ?? 'standard'
    });
const useGridDensity = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useDensity');
    apiRef.current.registerControlState({
        stateId: 'density',
        propModel: props.density,
        propOnChange: props.onDensityChange,
        stateSelector: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDensitySelector"],
        changeEvent: 'densityChange'
    });
    const setDensity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
        "useGridDensity.useEventCallback[setDensity]": (newDensity)=>{
            const currentDensity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDensitySelector"])(apiRef.current.state);
            if (currentDensity === newDensity) {
                return;
            }
            logger.debug(`Set grid density to ${newDensity}`);
            apiRef.current.setState({
                "useGridDensity.useEventCallback[setDensity]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        density: newDensity
                    })
            }["useGridDensity.useEventCallback[setDensity]"]);
        }
    }["useGridDensity.useEventCallback[setDensity]"]);
    const densityApi = {
        setDensity
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, densityApi, 'public');
    const stateExportPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridDensity.useCallback[stateExportPreProcessing]": (prevState, context)=>{
            const exportedDensity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDensitySelector"])(apiRef.current.state);
            const shouldExportRowCount = // Always export if the `exportOnlyDirtyModels` property is not activated
            !context.exportOnlyDirtyModels || // Always export if the `density` is controlled
            props.density != null || // Always export if the `density` has been initialized
            props.initialState?.density != null;
            if (!shouldExportRowCount) {
                return prevState;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState, {
                density: exportedDensity
            });
        }
    }["useGridDensity.useCallback[stateExportPreProcessing]"], [
        apiRef,
        props.density,
        props.initialState?.density
    ]);
    const stateRestorePreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridDensity.useCallback[stateRestorePreProcessing]": (params, context)=>{
            const restoredDensity = context.stateToRestore?.density ? context.stateToRestore.density : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDensitySelector"])(apiRef.current.state);
            apiRef.current.setState({
                "useGridDensity.useCallback[stateRestorePreProcessing]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        density: restoredDensity
                    })
            }["useGridDensity.useCallback[stateRestorePreProcessing]"]);
            return params;
        }
    }["useGridDensity.useCallback[stateRestorePreProcessing]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportState', stateExportPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'restoreState', stateRestorePreProcessing);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridDensity.useEffect": ()=>{
            if (props.density) {
                apiRef.current.setDensity(props.density);
            }
        }
    }["useGridDensity.useEffect"], [
        apiRef,
        props.density
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnResize/gridColumnResizeApi.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DEFAULT_GRID_AUTOSIZE_OPTIONS": (()=>DEFAULT_GRID_AUTOSIZE_OPTIONS)
});
const DEFAULT_GRID_AUTOSIZE_OPTIONS = {
    includeHeaders: true,
    includeOutliers: false,
    outliersFactor: 1.5,
    expand: false,
    disableColumnVirtualization: true
}; /**
 * The Resize API interface that is available in the grid `apiRef`.
 */ 
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridNativeEventListener": (()=>useGridNativeEventListener)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
;
;
;
const useGridNativeEventListener = (apiRef, ref, eventName, handler, options)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useNativeEventListener');
    const [added, setAdded] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState(false);
    const handlerRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(handler);
    const targetElement = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(ref) ? ref() : ref?.current ?? null;
    const wrapHandler = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridNativeEventListener.useCallback[wrapHandler]": (event)=>{
            return handlerRef.current && handlerRef.current(event);
        }
    }["useGridNativeEventListener.useCallback[wrapHandler]"], []);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridNativeEventListener.useEffect": ()=>{
            handlerRef.current = handler;
        }
    }["useGridNativeEventListener.useEffect"], [
        handler
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridNativeEventListener.useEffect": ()=>{
            if (targetElement && eventName && !added) {
                logger.debug(`Binding native ${eventName} event`);
                targetElement.addEventListener(eventName, wrapHandler, options);
                setAdded(true);
                const unsubscribe = {
                    "useGridNativeEventListener.useEffect.unsubscribe": ()=>{
                        logger.debug(`Clearing native ${eventName} event`);
                        targetElement.removeEventListener(eventName, wrapHandler, options);
                    }
                }["useGridNativeEventListener.useEffect.unsubscribe"];
                apiRef.current.subscribeEvent('unmount', unsubscribe);
            }
        }
    }["useGridNativeEventListener.useEffect"], [
        targetElement,
        wrapHandler,
        eventName,
        added,
        logger,
        options,
        apiRef
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnResize/useGridColumnResize.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "columnResizeStateInitializer": (()=>columnResizeStateInitializer),
    "useGridColumnResize": (()=>useGridColumnResize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/constants/gridClasses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createControllablePromise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/createControllablePromise.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/domUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/system/esm/RtlProvider/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useTimeout$2f$useTimeout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useTimeout$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useTimeout/useTimeout.js [app-client] (ecmascript) <export default as useTimeout>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsInterfaces.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js [app-client] (ecmascript) <export default as unstable_useEventCallback>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js [app-client] (ecmascript) <export default as unstable_ownerDocument>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnResize$2f$gridColumnResizeApi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnResize/gridColumnResizeApi.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useOnMount$2f$useOnMount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useOnMount$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useOnMount/useOnMount.js [app-client] (ecmascript) <export default as useOnMount>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridNativeEventListener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function trackFinger(event, currentTouchId) {
    if (currentTouchId !== undefined && event.changedTouches) {
        for(let i = 0; i < event.changedTouches.length; i += 1){
            const touch = event.changedTouches[i];
            if (touch.identifier === currentTouchId) {
                return {
                    x: touch.clientX,
                    y: touch.clientY
                };
            }
        }
        return false;
    }
    return {
        x: event.clientX,
        y: event.clientY
    };
}
function computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {
    let newWidth = initialOffsetToSeparator;
    if (resizeDirection === 'Right') {
        newWidth += clickX - columnBounds.left;
    } else {
        newWidth += columnBounds.right - clickX;
    }
    return newWidth;
}
function computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {
    if (resizeDirection === 'Left') {
        return clickX - columnBounds.left;
    }
    return columnBounds.right - clickX;
}
function flipResizeDirection(side) {
    if (side === 'Right') {
        return 'Left';
    }
    return 'Right';
}
function getResizeDirection(separator, isRtl) {
    const side = separator.classList.contains(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"]['columnSeparator--sideRight']) ? 'Right' : 'Left';
    if (isRtl) {
        // Resizing logic should be mirrored in the RTL case
        return flipResizeDirection(side);
    }
    return side;
}
function preventClick(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
}
/**
 * Checker that returns a promise that resolves when the column virtualization
 * is disabled.
 */ function useColumnVirtualizationDisabled(apiRef) {
    const promise = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const selector = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$virtualization$2f$gridVirtualizationSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVirtualizationColumnEnabledSelector"])(apiRef);
    const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, selector);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useColumnVirtualizationDisabled.useEffect": ()=>{
            if (promise.current && value === false) {
                promise.current.resolve();
                promise.current = undefined;
            }
        }
    }["useColumnVirtualizationDisabled.useEffect"]);
    const asyncCheck = ()=>{
        if (!promise.current) {
            if (selector() === false) {
                return Promise.resolve();
            }
            promise.current = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$createControllablePromise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createControllablePromise"])();
        }
        return promise.current;
    };
    return asyncCheck;
}
/**
 * Basic statistical outlier detection, checks if the value is `F * IQR` away from
 * the Q1 and Q3 boundaries. IQR: interquartile range.
 */ function excludeOutliers(inputValues, factor) {
    if (inputValues.length < 4) {
        return inputValues;
    }
    const values = inputValues.slice();
    values.sort((a, b)=>a - b);
    const q1 = values[Math.floor(values.length * 0.25)];
    const q3 = values[Math.floor(values.length * 0.75) - 1];
    const iqr = q3 - q1;
    // We make a small adjustment if `iqr < 5` for the cases where the IQR is
    // very small (for example zero) due to very close by values in the input data.
    // Otherwise, with an IQR of `0`, anything outside that would be considered
    // an outlier, but it makes more sense visually to allow for this 5px variance
    // rather than showing a cropped cell.
    const deviation = iqr < 5 ? 5 : iqr * factor;
    return values.filter((v)=>v > q1 - deviation && v < q3 + deviation);
}
function extractColumnWidths(apiRef, options, columns) {
    const widthByField = {};
    const root = apiRef.current.rootElementRef.current;
    root.classList.add(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].autosizing);
    columns.forEach((column)=>{
        const cells = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findGridCells"])(apiRef.current, column.field);
        const widths = cells.map((cell)=>{
            return cell.getBoundingClientRect().width ?? 0;
        });
        const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);
        if (options.includeHeaders) {
            const header = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findGridHeader"])(apiRef.current, column.field);
            if (header) {
                const title = header.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].columnHeaderTitle}`);
                const content = header.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].columnHeaderTitleContainerContent}`);
                const iconContainer = header.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].iconButtonContainer}`);
                const menuContainer = header.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].menuIcon}`);
                const element = title ?? content;
                const style = window.getComputedStyle(header, null);
                const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);
                const contentWidth = element.scrollWidth + 1;
                const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);
                filteredWidths.push(width);
            }
        }
        const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;
        const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;
        const min = hasColumnMin ? column.minWidth : 0;
        const max = hasColumnMax ? column.maxWidth : Infinity;
        const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);
        widthByField[column.field] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(maxContent, min, max);
    });
    root.classList.remove(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].autosizing);
    return widthByField;
}
const columnResizeStateInitializer = (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        columnResize: {
            resizingColumnField: ''
        }
    });
function createResizeRefs() {
    return {
        colDef: undefined,
        initialColWidth: 0,
        initialTotalWidth: 0,
        previousMouseClickEvent: undefined,
        columnHeaderElement: undefined,
        headerFilterElement: undefined,
        groupHeaderElements: [],
        cellElements: [],
        leftPinnedCellsAfter: [],
        rightPinnedCellsBefore: [],
        fillerLeft: undefined,
        fillerRight: undefined,
        leftPinnedHeadersAfter: [],
        rightPinnedHeadersBefore: []
    };
}
const useGridColumnResize = (apiRef, props)=>{
    const isRtl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRtl"])();
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridColumnResize');
    const refs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(createResizeRefs).current;
    // To improve accessibility, the separator has padding on both sides.
    // Clicking inside the padding area should be treated as a click in the separator.
    // This ref stores the offset between the click and the separator.
    const initialOffsetToSeparator = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const resizeDirection = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const stopResizeEventTimeout = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useTimeout$2f$useTimeout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useTimeout$3e$__["useTimeout"])();
    const touchId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    const updateWidth = (newWidth)=>{
        logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);
        const prevWidth = refs.columnHeaderElement.offsetWidth;
        const widthDiff = newWidth - prevWidth;
        const columnWidthDiff = newWidth - refs.initialColWidth;
        const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;
        apiRef.current.rootElementRef?.current?.style.setProperty('--DataGrid-rowWidth', `${newTotalWidth}px`);
        refs.colDef.computedWidth = newWidth;
        refs.colDef.width = newWidth;
        refs.colDef.flex = 0;
        refs.columnHeaderElement.style.width = `${newWidth}px`;
        const headerFilterElement = refs.headerFilterElement;
        if (headerFilterElement) {
            headerFilterElement.style.width = `${newWidth}px`;
        }
        refs.groupHeaderElements.forEach((element)=>{
            const div = element;
            let finalWidth;
            if (div.getAttribute('aria-colspan') === '1') {
                finalWidth = `${newWidth}px`;
            } else {
                // Cell with colspan > 1 cannot be just updated width new width.
                // Instead, we add width diff to the current width.
                finalWidth = `${div.offsetWidth + widthDiff}px`;
            }
            div.style.width = finalWidth;
        });
        refs.cellElements.forEach((element)=>{
            const div = element;
            let finalWidth;
            if (div.getAttribute('aria-colspan') === '1') {
                finalWidth = `${newWidth}px`;
            } else {
                // Cell with colspan > 1 cannot be just updated width new width.
                // Instead, we add width diff to the current width.
                finalWidth = `${div.offsetWidth + widthDiff}px`;
            }
            div.style.setProperty('--width', finalWidth);
        });
        const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);
        if (pinnedPosition === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].LEFT) {
            updateProperty(refs.fillerLeft, 'width', widthDiff);
            refs.leftPinnedCellsAfter.forEach((cell)=>{
                updateProperty(cell, 'left', widthDiff);
            });
            refs.leftPinnedHeadersAfter.forEach((header)=>{
                updateProperty(header, 'left', widthDiff);
            });
        }
        if (pinnedPosition === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].RIGHT) {
            updateProperty(refs.fillerRight, 'width', widthDiff);
            refs.rightPinnedCellsBefore.forEach((cell)=>{
                updateProperty(cell, 'right', widthDiff);
            });
            refs.rightPinnedHeadersBefore.forEach((header)=>{
                updateProperty(header, 'right', widthDiff);
            });
        }
    };
    const finishResize = (nativeEvent)=>{
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        stopListening();
        // Prevent double-clicks from being interpreted as two separate clicks
        if (refs.previousMouseClickEvent) {
            const prevEvent = refs.previousMouseClickEvent;
            const prevTimeStamp = prevEvent.timeStamp;
            const prevClientX = prevEvent.clientX;
            const prevClientY = prevEvent.clientY;
            // Check if the current event is part of a double-click
            if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {
                refs.previousMouseClickEvent = undefined;
                apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);
                return;
            }
        }
        if (refs.colDef) {
            apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);
            logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);
            // Since during resizing we update the columns width outside of React, React is unable to
            // reapply the right style properties. We need to sync the state manually.
            // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405
            const columnsState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnsStateSelector"])(apiRef.current.state);
            refs.groupHeaderElements.forEach((element)=>{
                const fields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFieldsFromGroupHeaderElem"])(element);
                const div = element;
                const newWidth = fields.reduce((acc, field)=>{
                    if (columnsState.columnVisibilityModel[field] !== false) {
                        return acc + columnsState.lookup[field].computedWidth;
                    }
                    return acc;
                }, 0);
                const finalWidth = `${newWidth}px`;
                div.style.width = finalWidth;
            });
        }
        stopResizeEventTimeout.start(0, ()=>{
            apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);
        });
    };
    const storeReferences = (colDef, separator, xStart)=>{
        const root = apiRef.current.rootElementRef.current;
        refs.initialColWidth = colDef.computedWidth;
        refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;
        refs.colDef = colDef;
        refs.columnHeaderElement = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findHeaderElementFromField"])(apiRef.current.columnHeadersContainerRef.current, colDef.field);
        const headerFilterElement = root.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].headerFilterRow} [data-field="${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeOperandAttributeSelector"])(colDef.field)}"]`);
        if (headerFilterElement) {
            refs.headerFilterElement = headerFilterElement;
        }
        refs.groupHeaderElements = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findGroupHeaderElementsFromField"])(apiRef.current.columnHeadersContainerRef?.current, colDef.field);
        refs.cellElements = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findGridCellElementsFromCol"])(refs.columnHeaderElement, apiRef.current);
        refs.fillerLeft = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findGridElement"])(apiRef.current, isRtl ? 'filler--pinnedRight' : 'filler--pinnedLeft');
        refs.fillerRight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findGridElement"])(apiRef.current, isRtl ? 'filler--pinnedLeft' : 'filler--pinnedRight');
        const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);
        refs.leftPinnedCellsAfter = pinnedPosition !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].LEFT ? [] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findLeftPinnedCellsAfterCol"])(apiRef.current, refs.columnHeaderElement, isRtl);
        refs.rightPinnedCellsBefore = pinnedPosition !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].RIGHT ? [] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findRightPinnedCellsBeforeCol"])(apiRef.current, refs.columnHeaderElement, isRtl);
        refs.leftPinnedHeadersAfter = pinnedPosition !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].LEFT ? [] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findLeftPinnedHeadersAfterCol"])(apiRef.current, refs.columnHeaderElement, isRtl);
        refs.rightPinnedHeadersBefore = pinnedPosition !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsInterfaces$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPinnedColumnPosition"].RIGHT ? [] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findRightPinnedHeadersBeforeCol"])(apiRef.current, refs.columnHeaderElement, isRtl);
        resizeDirection.current = getResizeDirection(separator, isRtl);
        initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
    };
    const handleResizeMouseUp = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])(finishResize);
    const handleResizeMouseMove = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridColumnResize.useEventCallback[handleResizeMouseMove]": (nativeEvent)=>{
            // Cancel move in case some other element consumed a mouseup event and it was not fired.
            if (nativeEvent.buttons === 0) {
                handleResizeMouseUp(nativeEvent);
                return;
            }
            let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
            newWidth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);
            updateWidth(newWidth);
            const params = {
                element: refs.columnHeaderElement,
                colDef: refs.colDef,
                width: newWidth
            };
            apiRef.current.publishEvent('columnResize', params, nativeEvent);
        }
    }["useGridColumnResize.useEventCallback[handleResizeMouseMove]"]);
    const handleTouchEnd = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridColumnResize.useEventCallback[handleTouchEnd]": (nativeEvent)=>{
            const finger = trackFinger(nativeEvent, touchId.current);
            if (!finger) {
                return;
            }
            finishResize(nativeEvent);
        }
    }["useGridColumnResize.useEventCallback[handleTouchEnd]"]);
    const handleTouchMove = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridColumnResize.useEventCallback[handleTouchMove]": (nativeEvent)=>{
            const finger = trackFinger(nativeEvent, touchId.current);
            if (!finger) {
                return;
            }
            // Cancel move in case some other element consumed a touchmove event and it was not fired.
            if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
                handleTouchEnd(nativeEvent);
                return;
            }
            let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
            newWidth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clamp"])(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);
            updateWidth(newWidth);
            const params = {
                element: refs.columnHeaderElement,
                colDef: refs.colDef,
                width: newWidth
            };
            apiRef.current.publishEvent('columnResize', params, nativeEvent);
        }
    }["useGridColumnResize.useEventCallback[handleTouchMove]"]);
    const handleTouchStart = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridColumnResize.useEventCallback[handleTouchStart]": (event)=>{
            const cellSeparator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findParentElementFromClassName"])(event.target, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"]['columnSeparator--resizable']);
            // Let the event bubble if the target is not a col separator
            if (!cellSeparator) {
                return;
            }
            const touch = event.changedTouches[0];
            if (touch != null) {
                // A number that uniquely identifies the current finger in the touch session.
                touchId.current = touch.identifier;
            }
            const columnHeaderElement = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findParentElementFromClassName"])(event.target, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].columnHeader);
            const field = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFieldFromHeaderElem"])(columnHeaderElement);
            const colDef = apiRef.current.getColumn(field);
            logger.debug(`Start Resize on col ${colDef.field}`);
            apiRef.current.publishEvent('columnResizeStart', {
                field
            }, event);
            storeReferences(colDef, cellSeparator, touch.clientX);
            const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__["unstable_ownerDocument"])(event.currentTarget);
            doc.addEventListener('touchmove', handleTouchMove);
            doc.addEventListener('touchend', handleTouchEnd);
        }
    }["useGridColumnResize.useEventCallback[handleTouchStart]"]);
    const stopListening = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnResize.useCallback[stopListening]": ()=>{
            const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__["unstable_ownerDocument"])(apiRef.current.rootElementRef.current);
            doc.body.style.removeProperty('cursor');
            doc.removeEventListener('mousemove', handleResizeMouseMove);
            doc.removeEventListener('mouseup', handleResizeMouseUp);
            doc.removeEventListener('touchmove', handleTouchMove);
            doc.removeEventListener('touchend', handleTouchEnd);
            // The click event runs right after the mouseup event, we want to wait until it
            // has been canceled before removing our handler.
            setTimeout({
                "useGridColumnResize.useCallback[stopListening]": ()=>{
                    doc.removeEventListener('click', preventClick, true);
                }
            }["useGridColumnResize.useCallback[stopListening]"], 100);
            if (refs.columnHeaderElement) {
                refs.columnHeaderElement.style.pointerEvents = 'unset';
            }
        }
    }["useGridColumnResize.useCallback[stopListening]"], [
        apiRef,
        refs,
        handleResizeMouseMove,
        handleResizeMouseUp,
        handleTouchMove,
        handleTouchEnd
    ]);
    const handleResizeStart = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnResize.useCallback[handleResizeStart]": ({ field })=>{
            apiRef.current.setState({
                "useGridColumnResize.useCallback[handleResizeStart]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        columnResize: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.columnResize, {
                            resizingColumnField: field
                        })
                    })
            }["useGridColumnResize.useCallback[handleResizeStart]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridColumnResize.useCallback[handleResizeStart]"], [
        apiRef
    ]);
    const handleResizeStop = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnResize.useCallback[handleResizeStop]": ()=>{
            apiRef.current.setState({
                "useGridColumnResize.useCallback[handleResizeStop]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        columnResize: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.columnResize, {
                            resizingColumnField: ''
                        })
                    })
            }["useGridColumnResize.useCallback[handleResizeStop]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridColumnResize.useCallback[handleResizeStop]"], [
        apiRef
    ]);
    const handleColumnResizeMouseDown = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridColumnResize.useEventCallback[handleColumnResizeMouseDown]": ({ colDef }, event)=>{
            // Only handle left clicks
            if (event.button !== 0) {
                return;
            }
            // Skip if the column isn't resizable
            if (!event.currentTarget.classList.contains(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"]['columnSeparator--resizable'])) {
                return;
            }
            // Avoid text selection
            event.preventDefault();
            logger.debug(`Start Resize on col ${colDef.field}`);
            apiRef.current.publishEvent('columnResizeStart', {
                field: colDef.field
            }, event);
            storeReferences(colDef, event.currentTarget, event.clientX);
            const doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__["unstable_ownerDocument"])(apiRef.current.rootElementRef.current);
            doc.body.style.cursor = 'col-resize';
            refs.previousMouseClickEvent = event.nativeEvent;
            doc.addEventListener('mousemove', handleResizeMouseMove);
            doc.addEventListener('mouseup', handleResizeMouseUp);
            // Prevent the click event if we have resized the column.
            // Fixes https://github.com/mui/mui-x/issues/4777
            doc.addEventListener('click', preventClick, true);
        }
    }["useGridColumnResize.useEventCallback[handleColumnResizeMouseDown]"]);
    const handleColumnSeparatorDoubleClick = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useEventCallback$2f$useEventCallback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_useEventCallback$3e$__["unstable_useEventCallback"])({
        "useGridColumnResize.useEventCallback[handleColumnSeparatorDoubleClick]": (params, event)=>{
            if (props.disableAutosize) {
                return;
            }
            // Only handle left clicks
            if (event.button !== 0) {
                return;
            }
            const column = apiRef.current.state.columns.lookup[params.field];
            if (column.resizable === false) {
                return;
            }
            apiRef.current.autosizeColumns((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, props.autosizeOptions, {
                disableColumnVirtualization: false,
                columns: [
                    column.field
                ]
            }));
        }
    }["useGridColumnResize.useEventCallback[handleColumnSeparatorDoubleClick]"]);
    /**
   * API METHODS
   */ const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);
    const isAutosizingRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(false);
    const autosizeColumns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnResize.useCallback[autosizeColumns]": async (userOptions)=>{
            const root = apiRef.current.rootElementRef?.current;
            if (!root) {
                return;
            }
            if (isAutosizingRef.current) {
                return;
            }
            isAutosizingRef.current = true;
            const state = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnsStateSelector"])(apiRef.current.state);
            const options = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnResize$2f$gridColumnResizeApi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_GRID_AUTOSIZE_OPTIONS"], userOptions, {
                columns: userOptions?.columns ?? state.orderedFields
            });
            options.columns = options.columns.filter({
                "useGridColumnResize.useCallback[autosizeColumns]": (c)=>state.columnVisibilityModel[c] !== false
            }["useGridColumnResize.useCallback[autosizeColumns]"]);
            const columns = options.columns.map({
                "useGridColumnResize.useCallback[autosizeColumns].columns": (c)=>apiRef.current.state.columns.lookup[c]
            }["useGridColumnResize.useCallback[autosizeColumns].columns"]);
            try {
                if (!props.disableVirtualization && options.disableColumnVirtualization) {
                    apiRef.current.unstable_setColumnVirtualization(false);
                    await columnVirtualizationDisabled();
                }
                const widthByField = extractColumnWidths(apiRef, options, columns);
                const newColumns = columns.map({
                    "useGridColumnResize.useCallback[autosizeColumns].newColumns": (column)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, column, {
                            width: widthByField[column.field],
                            computedWidth: widthByField[column.field],
                            flex: 0
                        })
                }["useGridColumnResize.useCallback[autosizeColumns].newColumns"]);
                if (options.expand) {
                    const visibleColumns = state.orderedFields.map({
                        "useGridColumnResize.useCallback[autosizeColumns].visibleColumns": (field)=>state.lookup[field]
                    }["useGridColumnResize.useCallback[autosizeColumns].visibleColumns"]).filter({
                        "useGridColumnResize.useCallback[autosizeColumns].visibleColumns": (c)=>state.columnVisibilityModel[c.field] !== false
                    }["useGridColumnResize.useCallback[autosizeColumns].visibleColumns"]);
                    const totalWidth = visibleColumns.reduce({
                        "useGridColumnResize.useCallback[autosizeColumns].totalWidth": (total, column)=>total + (widthByField[column.field] ?? column.computedWidth ?? column.width)
                    }["useGridColumnResize.useCallback[autosizeColumns].totalWidth"], 0);
                    const availableWidth = apiRef.current.getRootDimensions().viewportInnerSize.width;
                    const remainingWidth = availableWidth - totalWidth;
                    if (remainingWidth > 0) {
                        const widthPerColumn = remainingWidth / (newColumns.length || 1);
                        newColumns.forEach({
                            "useGridColumnResize.useCallback[autosizeColumns]": (column)=>{
                                column.width += widthPerColumn;
                                column.computedWidth += widthPerColumn;
                            }
                        }["useGridColumnResize.useCallback[autosizeColumns]"]);
                    }
                }
                apiRef.current.updateColumns(newColumns);
                newColumns.forEach({
                    "useGridColumnResize.useCallback[autosizeColumns]": (newColumn, index)=>{
                        if (newColumn.width !== columns[index].width) {
                            const width = newColumn.width;
                            apiRef.current.publishEvent('columnWidthChange', {
                                element: apiRef.current.getColumnHeaderElement(newColumn.field),
                                colDef: newColumn,
                                width
                            });
                        }
                    }
                }["useGridColumnResize.useCallback[autosizeColumns]"]);
            } finally{
                if (!props.disableVirtualization) {
                    apiRef.current.unstable_setColumnVirtualization(true);
                }
                isAutosizingRef.current = false;
            }
        }
    }["useGridColumnResize.useCallback[autosizeColumns]"], [
        apiRef,
        columnVirtualizationDisabled,
        props.disableVirtualization
    ]);
    /**
   * EFFECTS
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridColumnResize.useEffect": ()=>stopListening
    }["useGridColumnResize.useEffect"], [
        stopListening
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useOnMount$2f$useOnMount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__useOnMount$3e$__["useOnMount"])({
        "useGridColumnResize.useOnMount": ()=>{
            if (props.autosizeOnMount) {
                Promise.resolve().then({
                    "useGridColumnResize.useOnMount": ()=>{
                        apiRef.current.autosizeColumns(props.autosizeOptions);
                    }
                }["useGridColumnResize.useOnMount"]);
            }
        }
    }["useGridColumnResize.useOnMount"]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridNativeEventListener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridNativeEventListener"])(apiRef, {
        "useGridColumnResize.useGridNativeEventListener": ()=>apiRef.current.columnHeadersContainerRef?.current
    }["useGridColumnResize.useGridNativeEventListener"], 'touchstart', handleTouchStart, {
        passive: true
    });
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, {
        autosizeColumns
    }, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnResizeStop', handleResizeStop);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnResizeStart', handleResizeStart);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnResize', props.onColumnResize);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnWidthChange', props.onColumnWidthChange);
};
function updateProperty(element, property, delta) {
    if (!element) {
        return;
    }
    element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationMeta.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridPaginationMeta": (()=>useGridPaginationMeta)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
;
;
;
;
;
const useGridPaginationMeta = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridPaginationMeta');
    const paginationMeta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationMetaSelector"]);
    apiRef.current.registerControlState({
        stateId: 'paginationMeta',
        propModel: props.paginationMeta,
        propOnChange: props.onPaginationMetaChange,
        stateSelector: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationMetaSelector"],
        changeEvent: 'paginationMetaChange'
    });
    /**
   * API METHODS
   */ const setPaginationMeta = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationMeta.useCallback[setPaginationMeta]": (newPaginationMeta)=>{
            if (paginationMeta === newPaginationMeta) {
                return;
            }
            logger.debug("Setting 'paginationMeta' to", newPaginationMeta);
            apiRef.current.setState({
                "useGridPaginationMeta.useCallback[setPaginationMeta]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.pagination, {
                            meta: newPaginationMeta
                        })
                    })
            }["useGridPaginationMeta.useCallback[setPaginationMeta]"]);
        }
    }["useGridPaginationMeta.useCallback[setPaginationMeta]"], [
        apiRef,
        logger,
        paginationMeta
    ]);
    const paginationMetaApi = {
        setPaginationMeta
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, paginationMetaApi, 'public');
    /**
   * PRE-PROCESSING
   */ const stateExportPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationMeta.useCallback[stateExportPreProcessing]": (prevState, context)=>{
            const exportedPaginationMeta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationMetaSelector"])(apiRef);
            const shouldExportRowCount = // Always export if the `exportOnlyDirtyModels` property is not activated
            !context.exportOnlyDirtyModels || // Always export if the `paginationMeta` is controlled
            props.paginationMeta != null || // Always export if the `paginationMeta` has been initialized
            props.initialState?.pagination?.meta != null;
            if (!shouldExportRowCount) {
                return prevState;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState, {
                pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState.pagination, {
                    meta: exportedPaginationMeta
                })
            });
        }
    }["useGridPaginationMeta.useCallback[stateExportPreProcessing]"], [
        apiRef,
        props.paginationMeta,
        props.initialState?.pagination?.meta
    ]);
    const stateRestorePreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationMeta.useCallback[stateRestorePreProcessing]": (params, context)=>{
            const restoredPaginationMeta = context.stateToRestore.pagination?.meta ? context.stateToRestore.pagination.meta : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationMetaSelector"])(apiRef);
            apiRef.current.setState({
                "useGridPaginationMeta.useCallback[stateRestorePreProcessing]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.pagination, {
                            meta: restoredPaginationMeta
                        })
                    })
            }["useGridPaginationMeta.useCallback[stateRestorePreProcessing]"]);
            return params;
        }
    }["useGridPaginationMeta.useCallback[stateRestorePreProcessing]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportState', stateExportPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'restoreState', stateRestorePreProcessing);
    /**
   * EFFECTS
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridPaginationMeta.useEffect": ()=>{
            if (props.paginationMeta) {
                apiRef.current.setPaginationMeta(props.paginationMeta);
            }
        }
    }["useGridPaginationMeta.useEffect"], [
        apiRef,
        props.paginationMeta
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationModel.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getDerivedPaginationModel": (()=>getDerivedPaginationModel),
    "useGridPaginationModel": (()=>useGridPaginationModel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
const getDerivedPaginationModel = (paginationState, signature, paginationModelProp)=>{
    let paginationModel = paginationState.paginationModel;
    const rowCount = paginationState.rowCount;
    const pageSize = paginationModelProp?.pageSize ?? paginationModel.pageSize;
    const page = paginationModelProp?.page ?? paginationModel.page;
    const pageCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPageCount"])(rowCount, pageSize, page);
    if (paginationModelProp && (paginationModelProp?.page !== paginationModel.page || paginationModelProp?.pageSize !== paginationModel.pageSize)) {
        paginationModel = paginationModelProp;
    }
    const validPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValidPage"])(paginationModel.page, pageCount);
    if (validPage !== paginationModel.page) {
        paginationModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, paginationModel, {
            page: validPage
        });
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["throwIfPageSizeExceedsTheLimit"])(paginationModel.pageSize, signature);
    return paginationModel;
};
const useGridPaginationModel = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridPaginationModel');
    const densityFactor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDensityFactorSelector"]);
    const rowHeight = Math.floor(props.rowHeight * densityFactor);
    apiRef.current.registerControlState({
        stateId: 'paginationModel',
        propModel: props.paginationModel,
        propOnChange: props.onPaginationModelChange,
        stateSelector: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"],
        changeEvent: 'paginationModelChange'
    });
    /**
   * API METHODS
   */ const setPage = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationModel.useCallback[setPage]": (page)=>{
            const currentModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"])(apiRef);
            if (page === currentModel.page) {
                return;
            }
            logger.debug(`Setting page to ${page}`);
            apiRef.current.setPaginationModel({
                page,
                pageSize: currentModel.pageSize
            });
        }
    }["useGridPaginationModel.useCallback[setPage]"], [
        apiRef,
        logger
    ]);
    const setPageSize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationModel.useCallback[setPageSize]": (pageSize)=>{
            const currentModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"])(apiRef);
            if (pageSize === currentModel.pageSize) {
                return;
            }
            logger.debug(`Setting page size to ${pageSize}`);
            apiRef.current.setPaginationModel({
                pageSize,
                page: currentModel.page
            });
        }
    }["useGridPaginationModel.useCallback[setPageSize]"], [
        apiRef,
        logger
    ]);
    const setPaginationModel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationModel.useCallback[setPaginationModel]": (paginationModel)=>{
            const currentModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"])(apiRef);
            if (paginationModel === currentModel) {
                return;
            }
            logger.debug("Setting 'paginationModel' to", paginationModel);
            apiRef.current.setState({
                "useGridPaginationModel.useCallback[setPaginationModel]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.pagination, {
                            paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)
                        })
                    })
            }["useGridPaginationModel.useCallback[setPaginationModel]"], 'setPaginationModel');
        }
    }["useGridPaginationModel.useCallback[setPaginationModel]"], [
        apiRef,
        logger,
        props.signature
    ]);
    const paginationModelApi = {
        setPage,
        setPageSize,
        setPaginationModel
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, paginationModelApi, 'public');
    /**
   * PRE-PROCESSING
   */ const stateExportPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationModel.useCallback[stateExportPreProcessing]": (prevState, context)=>{
            const paginationModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"])(apiRef);
            const shouldExportPaginationModel = // Always export if the `exportOnlyDirtyModels` property is not activated
            !context.exportOnlyDirtyModels || // Always export if the `paginationModel` is controlled
            props.paginationModel != null || // Always export if the `paginationModel` has been initialized
            props.initialState?.pagination?.paginationModel != null || // Export if `page` or `pageSize` is not equal to the default value
            paginationModel.page !== 0 && paginationModel.pageSize !== (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultPageSize"])(props.autoPageSize);
            if (!shouldExportPaginationModel) {
                return prevState;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState, {
                pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState.pagination, {
                    paginationModel
                })
            });
        }
    }["useGridPaginationModel.useCallback[stateExportPreProcessing]"], [
        apiRef,
        props.paginationModel,
        props.initialState?.pagination?.paginationModel,
        props.autoPageSize
    ]);
    const stateRestorePreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationModel.useCallback[stateRestorePreProcessing]": (params, context)=>{
            const paginationModel = context.stateToRestore.pagination?.paginationModel ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultGridPaginationModel"])(props.autoPageSize), context.stateToRestore.pagination?.paginationModel) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"])(apiRef);
            apiRef.current.setState({
                "useGridPaginationModel.useCallback[stateRestorePreProcessing]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.pagination, {
                            paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)
                        })
                    })
            }["useGridPaginationModel.useCallback[stateRestorePreProcessing]"], 'stateRestorePreProcessing');
            return params;
        }
    }["useGridPaginationModel.useCallback[stateRestorePreProcessing]"], [
        apiRef,
        props.autoPageSize,
        props.signature
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportState', stateExportPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'restoreState', stateRestorePreProcessing);
    /**
   * EVENTS
   */ const handlePaginationModelChange = ()=>{
        const paginationModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"])(apiRef);
        if (apiRef.current.virtualScrollerRef?.current) {
            apiRef.current.scrollToIndexes({
                rowIndex: paginationModel.page * paginationModel.pageSize
            });
        }
    };
    const handleUpdateAutoPageSize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationModel.useCallback[handleUpdateAutoPageSize]": ()=>{
            if (!props.autoPageSize) {
                return;
            }
            const dimensions = apiRef.current.getRootDimensions();
            const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);
            apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);
        }
    }["useGridPaginationModel.useCallback[handleUpdateAutoPageSize]"], [
        apiRef,
        props.autoPageSize,
        rowHeight
    ]);
    const handleRowCountChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPaginationModel.useCallback[handleRowCountChange]": (newRowCount)=>{
            if (newRowCount == null) {
                return;
            }
            const paginationModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"])(apiRef);
            const pageCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPageCountSelector"])(apiRef);
            if (paginationModel.page > pageCount - 1) {
                apiRef.current.setPage(Math.max(0, pageCount - 1));
            }
        }
    }["useGridPaginationModel.useCallback[handleRowCountChange]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'paginationModelChange', handlePaginationModelChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'rowCountChange', handleRowCountChange);
    /**
   * EFFECTS
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridPaginationModel.useEffect": ()=>{
            apiRef.current.setState({
                "useGridPaginationModel.useEffect": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.pagination, {
                            paginationModel: getDerivedPaginationModel(state.pagination, props.signature, props.paginationModel)
                        })
                    })
            }["useGridPaginationModel.useEffect"]);
        }
    }["useGridPaginationModel.useEffect"], [
        apiRef,
        props.paginationModel,
        props.paginationMode,
        props.signature
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect(handleUpdateAutoPageSize, [
        handleUpdateAutoPageSize
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridRowCount.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridRowCount": (()=>useGridRowCount)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
const useGridRowCount = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridRowCount');
    const visibleTopLevelRowCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredTopLevelRowCountSelector"]);
    const rowCountState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationRowCountSelector"]);
    const paginationMeta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationMetaSelector"]);
    const paginationModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"]);
    const previousPageSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
        "useGridRowCount.useLazyRef[previousPageSize]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationModelSelector"])(apiRef).pageSize
    }["useGridRowCount.useLazyRef[previousPageSize]"]);
    apiRef.current.registerControlState({
        stateId: 'paginationRowCount',
        propModel: props.rowCount,
        propOnChange: props.onRowCountChange,
        stateSelector: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationRowCountSelector"],
        changeEvent: 'rowCountChange'
    });
    /**
   * API METHODS
   */ const setRowCount = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowCount.useCallback[setRowCount]": (newRowCount)=>{
            if (rowCountState === newRowCount) {
                return;
            }
            logger.debug("Setting 'rowCount' to", newRowCount);
            apiRef.current.setState({
                "useGridRowCount.useCallback[setRowCount]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.pagination, {
                            rowCount: newRowCount
                        })
                    })
            }["useGridRowCount.useCallback[setRowCount]"]);
        }
    }["useGridRowCount.useCallback[setRowCount]"], [
        apiRef,
        logger,
        rowCountState
    ]);
    const paginationRowCountApi = {
        setRowCount
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, paginationRowCountApi, 'public');
    /**
   * PRE-PROCESSING
   */ const stateExportPreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowCount.useCallback[stateExportPreProcessing]": (prevState, context)=>{
            const exportedRowCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationRowCountSelector"])(apiRef);
            const shouldExportRowCount = // Always export if the `exportOnlyDirtyModels` property is not activated
            !context.exportOnlyDirtyModels || // Always export if the `rowCount` is controlled
            props.rowCount != null || // Always export if the `rowCount` has been initialized
            props.initialState?.pagination?.rowCount != null;
            if (!shouldExportRowCount) {
                return prevState;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState, {
                pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, prevState.pagination, {
                    rowCount: exportedRowCount
                })
            });
        }
    }["useGridRowCount.useCallback[stateExportPreProcessing]"], [
        apiRef,
        props.rowCount,
        props.initialState?.pagination?.rowCount
    ]);
    const stateRestorePreProcessing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowCount.useCallback[stateRestorePreProcessing]": (params, context)=>{
            const restoredRowCount = context.stateToRestore.pagination?.rowCount ? context.stateToRestore.pagination.rowCount : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationRowCountSelector"])(apiRef);
            apiRef.current.setState({
                "useGridRowCount.useCallback[stateRestorePreProcessing]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.pagination, {
                            rowCount: restoredRowCount
                        })
                    })
            }["useGridRowCount.useCallback[stateRestorePreProcessing]"]);
            return params;
        }
    }["useGridRowCount.useCallback[stateRestorePreProcessing]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportState', stateExportPreProcessing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'restoreState', stateRestorePreProcessing);
    /**
   * EVENTS
   */ const handlePaginationModelChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowCount.useCallback[handlePaginationModelChange]": (model)=>{
            if (props.paginationMode === 'client' || !previousPageSize.current) {
                return;
            }
            if (model.pageSize !== previousPageSize.current) {
                previousPageSize.current = model.pageSize;
                if (rowCountState === -1) {
                    // Row count unknown and page size changed, reset the page
                    apiRef.current.setPage(0);
                }
            }
        }
    }["useGridRowCount.useCallback[handlePaginationModelChange]"], [
        props.paginationMode,
        previousPageSize,
        rowCountState,
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'paginationModelChange', handlePaginationModelChange);
    /**
   * EFFECTS
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowCount.useEffect": ()=>{
            if (props.paginationMode === 'client') {
                apiRef.current.setRowCount(visibleTopLevelRowCount);
            } else if (props.rowCount != null) {
                apiRef.current.setRowCount(props.rowCount);
            }
        }
    }["useGridRowCount.useEffect"], [
        apiRef,
        props.paginationMode,
        visibleTopLevelRowCount,
        props.rowCount
    ]);
    const isLastPage = paginationMeta.hasNextPage === false;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowCount.useEffect": ()=>{
            if (isLastPage && rowCountState === -1) {
                apiRef.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);
            }
        }
    }["useGridRowCount.useEffect"], [
        apiRef,
        visibleTopLevelRowCount,
        isLastPage,
        rowCountState,
        paginationModel
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "paginationStateInitializer": (()=>paginationStateInitializer),
    "useGridPagination": (()=>useGridPagination)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$useGridPaginationMeta$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationMeta.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$useGridPaginationModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationModel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$useGridRowCount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridRowCount.js [app-client] (ecmascript)");
;
;
;
;
;
const paginationStateInitializer = (state, props)=>{
    const paginationModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultGridPaginationModel"])(props.autoPageSize), props.paginationModel ?? props.initialState?.pagination?.paginationModel);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["throwIfPageSizeExceedsTheLimit"])(paginationModel.pageSize, props.signature);
    const rowCount = props.rowCount ?? props.initialState?.pagination?.rowCount;
    const meta = props.paginationMeta ?? props.initialState?.pagination?.meta ?? {};
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        pagination: {
            paginationModel,
            rowCount,
            meta
        }
    });
};
const useGridPagination = (apiRef, props)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$useGridPaginationMeta$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridPaginationMeta"])(apiRef, props);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$useGridPaginationModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridPaginationModel"])(apiRef, props);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$useGridRowCount$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRowCount"])(apiRef, props);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "rowsMetaStateInitializer": (()=>rowsMetaStateInitializer),
    "useGridRowsMeta": (()=>useGridRowsMeta)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$ResizeObserver$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/ResizeObserver.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeApplier$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const rowsMetaStateInitializer = (state, props, apiRef)=>{
    apiRef.current.caches.rowsMeta = {
        heights: new Map()
    };
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        rowsMeta: {
            currentPageTotalHeight: 0,
            positions: []
        }
    });
};
const useGridRowsMeta = (apiRef, props)=>{
    const { getRowHeight: getRowHeightProp, getRowSpacing, getEstimatedRowHeight } = props;
    const heightCache = apiRef.current.caches.rowsMeta.heights;
    const lastMeasuredRowIndex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(-1);
    const hasRowWithAutoHeight = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(false);
    const isHeightMetaValid = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(false);
    const densityFactor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$density$2f$densitySelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDensityFactorSelector"]);
    const filterModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilterModelSelector"]);
    const paginationState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPaginationSelector"]);
    const sortModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$sorting$2f$gridSortingSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridSortModelSelector"]);
    const currentPage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridVisibleRows"])(apiRef, props);
    const pinnedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPinnedRowsSelector"]);
    const rowHeight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, {
        "useGridRowsMeta.useGridSelector[rowHeight]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"])(apiRef.current.state).rowHeight
    }["useGridRowsMeta.useGridSelector[rowHeight]"]);
    const getRowHeightEntry = (rowId)=>{
        let entry = heightCache.get(rowId);
        if (entry === undefined) {
            entry = {
                content: rowHeight,
                spacingTop: 0,
                spacingBottom: 0,
                detail: 0,
                autoHeight: false,
                needsFirstMeasurement: true
            };
            heightCache.set(rowId, entry);
        }
        return entry;
    };
    const processHeightEntry = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowsMeta.useCallback[processHeightEntry]": (row)=>{
            // HACK: rowHeight trails behind the most up-to-date value just enough to
            // mess the initial rowsMeta hydration :/
            const baseRowHeight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"])(apiRef.current.state).rowHeight;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eslintUseValue"])(rowHeight);
            const entry = apiRef.current.getRowHeightEntry(row.id);
            if (!getRowHeightProp) {
                entry.content = baseRowHeight;
                entry.needsFirstMeasurement = false;
            } else {
                const rowHeightFromUser = getRowHeightProp((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, row, {
                    densityFactor
                }));
                if (rowHeightFromUser === 'auto') {
                    if (entry.needsFirstMeasurement) {
                        const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, row, {
                            densityFactor
                        })) : baseRowHeight;
                        // If the row was not measured yet use the estimated row height
                        entry.content = estimatedRowHeight ?? baseRowHeight;
                    }
                    hasRowWithAutoHeight.current = true;
                    entry.autoHeight = true;
                } else {
                    // Default back to base rowHeight if getRowHeight returns invalid value.
                    entry.content = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValidRowHeight"])(rowHeightFromUser, baseRowHeight, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRowHeightWarning"]);
                    entry.needsFirstMeasurement = false;
                    entry.autoHeight = false;
                }
            }
            if (getRowSpacing) {
                const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);
                const spacing = getRowSpacing((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, row, {
                    isFirstVisible: indexRelativeToCurrentPage === 0,
                    isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
                    indexRelativeToCurrentPage
                }));
                entry.spacingTop = spacing.top ?? 0;
                entry.spacingBottom = spacing.bottom ?? 0;
            } else {
                entry.spacingTop = 0;
                entry.spacingBottom = 0;
            }
            apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row);
            return entry;
        }
    }["useGridRowsMeta.useCallback[processHeightEntry]"], [
        apiRef,
        currentPage.rows.length,
        getRowHeightProp,
        getEstimatedRowHeight,
        rowHeight,
        getRowSpacing,
        densityFactor
    ]);
    const hydrateRowsMeta = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridRowsMeta.useCallback[hydrateRowsMeta]": ()=>{
            hasRowWithAutoHeight.current = false;
            pinnedRows.top.forEach(processHeightEntry);
            pinnedRows.bottom.forEach(processHeightEntry);
            const positions = [];
            const currentPageTotalHeight = currentPage.rows.reduce({
                "useGridRowsMeta.useCallback[hydrateRowsMeta].currentPageTotalHeight": (acc, row)=>{
                    positions.push(acc);
                    const entry = processHeightEntry(row);
                    const total = entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;
                    return acc + total;
                }
            }["useGridRowsMeta.useCallback[hydrateRowsMeta].currentPageTotalHeight"], 0);
            if (!hasRowWithAutoHeight.current) {
                // No row has height=auto, so all rows are already measured
                lastMeasuredRowIndex.current = Infinity;
            }
            apiRef.current.setState({
                "useGridRowsMeta.useCallback[hydrateRowsMeta]": (state)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        rowsMeta: {
                            currentPageTotalHeight,
                            positions
                        }
                    });
                }
            }["useGridRowsMeta.useCallback[hydrateRowsMeta]"]);
            isHeightMetaValid.current = true;
        }
    }["useGridRowsMeta.useCallback[hydrateRowsMeta]"], [
        apiRef,
        pinnedRows,
        currentPage.rows,
        processHeightEntry
    ]);
    const getRowHeight = (rowId)=>{
        return heightCache.get(rowId)?.content ?? rowHeight;
    };
    const storeRowHeightMeasurement = (id, height)=>{
        const entry = apiRef.current.getRowHeightEntry(id);
        const didChange = entry.content !== height;
        entry.needsFirstMeasurement = false;
        entry.content = height;
        isHeightMetaValid.current &&= !didChange;
    };
    const rowHasAutoHeight = (id)=>{
        return heightCache.get(id)?.autoHeight ?? false;
    };
    const getLastMeasuredRowIndex = ()=>{
        return lastMeasuredRowIndex.current;
    };
    const setLastMeasuredRowIndex = (index)=>{
        if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {
            lastMeasuredRowIndex.current = index;
        }
    };
    const resetRowHeights = ()=>{
        heightCache.clear();
        hydrateRowsMeta();
    };
    const resizeObserver = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$useLazyRef$2f$useLazyRef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
        "useGridRowsMeta.useLazyRef": ()=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$ResizeObserver$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ResizeObserver"]({
                "useGridRowsMeta.useLazyRef": (entries)=>{
                    for(let i = 0; i < entries.length; i += 1){
                        const entry = entries[i];
                        const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;
                        const rowId = entry.target.__mui_id;
                        apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);
                    }
                    if (!isHeightMetaValid.current) {
                        apiRef.current.requestPipeProcessorsApplication('rowHeight');
                    }
                }
            }["useGridRowsMeta.useLazyRef"])
    }["useGridRowsMeta.useLazyRef"]).current;
    const observeRowHeight = (element, rowId)=>{
        element.__mui_id = rowId;
        resizeObserver.observe(element);
        return ()=>resizeObserver.unobserve(element);
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeApplier$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeApplier"])(apiRef, 'rowHeight', hydrateRowsMeta);
    // The effect is used to build the rows meta data - currentPageTotalHeight and positions.
    // Because of variable row height this is needed for the virtualization
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridRowsMeta.useEffect": ()=>{
            hydrateRowsMeta();
        }
    }["useGridRowsMeta.useEffect"], [
        filterModel,
        paginationState,
        sortModel,
        hydrateRowsMeta
    ]);
    const rowsMetaApi = {
        unstable_getRowHeight: getRowHeight,
        unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,
        unstable_storeRowHeightMeasurement: storeRowHeightMeasurement,
        resetRowHeights
    };
    const rowsMetaPrivateApi = {
        hydrateRowsMeta,
        observeRowHeight,
        rowHasAutoHeight,
        getRowHeightEntry,
        getLastMeasuredRowIndex
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, rowsMetaApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, rowsMetaPrivateApi, 'private');
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnMenu/columnMenuSelector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "gridColumnMenuSelector": (()=>gridColumnMenuSelector)
});
const gridColumnMenuSelector = (state)=>state.columnMenu;
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "columnMenuStateInitializer": (()=>columnMenuStateInitializer),
    "useGridColumnMenu": (()=>useGridColumnMenu)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnMenu$2f$columnMenuSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnMenu/columnMenuSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
;
;
const columnMenuStateInitializer = (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        columnMenu: {
            open: false
        }
    });
const useGridColumnMenu = (apiRef)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridColumnMenu');
    /**
   * API METHODS
   */ const showColumnMenu = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnMenu.useCallback[showColumnMenu]": (field)=>{
            const columnMenuState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnMenu$2f$columnMenuSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnMenuSelector"])(apiRef.current.state);
            const newState = {
                open: true,
                field
            };
            const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;
            if (shouldUpdate) {
                apiRef.current.setState({
                    "useGridColumnMenu.useCallback[showColumnMenu]": (state)=>{
                        if (state.columnMenu.open && state.columnMenu.field === field) {
                            return state;
                        }
                        logger.debug('Opening Column Menu');
                        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            columnMenu: {
                                open: true,
                                field
                            }
                        });
                    }
                }["useGridColumnMenu.useCallback[showColumnMenu]"]);
                apiRef.current.hidePreferences();
                apiRef.current.forceUpdate();
            }
        }
    }["useGridColumnMenu.useCallback[showColumnMenu]"], [
        apiRef,
        logger
    ]);
    const hideColumnMenu = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnMenu.useCallback[hideColumnMenu]": ()=>{
            const columnMenuState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnMenu$2f$columnMenuSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnMenuSelector"])(apiRef.current.state);
            if (columnMenuState.field) {
                const columnLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnLookupSelector"])(apiRef);
                const columnVisibilityModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnVisibilityModelSelector"])(apiRef);
                const orderedFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnFieldsSelector"])(apiRef);
                let fieldToFocus = columnMenuState.field;
                // If the column was removed from the grid, we need to find the closest visible field
                if (!columnLookup[fieldToFocus]) {
                    fieldToFocus = orderedFields[0];
                }
                // If the field to focus is hidden, we need to find the closest visible field
                if (columnVisibilityModel[fieldToFocus] === false) {
                    // contains visible column fields + the field that was just hidden
                    const visibleOrderedFields = orderedFields.filter({
                        "useGridColumnMenu.useCallback[hideColumnMenu].visibleOrderedFields": (field)=>{
                            if (field === fieldToFocus) {
                                return true;
                            }
                            return columnVisibilityModel[field] !== false;
                        }
                    }["useGridColumnMenu.useCallback[hideColumnMenu].visibleOrderedFields"]);
                    const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);
                    fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];
                }
                apiRef.current.setColumnHeaderFocus(fieldToFocus);
            }
            const newState = {
                open: false,
                field: undefined
            };
            const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;
            if (shouldUpdate) {
                apiRef.current.setState({
                    "useGridColumnMenu.useCallback[hideColumnMenu]": (state)=>{
                        logger.debug('Hiding Column Menu');
                        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            columnMenu: newState
                        });
                    }
                }["useGridColumnMenu.useCallback[hideColumnMenu]"]);
                apiRef.current.forceUpdate();
            }
        }
    }["useGridColumnMenu.useCallback[hideColumnMenu]"], [
        apiRef,
        logger
    ]);
    const toggleColumnMenu = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnMenu.useCallback[toggleColumnMenu]": (field)=>{
            logger.debug('Toggle Column Menu');
            const columnMenu = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnMenu$2f$columnMenuSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnMenuSelector"])(apiRef.current.state);
            if (!columnMenu.open || columnMenu.field !== field) {
                showColumnMenu(field);
            } else {
                hideColumnMenu();
            }
        }
    }["useGridColumnMenu.useCallback[toggleColumnMenu]"], [
        apiRef,
        logger,
        showColumnMenu,
        hideColumnMenu
    ]);
    const columnMenuApi = {
        showColumnMenu,
        hideColumnMenu,
        toggleColumnMenu
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, columnMenuApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnResizeStart', hideColumnMenu);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getColumnGroupsHeaderStructure": (()=>getColumnGroupsHeaderStructure),
    "unwrapGroupingColumnModel": (()=>unwrapGroupingColumnModel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridColumnGrouping$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridColumnGrouping.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/utils.js [app-client] (ecmascript)");
;
;
// This is the recurrence function that help writing `unwrapGroupingColumnModel()`
const recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridColumnGrouping$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeaf"])(columnGroupNode)) {
        if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {
            throw new Error([
                `MUI X: columnGroupingModel contains duplicated field`,
                `column field ${columnGroupNode.field} occurs two times in the grouping model:`,
                `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`,
                `- ${parents.join(' > ')}`
            ].join('\n'));
        }
        unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;
        return;
    }
    const { groupId, children } = columnGroupNode;
    children.forEach((child)=>{
        recurrentUnwrapGroupingColumnModel(child, [
            ...parents,
            groupId
        ], unwrappedGroupingModelToComplete);
    });
};
const unwrapGroupingColumnModel = (columnGroupingModel)=>{
    if (!columnGroupingModel) {
        return {};
    }
    const unwrappedSubTree = {};
    columnGroupingModel.forEach((columnGroupNode)=>{
        recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);
    });
    return unwrappedSubTree;
};
const getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel, pinnedFields)=>{
    const getParents = (field)=>unwrappedGroupingModel[field] ?? [];
    const groupingHeaderStructure = [];
    const maxDepth = Math.max(...orderedColumns.map((field)=>getParents(field).length));
    const haveSameParents = (field1, field2, depth)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDeepEqual"])(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));
    const haveDifferentContainers = (field1, field2)=>{
        if (pinnedFields?.left && pinnedFields.left.includes(field1) && !pinnedFields.left.includes(field2)) {
            return true;
        }
        if (pinnedFields?.right && !pinnedFields.right.includes(field1) && pinnedFields.right.includes(field2)) {
            return true;
        }
        return false;
    };
    for(let depth = 0; depth < maxDepth; depth += 1){
        const depthStructure = orderedColumns.reduce((structure, newField)=>{
            const groupId = getParents(newField)[depth] ?? null;
            if (structure.length === 0) {
                return [
                    {
                        columnFields: [
                            newField
                        ],
                        groupId
                    }
                ];
            }
            const lastGroup = structure[structure.length - 1];
            const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];
            const prevGroupId = lastGroup.groupId;
            if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth) || // Fix for https://github.com/mui/mui-x/issues/7041
            haveDifferentContainers(prevField, newField)) {
                // It's a new group
                return [
                    ...structure,
                    {
                        columnFields: [
                            newField
                        ],
                        groupId
                    }
                ];
            }
            // It extends the previous group
            return [
                ...structure.slice(0, structure.length - 1),
                {
                    columnFields: [
                        ...lastGroup.columnFields,
                        newField
                    ],
                    groupId
                }
            ];
        }, []);
        groupingHeaderStructure.push(depthStructure);
    }
    return groupingHeaderStructure;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "columnGroupsStateInitializer": (()=>columnGroupsStateInitializer),
    "useGridColumnGrouping": (()=>useGridColumnGrouping)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridColumnGrouping$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridColumnGrouping.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
const _excluded = [
    "groupId",
    "children"
];
;
;
;
;
;
;
;
const createGroupLookup = (columnGroupingModel)=>{
    let groupLookup = {};
    columnGroupingModel.forEach((node)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridColumnGrouping$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isLeaf"])(node)) {
            return;
        }
        const { groupId, children } = node, other = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectWithoutPropertiesLoose$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(node, _excluded);
        if (!groupId) {
            throw new Error('MUI X: An element of the columnGroupingModel does not have either `field` or `groupId`.');
        }
        if ("TURBOPACK compile-time truthy", 1) {
            if (!children) {
                console.warn(`MUI X: group groupId=${groupId} has no children.`);
            }
        }
        const groupParam = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, other, {
            groupId
        });
        const subTreeLookup = createGroupLookup(children);
        if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {
            throw new Error(`MUI X: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);
        }
        groupLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, groupLookup, subTreeLookup, {
            [groupId]: groupParam
        });
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, groupLookup);
};
const columnGroupsStateInitializer = (state, props, apiRef)=>{
    if (!props.columnGroupingModel) {
        return state;
    }
    const columnFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnFieldsSelector"])(apiRef);
    const visibleColumnFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnFieldsSelector"])(apiRef);
    const groupLookup = createGroupLookup(props.columnGroupingModel ?? []);
    const unwrappedGroupingModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unwrapGroupingColumnModel"])(props.columnGroupingModel ?? []);
    const columnGroupsHeaderStructure = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getColumnGroupsHeaderStructure"])(columnFields, unwrappedGroupingModel, apiRef.current.state.pinnedColumns ?? {});
    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field)=>unwrappedGroupingModel[field]?.length ?? 0));
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        columnGrouping: {
            lookup: groupLookup,
            unwrappedGroupingModel,
            headerStructure: columnGroupsHeaderStructure,
            maxDepth
        }
    });
};
const useGridColumnGrouping = (apiRef, props)=>{
    /**
   * API METHODS
   */ const getColumnGroupPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnGrouping.useCallback[getColumnGroupPath]": (field)=>{
            const unwrappedGroupingModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnGroupsUnwrappedModelSelector"])(apiRef);
            return unwrappedGroupingModel[field] ?? [];
        }
    }["useGridColumnGrouping.useCallback[getColumnGroupPath]"], [
        apiRef
    ]);
    const getAllGroupDetails = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnGrouping.useCallback[getAllGroupDetails]": ()=>{
            const columnGroupLookup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnGroupsLookupSelector"])(apiRef);
            return columnGroupLookup;
        }
    }["useGridColumnGrouping.useCallback[getAllGroupDetails]"], [
        apiRef
    ]);
    const columnGroupingApi = {
        getColumnGroupPath,
        getAllGroupDetails
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, columnGroupingApi, 'public');
    const handleColumnIndexChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnGrouping.useCallback[handleColumnIndexChange]": ()=>{
            const unwrappedGroupingModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unwrapGroupingColumnModel"])(props.columnGroupingModel ?? []);
            apiRef.current.setState({
                "useGridColumnGrouping.useCallback[handleColumnIndexChange]": (state)=>{
                    const orderedFields = state.columns?.orderedFields ?? [];
                    const pinnedColumns = state.pinnedColumns ?? {};
                    const columnGroupsHeaderStructure = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getColumnGroupsHeaderStructure"])(orderedFields, unwrappedGroupingModel, pinnedColumns);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        columnGrouping: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.columnGrouping, {
                            headerStructure: columnGroupsHeaderStructure
                        })
                    });
                }
            }["useGridColumnGrouping.useCallback[handleColumnIndexChange]"]);
        }
    }["useGridColumnGrouping.useCallback[handleColumnIndexChange]"], [
        apiRef,
        props.columnGroupingModel
    ]);
    const updateColumnGroupingState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnGrouping.useCallback[updateColumnGroupingState]": (columnGroupingModel)=>{
            // @ts-expect-error Move this logic to `Pro` package
            const pinnedColumns = apiRef.current.getPinnedColumns?.() ?? {};
            const columnFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnFieldsSelector"])(apiRef);
            const visibleColumnFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnFieldsSelector"])(apiRef);
            const groupLookup = createGroupLookup(columnGroupingModel ?? []);
            const unwrappedGroupingModel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unwrapGroupingColumnModel"])(columnGroupingModel ?? []);
            const columnGroupsHeaderStructure = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getColumnGroupsHeaderStructure"])(columnFields, unwrappedGroupingModel, pinnedColumns);
            const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map({
                "useGridColumnGrouping.useCallback[updateColumnGroupingState]": (field)=>unwrappedGroupingModel[field]?.length ?? 0
            }["useGridColumnGrouping.useCallback[updateColumnGroupingState]"]));
            apiRef.current.setState({
                "useGridColumnGrouping.useCallback[updateColumnGroupingState]": (state)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        columnGrouping: {
                            lookup: groupLookup,
                            unwrappedGroupingModel,
                            headerStructure: columnGroupsHeaderStructure,
                            maxDepth
                        }
                    });
                }
            }["useGridColumnGrouping.useCallback[updateColumnGroupingState]"]);
        }
    }["useGridColumnGrouping.useCallback[updateColumnGroupingState]"], [
        apiRef
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnIndexChange', handleColumnIndexChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnsChange', {
        "useGridColumnGrouping.useGridApiEventHandler": ()=>{
            updateColumnGroupingState(props.columnGroupingModel);
        }
    }["useGridColumnGrouping.useGridApiEventHandler"]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnVisibilityModelChange', {
        "useGridColumnGrouping.useGridApiEventHandler": ()=>{
            updateColumnGroupingState(props.columnGroupingModel);
        }
    }["useGridColumnGrouping.useGridApiEventHandler"]);
    /**
   * EFFECTS
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridColumnGrouping.useEffect": ()=>{
            updateColumnGroupingState(props.columnGroupingModel);
        }
    }["useGridColumnGrouping.useEffect"], [
        updateColumnGroupingState,
        props.columnGroupingModel
    ]);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/listView/useGridListView.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "listViewStateInitializer": (()=>listViewStateInitializer),
    "useGridListView": (()=>useGridListView)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/warning/warning.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js [app-client] (ecmascript)");
;
;
;
;
;
const listViewStateInitializer = (state, props, apiRef)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
        listViewColumn: props.unstable_listColumn ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, props.unstable_listColumn, {
            computedWidth: getListColumnWidth(apiRef)
        }) : undefined
    });
function useGridListView(apiRef, props) {
    /*
   * EVENTS
   */ const updateListColumnWidth = ()=>{
        apiRef.current.setState((state)=>{
            if (!state.listViewColumn) {
                return state;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                listViewColumn: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.listViewColumn, {
                    computedWidth: getListColumnWidth(apiRef)
                })
            });
        });
    };
    const prevInnerWidth = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const handleGridSizeChange = (viewportInnerSize)=>{
        if (prevInnerWidth.current !== viewportInnerSize.width) {
            prevInnerWidth.current = viewportInnerSize.width;
            updateListColumnWidth();
        }
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnVisibilityModelChange', updateListColumnWidth);
    /*
   * EFFECTS
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridListView.useEffect": ()=>{
            const listColumn = props.unstable_listColumn;
            if (listColumn) {
                apiRef.current.setState({
                    "useGridListView.useEffect": (state)=>{
                        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            listViewColumn: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, listColumn, {
                                computedWidth: getListColumnWidth(apiRef)
                            })
                        });
                    }
                }["useGridListView.useEffect"]);
            }
        }
    }["useGridListView.useEffect"], [
        apiRef,
        props.unstable_listColumn
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridListView.useEffect": ()=>{
            if (props.unstable_listView && !props.unstable_listColumn) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])([
                    'MUI X: The `unstable_listColumn` prop must be set if `unstable_listView` is enabled.',
                    'To fix, pass a column definition to the `unstable_listColumn` prop, e.g. `{ field: "example", renderCell: (params) => <div>{params.row.id}</div> }`.',
                    'For more details, see https://mui.com/x/react-data-grid/list-view/'
                ]);
            }
        }
    }["useGridListView.useEffect"], [
        props.unstable_listView,
        props.unstable_listColumn
    ]);
}
function getListColumnWidth(apiRef) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"])(apiRef.current.state).viewportInnerSize.width;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "enrichPageRowsWithPinnedRows": (()=>enrichPageRowsWithPinnedRows),
    "findNonRowSpannedCell": (()=>findNonRowSpannedCell),
    "getLeftColumnIndex": (()=>getLeftColumnIndex),
    "getRightColumnIndex": (()=>getRightColumnIndex)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowSpanningSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
;
;
;
function enrichPageRowsWithPinnedRows(apiRef, rows) {
    const pinnedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPinnedRowsSelector"])(apiRef) || {};
    return [
        ...pinnedRows.top || [],
        ...rows,
        ...pinnedRows.bottom || []
    ];
}
const getLeftColumnIndex = ({ currentColIndex, firstColIndex, lastColIndex, isRtl })=>{
    if (isRtl) {
        if (currentColIndex < lastColIndex) {
            return currentColIndex + 1;
        }
    } else if (!isRtl) {
        if (currentColIndex > firstColIndex) {
            return currentColIndex - 1;
        }
    }
    return null;
};
const getRightColumnIndex = ({ currentColIndex, firstColIndex, lastColIndex, isRtl })=>{
    if (isRtl) {
        if (currentColIndex > firstColIndex) {
            return currentColIndex - 1;
        }
    } else if (!isRtl) {
        if (currentColIndex < lastColIndex) {
            return currentColIndex + 1;
        }
    }
    return null;
};
function findNonRowSpannedCell(apiRef, rowId, field, rowSpanScanDirection) {
    const rowSpanHiddenCells = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowSpanningSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowSpanningHiddenCellsSelector"])(apiRef);
    if (!rowSpanHiddenCells[rowId]?.[field]) {
        return rowId;
    }
    const filteredSortedRowIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredSortedRowIdsSelector"])(apiRef);
    // find closest non row spanned cell in the given `rowSpanScanDirection`
    let nextRowIndex = filteredSortedRowIds.indexOf(rowId) + (rowSpanScanDirection === 'down' ? 1 : -1);
    while(nextRowIndex >= 0 && nextRowIndex < filteredSortedRowIds.length){
        const nextRowId = filteredSortedRowIds[nextRowIndex];
        if (!rowSpanHiddenCells[nextRowId]?.[field]) {
            return nextRowId;
        }
        nextRowIndex += rowSpanScanDirection === 'down' ? 1 : -1;
    }
    return rowId;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridKeyboardNavigation": (()=>useGridKeyboardNavigation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/system/esm/RtlProvider/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/listView/gridListViewSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/constants/gridClasses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$headerFiltering$2f$gridHeaderFilteringSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/headerFiltering/gridHeaderFilteringSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/keyboardUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/domUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/models/gridEditRowModel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/internals/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$utils$2f$gridRowGroupingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/internals/utils/gridRowGroupingUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const useGridKeyboardNavigation = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridKeyboardNavigation');
    const initialCurrentPageRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridVisibleRows$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridVisibleRows"])(apiRef, props).rows;
    const isRtl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRtl"])();
    const listView = props.unstable_listView;
    const currentPageRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useMemo({
        "useGridKeyboardNavigation.useMemo[currentPageRows]": ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enrichPageRowsWithPinnedRows"])(apiRef, initialCurrentPageRows)
    }["useGridKeyboardNavigation.useMemo[currentPageRows]"], [
        apiRef,
        initialCurrentPageRows
    ]);
    const headerFilteringEnabled = props.signature !== 'DataGrid' && props.headerFilters;
    /**
   * @param {number} colIndex Index of the column to focus
   * @param {GridRowId} rowId index of the row to focus
   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.
   * @param {string} rowSpanScanDirection Which direction to search to find the next cell not hidden by `rowSpan`.
   * TODO replace with apiRef.current.moveFocusToRelativeCell()
   */ const goToCell = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[goToCell]": (colIndex, rowId, closestColumnToUse = 'left', rowSpanScanDirection = 'up')=>{
            const visibleSortedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowEntriesSelector"])(apiRef);
            const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);
            if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {
                if (closestColumnToUse === 'left') {
                    colIndex = nextCellColSpanInfo.leftVisibleCellIndex;
                } else if (closestColumnToUse === 'right') {
                    colIndex = nextCellColSpanInfo.rightVisibleCellIndex;
                }
            }
            const field = listView ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridListColumnSelector"])(apiRef.current.state).field : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnFieldsSelector"])(apiRef)[colIndex];
            const nonRowSpannedRowId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["findNonRowSpannedCell"])(apiRef, rowId, field, rowSpanScanDirection);
            // `scrollToIndexes` requires a rowIndex relative to all visible rows.
            // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.
            const rowIndexRelativeToAllRows = visibleSortedRows.findIndex({
                "useGridKeyboardNavigation.useCallback[goToCell].rowIndexRelativeToAllRows": (row)=>row.id === nonRowSpannedRowId
            }["useGridKeyboardNavigation.useCallback[goToCell].rowIndexRelativeToAllRows"]);
            logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);
            apiRef.current.scrollToIndexes({
                colIndex,
                rowIndex: rowIndexRelativeToAllRows
            });
            apiRef.current.setCellFocus(nonRowSpannedRowId, field);
        }
    }["useGridKeyboardNavigation.useCallback[goToCell]"], [
        apiRef,
        logger,
        listView
    ]);
    const goToHeader = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[goToHeader]": (colIndex, event)=>{
            logger.debug(`Navigating to header col ${colIndex}`);
            apiRef.current.scrollToIndexes({
                colIndex
            });
            const field = apiRef.current.getVisibleColumns()[colIndex].field;
            apiRef.current.setColumnHeaderFocus(field, event);
        }
    }["useGridKeyboardNavigation.useCallback[goToHeader]"], [
        apiRef,
        logger
    ]);
    const goToHeaderFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[goToHeaderFilter]": (colIndex, event)=>{
            logger.debug(`Navigating to header filter col ${colIndex}`);
            apiRef.current.scrollToIndexes({
                colIndex
            });
            const field = apiRef.current.getVisibleColumns()[colIndex].field;
            apiRef.current.setColumnHeaderFilterFocus(field, event);
        }
    }["useGridKeyboardNavigation.useCallback[goToHeaderFilter]"], [
        apiRef,
        logger
    ]);
    const goToGroupHeader = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[goToGroupHeader]": (colIndex, depth, event)=>{
            logger.debug(`Navigating to header col ${colIndex}`);
            apiRef.current.scrollToIndexes({
                colIndex
            });
            const { field } = apiRef.current.getVisibleColumns()[colIndex];
            apiRef.current.setColumnGroupHeaderFocus(field, depth, event);
        }
    }["useGridKeyboardNavigation.useCallback[goToGroupHeader]"], [
        apiRef,
        logger
    ]);
    const getRowIdFromIndex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[getRowIdFromIndex]": (rowIndex)=>{
            return currentPageRows[rowIndex]?.id;
        }
    }["useGridKeyboardNavigation.useCallback[getRowIdFromIndex]"], [
        currentPageRows
    ]);
    const handleColumnHeaderKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[handleColumnHeaderKeyDown]": (params, event)=>{
            const headerTitleNode = event.currentTarget.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].columnHeaderTitleContainerContent}`);
            const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);
            if (isFromInsideContent && params.field !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_COL_DEF"].field) {
                // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.
                // There is one exception for the checkBoxHeader
                return;
            }
            const viewportPageSize = apiRef.current.getViewportPageSize();
            const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
            const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;
            const lastRowIndexInPage = currentPageRows.length - 1;
            const firstColIndex = 0;
            const lastColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef).length - 1;
            const columnGroupMaxDepth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columnGrouping$2f$gridColumnGroupsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnGroupsHeaderMaxDepthSelector"])(apiRef);
            let shouldPreventDefault = true;
            switch(event.key){
                case 'ArrowDown':
                    {
                        if (firstRowIndexInPage !== null) {
                            if (headerFilteringEnabled) {
                                goToHeaderFilter(colIndexBefore, event);
                            } else {
                                goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));
                            }
                        }
                        break;
                    }
                case 'ArrowRight':
                    {
                        const rightColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRightColumnIndex"])({
                            currentColIndex: colIndexBefore,
                            firstColIndex,
                            lastColIndex,
                            isRtl
                        });
                        if (rightColIndex !== null) {
                            goToHeader(rightColIndex, event);
                        }
                        break;
                    }
                case 'ArrowLeft':
                    {
                        const leftColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLeftColumnIndex"])({
                            currentColIndex: colIndexBefore,
                            firstColIndex,
                            lastColIndex,
                            isRtl
                        });
                        if (leftColIndex !== null) {
                            goToHeader(leftColIndex, event);
                        }
                        break;
                    }
                case 'ArrowUp':
                    {
                        if (columnGroupMaxDepth > 0) {
                            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);
                        }
                        break;
                    }
                case 'PageDown':
                    {
                        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
                            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
                        }
                        break;
                    }
                case 'Home':
                    {
                        goToHeader(firstColIndex, event);
                        break;
                    }
                case 'End':
                    {
                        goToHeader(lastColIndex, event);
                        break;
                    }
                case 'Enter':
                    {
                        if (event.ctrlKey || event.metaKey) {
                            apiRef.current.toggleColumnMenu(params.field);
                        }
                        break;
                    }
                case ' ':
                    {
                        break;
                    }
                default:
                    {
                        shouldPreventDefault = false;
                    }
            }
            if (shouldPreventDefault) {
                event.preventDefault();
            }
        }
    }["useGridKeyboardNavigation.useCallback[handleColumnHeaderKeyDown]"], [
        apiRef,
        currentPageRows.length,
        headerFilteringEnabled,
        goToHeaderFilter,
        goToCell,
        getRowIdFromIndex,
        isRtl,
        goToHeader,
        goToGroupHeader
    ]);
    const handleHeaderFilterKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[handleHeaderFilterKeyDown]": (params, event)=>{
            const isEditing = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$headerFiltering$2f$gridHeaderFilteringSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridHeaderFilteringEditFieldSelector"])(apiRef) === params.field;
            const isHeaderMenuOpen = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$headerFiltering$2f$gridHeaderFilteringSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridHeaderFilteringMenuSelector"])(apiRef) === params.field;
            if (isEditing || isHeaderMenuOpen || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNavigationKey"])(event.key)) {
                return;
            }
            const viewportPageSize = apiRef.current.getViewportPageSize();
            const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
            const firstRowIndexInPage = 0;
            const lastRowIndexInPage = currentPageRows.length - 1;
            const firstColIndex = 0;
            const lastColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef).length - 1;
            let shouldPreventDefault = true;
            switch(event.key){
                case 'ArrowDown':
                    {
                        const rowId = getRowIdFromIndex(firstRowIndexInPage);
                        if (firstRowIndexInPage !== null && rowId != null) {
                            goToCell(colIndexBefore, rowId);
                        }
                        break;
                    }
                case 'ArrowRight':
                    {
                        const rightColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRightColumnIndex"])({
                            currentColIndex: colIndexBefore,
                            firstColIndex,
                            lastColIndex,
                            isRtl
                        });
                        if (rightColIndex !== null) {
                            goToHeaderFilter(rightColIndex, event);
                        }
                        break;
                    }
                case 'ArrowLeft':
                    {
                        const leftColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLeftColumnIndex"])({
                            currentColIndex: colIndexBefore,
                            firstColIndex,
                            lastColIndex,
                            isRtl
                        });
                        if (leftColIndex !== null) {
                            goToHeaderFilter(leftColIndex, event);
                        } else {
                            apiRef.current.setColumnHeaderFilterFocus(params.field, event);
                        }
                        break;
                    }
                case 'ArrowUp':
                    {
                        goToHeader(colIndexBefore, event);
                        break;
                    }
                case 'PageDown':
                    {
                        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
                            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
                        }
                        break;
                    }
                case 'Home':
                    {
                        goToHeaderFilter(firstColIndex, event);
                        break;
                    }
                case 'End':
                    {
                        goToHeaderFilter(lastColIndex, event);
                        break;
                    }
                case ' ':
                    {
                        break;
                    }
                default:
                    {
                        shouldPreventDefault = false;
                    }
            }
            if (shouldPreventDefault) {
                event.preventDefault();
            }
        }
    }["useGridKeyboardNavigation.useCallback[handleHeaderFilterKeyDown]"], [
        apiRef,
        currentPageRows.length,
        goToHeaderFilter,
        isRtl,
        goToHeader,
        goToCell,
        getRowIdFromIndex
    ]);
    const handleColumnGroupHeaderKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[handleColumnGroupHeaderKeyDown]": (params, event)=>{
            const focusedColumnGroup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusColumnGroupHeaderSelector"])(apiRef);
            if (focusedColumnGroup === null) {
                return;
            }
            const { field: currentField, depth: currentDepth } = focusedColumnGroup;
            const { fields, depth, maxDepth } = params;
            const viewportPageSize = apiRef.current.getViewportPageSize();
            const currentColIndex = apiRef.current.getColumnIndex(currentField);
            const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;
            const firstRowIndexInPage = 0;
            const lastRowIndexInPage = currentPageRows.length - 1;
            const firstColIndex = 0;
            const lastColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef).length - 1;
            let shouldPreventDefault = true;
            switch(event.key){
                case 'ArrowDown':
                    {
                        if (depth === maxDepth - 1) {
                            goToHeader(currentColIndex, event);
                        } else {
                            goToGroupHeader(currentColIndex, currentDepth + 1, event);
                        }
                        break;
                    }
                case 'ArrowUp':
                    {
                        if (depth > 0) {
                            goToGroupHeader(currentColIndex, currentDepth - 1, event);
                        }
                        break;
                    }
                case 'ArrowRight':
                    {
                        const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;
                        if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {
                            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);
                        }
                        break;
                    }
                case 'ArrowLeft':
                    {
                        const remainingLeftColumns = fields.indexOf(currentField);
                        if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {
                            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);
                        }
                        break;
                    }
                case 'PageDown':
                    {
                        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
                            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
                        }
                        break;
                    }
                case 'Home':
                    {
                        goToGroupHeader(firstColIndex, currentDepth, event);
                        break;
                    }
                case 'End':
                    {
                        goToGroupHeader(lastColIndex, currentDepth, event);
                        break;
                    }
                case ' ':
                    {
                        break;
                    }
                default:
                    {
                        shouldPreventDefault = false;
                    }
            }
            if (shouldPreventDefault) {
                event.preventDefault();
            }
        }
    }["useGridKeyboardNavigation.useCallback[handleColumnGroupHeaderKeyDown]"], [
        apiRef,
        currentPageRows.length,
        goToHeader,
        goToGroupHeader,
        goToCell,
        getRowIdFromIndex
    ]);
    const handleCellKeyDown = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[handleCellKeyDown]": (params, event)=>{
            // Ignore portal
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEventTargetInPortal"])(event)) {
                return;
            }
            // Get the most recent params because the cell mode may have changed by another listener
            const cellParams = apiRef.current.getCellParams(params.id, params.field);
            if (cellParams.cellMode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$models$2f$gridEditRowModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCellModes"].Edit || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNavigationKey"])(event.key)) {
                return;
            }
            const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {
                event,
                cell: cellParams
            });
            if (!canUpdateFocus) {
                return;
            }
            if (currentPageRows.length === 0) {
                return;
            }
            const viewportPageSize = apiRef.current.getViewportPageSize();
            const getColumnIndexFn = listView ? ({
                "useGridKeyboardNavigation.useCallback[handleCellKeyDown]": ()=>0
            })["useGridKeyboardNavigation.useCallback[handleCellKeyDown]"] : apiRef.current.getColumnIndex;
            const colIndexBefore = params.field ? getColumnIndexFn(params.field) : 0;
            const rowIndexBefore = currentPageRows.findIndex({
                "useGridKeyboardNavigation.useCallback[handleCellKeyDown].rowIndexBefore": (row)=>row.id === params.id
            }["useGridKeyboardNavigation.useCallback[handleCellKeyDown].rowIndexBefore"]);
            const firstRowIndexInPage = 0;
            const lastRowIndexInPage = currentPageRows.length - 1;
            const firstColIndex = 0;
            const visibleColumns = listView ? [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridListColumnSelector"])(apiRef.current.state)
            ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef);
            const lastColIndex = visibleColumns.length - 1;
            let shouldPreventDefault = true;
            switch(event.key){
                case 'ArrowDown':
                    {
                        // "Enter" is only triggered by the row / cell editing feature
                        if (rowIndexBefore < lastRowIndexInPage) {
                            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1), isRtl ? 'right' : 'left', 'down');
                        }
                        break;
                    }
                case 'ArrowUp':
                    {
                        if (rowIndexBefore > firstRowIndexInPage) {
                            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));
                        } else if (headerFilteringEnabled) {
                            goToHeaderFilter(colIndexBefore, event);
                        } else {
                            goToHeader(colIndexBefore, event);
                        }
                        break;
                    }
                case 'ArrowRight':
                    {
                        const rightColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRightColumnIndex"])({
                            currentColIndex: colIndexBefore,
                            firstColIndex,
                            lastColIndex,
                            isRtl
                        });
                        if (rightColIndex !== null) {
                            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'left' : 'right');
                        }
                        break;
                    }
                case 'ArrowLeft':
                    {
                        const leftColIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$keyboardNavigation$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getLeftColumnIndex"])({
                            currentColIndex: colIndexBefore,
                            firstColIndex,
                            lastColIndex,
                            isRtl
                        });
                        if (leftColIndex !== null) {
                            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'right' : 'left');
                        }
                        break;
                    }
                case 'Tab':
                    {
                        // "Tab" is only triggered by the row / cell editing feature
                        if (event.shiftKey && colIndexBefore > firstColIndex) {
                            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');
                        } else if (!event.shiftKey && colIndexBefore < lastColIndex) {
                            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');
                        }
                        break;
                    }
                case ' ':
                    {
                        const field = params.field;
                        if (field === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_DETAIL_PANEL_TOGGLE_FIELD"]) {
                            break;
                        }
                        const colDef = params.colDef;
                        if (colDef && (colDef.field === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_TREE_DATA_GROUPING_FIELD"] || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$internals$2f$utils$2f$gridRowGroupingUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGroupingColumn"])(colDef.field))) {
                            break;
                        }
                        if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {
                            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
                        }
                        break;
                    }
                case 'PageDown':
                    {
                        if (rowIndexBefore < lastRowIndexInPage) {
                            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
                        }
                        break;
                    }
                case 'PageUp':
                    {
                        // Go to the first row before going to header
                        const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);
                        if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {
                            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));
                        } else {
                            goToHeader(colIndexBefore, event);
                        }
                        break;
                    }
                case 'Home':
                    {
                        if (event.ctrlKey || event.metaKey || event.shiftKey) {
                            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));
                        } else {
                            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));
                        }
                        break;
                    }
                case 'End':
                    {
                        if (event.ctrlKey || event.metaKey || event.shiftKey) {
                            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));
                        } else {
                            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));
                        }
                        break;
                    }
                default:
                    {
                        shouldPreventDefault = false;
                    }
            }
            if (shouldPreventDefault) {
                event.preventDefault();
            }
        }
    }["useGridKeyboardNavigation.useCallback[handleCellKeyDown]"], [
        apiRef,
        currentPageRows,
        isRtl,
        goToCell,
        getRowIdFromIndex,
        headerFilteringEnabled,
        goToHeaderFilter,
        goToHeader,
        listView
    ]);
    const checkIfCanStartEditing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridKeyboardNavigation.useCallback[checkIfCanStartEditing]": (initialValue, { event })=>{
            if (event.key === ' ') {
                // Space scrolls to the last row
                return false;
            }
            return initialValue;
        }
    }["useGridKeyboardNavigation.useCallback[checkIfCanStartEditing]"], []);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'canStartEditing', checkIfCanStartEditing);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'cellKeyDown', handleCellKeyDown);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "MissingRowIdError": (()=>MissingRowIdError),
    "useGridParamsApi": (()=>useGridParamsApi)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/listView/gridListViewSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/domUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
;
class MissingRowIdError extends Error {
}
function useGridParamsApi(apiRef, props) {
    const getColumnHeaderParams = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getColumnHeaderParams]": (field)=>({
                field,
                colDef: apiRef.current.getColumn(field)
            })
    }["useGridParamsApi.useCallback[getColumnHeaderParams]"], [
        apiRef
    ]);
    const getRowParams = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getRowParams]": (id)=>{
            const row = apiRef.current.getRow(id);
            if (!row) {
                throw new MissingRowIdError(`No row with id #${id} found`);
            }
            const params = {
                id,
                columns: apiRef.current.getAllColumns(),
                row
            };
            return params;
        }
    }["useGridParamsApi.useCallback[getRowParams]"], [
        apiRef
    ]);
    const getCellParams = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getCellParams]": (id, field)=>{
            const colDef = props.unstable_listView ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridListColumnSelector"])(apiRef.current.state) : apiRef.current.getColumn(field);
            const row = apiRef.current.getRow(id);
            const rowNode = apiRef.current.getRowNode(id);
            if (!row || !rowNode) {
                throw new MissingRowIdError(`No row with id #${id} found`);
            }
            const rawValue = row[field];
            const value = colDef?.valueGetter ? colDef.valueGetter(rawValue, row, colDef, apiRef) : rawValue;
            const cellFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
            const cellTabIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridTabIndexCellSelector"])(apiRef);
            const params = {
                id,
                field,
                row,
                rowNode,
                colDef,
                cellMode: apiRef.current.getCellMode(id, field),
                hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
                tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,
                value,
                formattedValue: value,
                isEditable: false,
                api: {}
            };
            if (colDef && colDef.valueFormatter) {
                params.formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);
            }
            params.isEditable = colDef && apiRef.current.isCellEditable(params);
            return params;
        }
    }["useGridParamsApi.useCallback[getCellParams]"], [
        apiRef,
        props.unstable_listView
    ]);
    const getCellValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getCellValue]": (id, field)=>{
            const colDef = apiRef.current.getColumn(field);
            const row = apiRef.current.getRow(id);
            if (!row) {
                throw new MissingRowIdError(`No row with id #${id} found`);
            }
            if (!colDef || !colDef.valueGetter) {
                return row[field];
            }
            return colDef.valueGetter(row[colDef.field], row, colDef, apiRef);
        }
    }["useGridParamsApi.useCallback[getCellValue]"], [
        apiRef
    ]);
    const getRowValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getRowValue]": (row, colDef)=>{
            const field = colDef.field;
            if (!colDef || !colDef.valueGetter) {
                return row[field];
            }
            const value = row[colDef.field];
            return colDef.valueGetter(value, row, colDef, apiRef);
        }
    }["useGridParamsApi.useCallback[getRowValue]"], [
        apiRef
    ]);
    const getRowFormattedValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getRowFormattedValue]": (row, colDef)=>{
            const value = getRowValue(row, colDef);
            if (!colDef || !colDef.valueFormatter) {
                return value;
            }
            return colDef.valueFormatter(value, row, colDef, apiRef);
        }
    }["useGridParamsApi.useCallback[getRowFormattedValue]"], [
        apiRef,
        getRowValue
    ]);
    const getColumnHeaderElement = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getColumnHeaderElement]": (field)=>{
            if (!apiRef.current.rootElementRef.current) {
                return null;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGridColumnHeaderElement"])(apiRef.current.rootElementRef.current, field);
        }
    }["useGridParamsApi.useCallback[getColumnHeaderElement]"], [
        apiRef
    ]);
    const getRowElement = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getRowElement]": (id)=>{
            if (!apiRef.current.rootElementRef.current) {
                return null;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGridRowElement"])(apiRef.current.rootElementRef.current, id);
        }
    }["useGridParamsApi.useCallback[getRowElement]"], [
        apiRef
    ]);
    const getCellElement = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridParamsApi.useCallback[getCellElement]": (id, field)=>{
            if (!apiRef.current.rootElementRef.current) {
                return null;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGridCellElement"])(apiRef.current.rootElementRef.current, {
                id,
                field
            });
        }
    }["useGridParamsApi.useCallback[getCellElement]"], [
        apiRef
    ]);
    const paramsApi = {
        getCellValue,
        getCellParams,
        getCellElement,
        getRowValue,
        getRowFormattedValue,
        getRowParams,
        getRowElement,
        getColumnHeaderParams,
        getColumnHeaderElement
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, paramsApi, 'public');
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridColumnSpanning": (()=>useGridColumnSpanning)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
const useGridColumnSpanning = (apiRef)=>{
    const lookup = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef({});
    const getCellColSpanInfo = (rowId, columnIndex)=>{
        return lookup.current[rowId]?.[columnIndex];
    };
    const resetColSpan = ()=>{
        lookup.current = {};
    };
    // Calculate `colSpan` for each cell in the row
    const calculateColSpan = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridColumnSpanning.useCallback[calculateColSpan]": ({ rowId, minFirstColumn, maxLastColumn, columns })=>{
            for(let i = minFirstColumn; i < maxLastColumn; i += 1){
                const cellProps = calculateCellColSpan({
                    apiRef,
                    lookup: lookup.current,
                    columnIndex: i,
                    rowId,
                    minFirstColumnIndex: minFirstColumn,
                    maxLastColumnIndex: maxLastColumn,
                    columns
                });
                if (cellProps.colSpan > 1) {
                    i += cellProps.colSpan - 1;
                }
            }
        }
    }["useGridColumnSpanning.useCallback[calculateColSpan]"], [
        apiRef
    ]);
    const columnSpanningPublicApi = {
        unstable_getCellColSpanInfo: getCellColSpanInfo
    };
    const columnSpanningPrivateApi = {
        resetColSpan,
        calculateColSpan
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, columnSpanningPublicApi, 'public');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, columnSpanningPrivateApi, 'private');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiEventHandler"])(apiRef, 'columnOrderChange', resetColSpan);
};
function calculateCellColSpan(params) {
    const { apiRef, lookup, columnIndex, rowId, minFirstColumnIndex, maxLastColumnIndex, columns } = params;
    const columnsLength = columns.length;
    const column = columns[columnIndex];
    const row = apiRef.current.getRow(rowId);
    const value = apiRef.current.getRowValue(row, column);
    const colSpan = typeof column.colSpan === 'function' ? column.colSpan(value, row, column, apiRef) : column.colSpan;
    if (!colSpan || colSpan === 1) {
        setCellColSpanInfo(lookup, rowId, columnIndex, {
            spannedByColSpan: false,
            cellProps: {
                colSpan: 1,
                width: column.computedWidth
            }
        });
        return {
            colSpan: 1
        };
    }
    let width = column.computedWidth;
    for(let j = 1; j < colSpan; j += 1){
        const nextColumnIndex = columnIndex + j;
        // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).
        if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {
            const nextColumn = columns[nextColumnIndex];
            width += nextColumn.computedWidth;
            setCellColSpanInfo(lookup, rowId, columnIndex + j, {
                spannedByColSpan: true,
                rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),
                leftVisibleCellIndex: columnIndex
            });
        }
        setCellColSpanInfo(lookup, rowId, columnIndex, {
            spannedByColSpan: false,
            cellProps: {
                colSpan,
                width
            }
        });
    }
    return {
        colSpan
    };
}
function setCellColSpanInfo(lookup, rowId, columnIndex, cellColSpanInfo) {
    if (!lookup[rowId]) {
        lookup[rowId] = {};
    }
    lookup[rowId][columnIndex] = cellColSpanInfo;
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridScroll": (()=>useGridScroll)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/system/esm/RtlProvider/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/listView/gridListViewSelectors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
// Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js
// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView
function scrollIntoView(dimensions) {
    const { containerSize, scrollPosition, elementSize, elementOffset } = dimensions;
    const elementEnd = elementOffset + elementSize;
    // Always scroll to top when cell is higher than viewport to avoid scroll jump
    // See https://github.com/mui/mui-x/issues/4513 and https://github.com/mui/mui-x/issues/4514
    if (elementSize > containerSize) {
        return elementOffset;
    }
    if (elementEnd - containerSize > scrollPosition) {
        return elementEnd - containerSize;
    }
    if (elementOffset < scrollPosition) {
        return elementOffset;
    }
    return undefined;
}
const useGridScroll = (apiRef, props)=>{
    const isRtl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$system$2f$esm$2f$RtlProvider$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRtl"])();
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridScroll');
    const colRef = apiRef.current.columnHeadersContainerRef;
    const virtualScrollerRef = apiRef.current.virtualScrollerRef;
    const visibleSortedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedSortedRowEntriesSelector"]);
    const scrollToIndexes = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridScroll.useCallback[scrollToIndexes]": (params)=>{
            const dimensions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$dimensions$2f$gridDimensionsSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridDimensionsSelector"])(apiRef.current.state);
            const totalRowCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowCountSelector"])(apiRef);
            const visibleColumns = props.unstable_listView ? [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$listView$2f$gridListViewSelectors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridListColumnSelector"])(apiRef.current.state)
            ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef);
            const scrollToHeader = params.rowIndex == null;
            if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {
                return false;
            }
            logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);
            let scrollCoordinates = {};
            if (params.colIndex !== undefined) {
                const columnPositions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnPositionsSelector"])(apiRef);
                let cellWidth;
                if (typeof params.rowIndex !== 'undefined') {
                    const rowId = visibleSortedRows[params.rowIndex]?.id;
                    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);
                    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
                        cellWidth = cellColSpanInfo.cellProps.width;
                    }
                }
                if (typeof cellWidth === 'undefined') {
                    cellWidth = visibleColumns[params.colIndex].computedWidth;
                }
                // When using RTL, `scrollLeft` becomes negative, so we must ensure that we only compare values.
                scrollCoordinates.left = scrollIntoView({
                    containerSize: dimensions.viewportOuterSize.width,
                    scrollPosition: Math.abs(virtualScrollerRef.current.scrollLeft),
                    elementSize: cellWidth,
                    elementOffset: columnPositions[params.colIndex]
                });
            }
            if (params.rowIndex !== undefined) {
                const rowsMeta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsMetaSelector"])(apiRef.current.state);
                const page = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPageSelector"])(apiRef);
                const pageSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$gridPaginationSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPageSizeSelector"])(apiRef);
                const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;
                const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];
                scrollCoordinates.top = scrollIntoView({
                    containerSize: dimensions.viewportInnerSize.height,
                    scrollPosition: virtualScrollerRef.current.scrollTop,
                    elementSize: targetOffsetHeight,
                    elementOffset: rowsMeta.positions[elementIndex]
                });
            }
            scrollCoordinates = apiRef.current.unstable_applyPipeProcessors('scrollToIndexes', scrollCoordinates, params);
            if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {
                apiRef.current.scroll(scrollCoordinates);
                return true;
            }
            return false;
        }
    }["useGridScroll.useCallback[scrollToIndexes]"], [
        logger,
        apiRef,
        virtualScrollerRef,
        props.pagination,
        visibleSortedRows,
        props.unstable_listView
    ]);
    const scroll = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridScroll.useCallback[scroll]": (params)=>{
            if (virtualScrollerRef.current && params.left !== undefined && colRef.current) {
                const direction = isRtl ? -1 : 1;
                colRef.current.scrollLeft = params.left;
                virtualScrollerRef.current.scrollLeft = direction * params.left;
                logger.debug(`Scrolling left: ${params.left}`);
            }
            if (virtualScrollerRef.current && params.top !== undefined) {
                virtualScrollerRef.current.scrollTop = params.top;
                logger.debug(`Scrolling top: ${params.top}`);
            }
            logger.debug(`Scrolling, updating container, and viewport`);
        }
    }["useGridScroll.useCallback[scroll]"], [
        virtualScrollerRef,
        isRtl,
        colRef,
        logger
    ]);
    const getScrollPosition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridScroll.useCallback[getScrollPosition]": ()=>{
            if (!virtualScrollerRef?.current) {
                return {
                    top: 0,
                    left: 0
                };
            }
            return {
                top: virtualScrollerRef.current.scrollTop,
                left: virtualScrollerRef.current.scrollLeft
            };
        }
    }["useGridScroll.useCallback[getScrollPosition]"], [
        virtualScrollerRef
    ]);
    const scrollApi = {
        scroll,
        scrollToIndexes,
        getScrollPosition
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, scrollApi, 'public');
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/export/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "defaultGetRowsToExport": (()=>defaultGetRowsToExport),
    "getColumnsToExport": (()=>getColumnsToExport)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
;
;
;
const getColumnsToExport = ({ apiRef, options })=>{
    const columns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnDefinitionsSelector"])(apiRef);
    if (options.fields) {
        return options.fields.reduce((currentColumns, field)=>{
            const column = columns.find((col)=>col.field === field);
            if (column) {
                currentColumns.push(column);
            }
            return currentColumns;
        }, []);
    }
    const validColumns = options.allColumns ? columns : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridVisibleColumnDefinitionsSelector"])(apiRef);
    return validColumns.filter((column)=>!column.disableExport);
};
const defaultGetRowsToExport = ({ apiRef })=>{
    const filteredSortedRowIds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFilteredSortedRowIdsSelector"])(apiRef);
    const rowTree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowTreeSelector"])(apiRef);
    const selectedRows = apiRef.current.getSelectedRows();
    const bodyRows = filteredSortedRowIds.filter((id)=>rowTree[id].type !== 'footer');
    const pinnedRows = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPinnedRowsSelector"])(apiRef);
    const topPinnedRowsIds = pinnedRows?.top?.map((row)=>row.id) || [];
    const bottomPinnedRowsIds = pinnedRows?.bottom?.map((row)=>row.id) || [];
    bodyRows.unshift(...topPinnedRowsIds);
    bodyRows.push(...bottomPinnedRowsIds);
    if (selectedRows.size > 0) {
        return bodyRows.filter((id)=>selectedRows.has(id));
    }
    return bodyRows;
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildCSV": (()=>buildCSV),
    "serializeCellValue": (()=>serializeCellValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-internals/esm/warning/warning.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js [app-client] (ecmascript)");
;
;
function sanitizeCellValue(value, csvOptions) {
    if (value === null || value === undefined) {
        return '';
    }
    const valueStr = typeof value === 'string' ? value : `${value}`;
    if (csvOptions.shouldAppendQuotes || csvOptions.escapeFormulas) {
        const escapedValue = valueStr.replace(/"/g, '""');
        if (csvOptions.escapeFormulas) {
            // See https://owasp.org/www-community/attacks/CSV_Injection
            if ([
                '=',
                '+',
                '-',
                '@',
                '\t',
                '\r'
            ].includes(escapedValue[0])) {
                return `"'${escapedValue}"`;
            }
        }
        // Make sure value containing delimiter or line break won't be split into multiple cells
        if ([
            csvOptions.delimiter,
            '\n',
            '\r',
            '"'
        ].some((delimiter)=>valueStr.includes(delimiter))) {
            return `"${escapedValue}"`;
        }
        return escapedValue;
    }
    return valueStr;
}
const serializeCellValue = (cellParams, options)=>{
    const { csvOptions, ignoreValueFormatter } = options;
    let value;
    if (ignoreValueFormatter) {
        const columnType = cellParams.colDef.type;
        if (columnType === 'number') {
            value = String(cellParams.value);
        } else if (columnType === 'date' || columnType === 'dateTime') {
            value = cellParams.value?.toISOString();
        } else if (typeof cellParams.value?.toString === 'function') {
            value = cellParams.value.toString();
        } else {
            value = cellParams.value;
        }
    } else {
        value = cellParams.formattedValue;
    }
    return sanitizeCellValue(value, csvOptions);
};
class CSVRow {
    constructor(options){
        this.options = void 0;
        this.rowString = '';
        this.isEmpty = true;
        this.options = options;
    }
    addValue(value) {
        if (!this.isEmpty) {
            this.rowString += this.options.csvOptions.delimiter;
        }
        if (typeof this.options.sanitizeCellValue === 'function') {
            this.rowString += this.options.sanitizeCellValue(value, this.options.csvOptions);
        } else {
            this.rowString += value;
        }
        this.isEmpty = false;
    }
    getRowString() {
        return this.rowString;
    }
}
const serializeRow = ({ id, columns, getCellParams, csvOptions, ignoreValueFormatter })=>{
    const row = new CSVRow({
        csvOptions
    });
    columns.forEach((column)=>{
        const cellParams = getCellParams(id, column.field);
        if ("TURBOPACK compile-time truthy", 1) {
            if (String(cellParams.formattedValue) === '[object Object]') {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$internals$2f$esm$2f$warning$2f$warning$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["warnOnce"])([
                    'MUI X: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.',
                    'You can provide a `valueFormatter` with a string representation to be used.'
                ]);
            }
        }
        row.addValue(serializeCellValue(cellParams, {
            ignoreValueFormatter,
            csvOptions
        }));
    });
    return row.getRowString();
};
function buildCSV(options) {
    const { columns, rowIds, csvOptions, ignoreValueFormatter, apiRef } = options;
    const CSVBody = rowIds.reduce((acc, id)=>`${acc}${serializeRow({
            id,
            columns,
            getCellParams: apiRef.current.getCellParams,
            ignoreValueFormatter,
            csvOptions
        })}\r\n`, '').trim();
    if (!csvOptions.includeHeaders) {
        return CSVBody;
    }
    const filteredColumns = columns.filter((column)=>column.field !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_COL_DEF"].field);
    const headerRows = [];
    if (csvOptions.includeColumnGroupsHeaders) {
        const columnGroupLookup = apiRef.current.getAllGroupDetails();
        let maxColumnGroupsDepth = 0;
        const columnGroupPathsLookup = filteredColumns.reduce((acc, column)=>{
            const columnGroupPath = apiRef.current.getColumnGroupPath(column.field);
            acc[column.field] = columnGroupPath;
            maxColumnGroupsDepth = Math.max(maxColumnGroupsDepth, columnGroupPath.length);
            return acc;
        }, {});
        for(let i = 0; i < maxColumnGroupsDepth; i += 1){
            const headerGroupRow = new CSVRow({
                csvOptions,
                sanitizeCellValue
            });
            headerRows.push(headerGroupRow);
            filteredColumns.forEach((column)=>{
                const columnGroupId = (columnGroupPathsLookup[column.field] || [])[i];
                const columnGroup = columnGroupLookup[columnGroupId];
                headerGroupRow.addValue(columnGroup ? columnGroup.headerName || columnGroup.groupId : '');
            });
        }
    }
    const mainHeaderRow = new CSVRow({
        csvOptions,
        sanitizeCellValue
    });
    filteredColumns.forEach((column)=>{
        mainHeaderRow.addValue(column.headerName || column.field);
    });
    headerRows.push(mainHeaderRow);
    const CSVHead = `${headerRows.map((row)=>row.getRowString()).join('\r\n')}\r\n`;
    return `${CSVHead}${CSVBody}`.trim();
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridCsvExport": (()=>useGridCsvExport)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/export/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$serializers$2f$csvSerializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$exportAs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/exportAs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$toolbar$2f$GridToolbarExport$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExport.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
const useGridCsvExport = (apiRef, props)=>{
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridCsvExport');
    const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;
    const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;
    const getDataAsCsv = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCsvExport.useCallback[getDataAsCsv]": (options = {})=>{
            logger.debug(`Get data as CSV`);
            const exportedColumns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getColumnsToExport"])({
                apiRef,
                options
            });
            const getRowsToExport = options.getRowsToExport ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultGetRowsToExport"];
            const exportedRowIds = getRowsToExport({
                apiRef
            });
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$serializers$2f$csvSerializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildCSV"])({
                columns: exportedColumns,
                rowIds: exportedRowIds,
                csvOptions: {
                    delimiter: options.delimiter || ',',
                    shouldAppendQuotes: options.shouldAppendQuotes ?? true,
                    includeHeaders: options.includeHeaders ?? true,
                    includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,
                    escapeFormulas: options.escapeFormulas ?? true
                },
                ignoreValueFormatter,
                apiRef
            });
        }
    }["useGridCsvExport.useCallback[getDataAsCsv]"], [
        logger,
        apiRef,
        ignoreValueFormatter
    ]);
    const exportDataAsCsv = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCsvExport.useCallback[exportDataAsCsv]": (options)=>{
            logger.debug(`Export data as CSV`);
            const csv = getDataAsCsv(options);
            const blob = new Blob([
                options?.utf8WithBom ? new Uint8Array([
                    0xef,
                    0xbb,
                    0xbf
                ]) : '',
                csv
            ], {
                type: 'text/csv'
            });
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$exportAs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["exportAs"])(blob, 'csv', options?.fileName);
        }
    }["useGridCsvExport.useCallback[exportDataAsCsv]"], [
        logger,
        getDataAsCsv
    ]);
    const csvExportApi = {
        getDataAsCsv,
        exportDataAsCsv
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, csvExportApi, 'public');
    /**
   * PRE-PROCESSING
   */ const addExportMenuButtons = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridCsvExport.useCallback[addExportMenuButtons]": (initialValue, options)=>{
            if (options.csvOptions?.disableToolbarButton) {
                return initialValue;
            }
            return [
                ...initialValue,
                {
                    component: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$toolbar$2f$GridToolbarExport$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridCsvExportMenuItem"], {
                        options: options.csvOptions
                    }),
                    componentName: 'csvExport'
                }
            ];
        }
    }["useGridCsvExport.useCallback[addExportMenuButtons]"], []);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportMenu', addExportMenuButtons);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridPrintExport": (()=>useGridPrintExport)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__ = __turbopack_import__("[project]/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js [app-client] (ecmascript) <export default as unstable_ownerDocument>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/export/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/constants/gridClasses.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$useGridPaginationModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationModel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$toolbar$2f$GridToolbarExport$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExport.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function raf() {
    return new Promise((resolve)=>{
        requestAnimationFrame(()=>{
            resolve();
        });
    });
}
function buildPrintWindow(title) {
    const iframeEl = document.createElement('iframe');
    iframeEl.style.position = 'absolute';
    iframeEl.style.width = '0px';
    iframeEl.style.height = '0px';
    iframeEl.title = title || document.title;
    return iframeEl;
}
const useGridPrintExport = (apiRef, props)=>{
    const hasRootReference = apiRef.current.rootElementRef.current !== null;
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridLogger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridLogger"])(apiRef, 'useGridPrintExport');
    const doc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const previousGridState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef(null);
    const previousColumnVisibility = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef({});
    const previousRows = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef([]);
    const previousVirtualizationState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useRef();
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useEffect({
        "useGridPrintExport.useEffect": ()=>{
            doc.current = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$utils$2f$esm$2f$ownerDocument$2f$ownerDocument$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__unstable_ownerDocument$3e$__["unstable_ownerDocument"])(apiRef.current.rootElementRef.current);
        }
    }["useGridPrintExport.useEffect"], [
        apiRef,
        hasRootReference
    ]);
    // Returns a promise because updateColumns triggers state update and
    // the new state needs to be in place before the grid can be sized correctly
    const updateGridColumnsForPrint = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPrintExport.useCallback[updateGridColumnsForPrint]": (fields, allColumns, includeCheckboxes)=>new Promise({
                "useGridPrintExport.useCallback[updateGridColumnsForPrint]": (resolve)=>{
                    const exportedColumnFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getColumnsToExport"])({
                        apiRef,
                        options: {
                            fields,
                            allColumns
                        }
                    }).map({
                        "useGridPrintExport.useCallback[updateGridColumnsForPrint].exportedColumnFields": (column)=>column.field
                    }["useGridPrintExport.useCallback[updateGridColumnsForPrint].exportedColumnFields"]);
                    const columns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnDefinitionsSelector"])(apiRef);
                    const newColumnVisibilityModel = {};
                    columns.forEach({
                        "useGridPrintExport.useCallback[updateGridColumnsForPrint]": (column)=>{
                            newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);
                        }
                    }["useGridPrintExport.useCallback[updateGridColumnsForPrint]"]);
                    if (includeCheckboxes) {
                        newColumnVisibilityModel[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$colDef$2f$gridCheckboxSelectionColDef$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_CHECKBOX_SELECTION_COL_DEF"].field] = true;
                    }
                    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);
                    resolve();
                }
            }["useGridPrintExport.useCallback[updateGridColumnsForPrint]"])
    }["useGridPrintExport.useCallback[updateGridColumnsForPrint]"], [
        apiRef
    ]);
    const updateGridRowsForPrint = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPrintExport.useCallback[updateGridRowsForPrint]": (getRowsToExport)=>{
            const rowsToExportIds = getRowsToExport({
                apiRef
            });
            const newRows = rowsToExportIds.reduce({
                "useGridPrintExport.useCallback[updateGridRowsForPrint].newRows": (acc, id)=>{
                    const row = apiRef.current.getRow(id);
                    if (!row[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ID_AUTOGENERATED"]]) {
                        acc.push(row);
                    }
                    return acc;
                }
            }["useGridPrintExport.useCallback[updateGridRowsForPrint].newRows"], []);
            apiRef.current.setRows(newRows);
        }
    }["useGridPrintExport.useCallback[updateGridRowsForPrint]"], [
        apiRef
    ]);
    const handlePrintWindowLoad = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPrintExport.useCallback[handlePrintWindowLoad]": (printWindow, options)=>{
            const normalizeOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                copyStyles: true,
                hideToolbar: false,
                hideFooter: false,
                includeCheckboxes: false
            }, options);
            const printDoc = printWindow.contentDocument;
            if (!printDoc) {
                return;
            }
            const rowsMeta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsMetaSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsMetaSelector"])(apiRef.current.state);
            const gridRootElement = apiRef.current.rootElementRef.current;
            const gridClone = gridRootElement.cloneNode(true);
            // Allow to overflow to not hide the border of the last row
            const gridMain = gridClone.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].main}`);
            gridMain.style.overflow = 'visible';
            // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642
            gridClone.style.contain = 'size';
            let gridToolbarElementHeight = gridRootElement.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].toolbarContainer}`)?.offsetHeight || 0;
            let gridFooterElementHeight = gridRootElement.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].footerContainer}`)?.offsetHeight || 0;
            if (normalizeOptions.hideToolbar) {
                gridClone.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].toolbarContainer}`)?.remove();
                gridToolbarElementHeight = 0;
            }
            if (normalizeOptions.hideFooter) {
                gridClone.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].footerContainer}`)?.remove();
                gridFooterElementHeight = 0;
            }
            // Expand container height to accommodate all rows
            const computedTotalHeight = rowsMeta.currentPageTotalHeight + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTotalHeaderHeight"])(apiRef, props) + gridToolbarElementHeight + gridFooterElementHeight;
            gridClone.style.height = `${computedTotalHeight}px`;
            // The height above does not include grid border width, so we need to exclude it
            gridClone.style.boxSizing = 'content-box';
            if (!normalizeOptions.hideFooter) {
                // the footer is always being placed at the bottom of the page as if all rows are exported
                // so if getRowsToExport is being used to only export a subset of rows then we need to
                // adjust the footer position to be correctly placed at the bottom of the grid
                const gridFooterElement = gridClone.querySelector(`.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$constants$2f$gridClasses$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridClasses"].footerContainer}`);
                gridFooterElement.style.position = 'absolute';
                gridFooterElement.style.width = '100%';
                gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`;
            }
            // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari
            // prevents us to do it
            const container = document.createElement('div');
            container.appendChild(gridClone);
            // To avoid an empty page in start on Chromium based browsers
            printDoc.body.style.marginTop = '0px';
            printDoc.body.innerHTML = container.innerHTML;
            const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;
            if (typeof defaultPageStyle === 'string') {
                // TODO custom styles should always win
                const styleElement = printDoc.createElement('style');
                styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));
                printDoc.head.appendChild(styleElement);
            }
            if (normalizeOptions.bodyClassName) {
                printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));
            }
            const stylesheetLoadPromises = [];
            if (normalizeOptions.copyStyles) {
                const rootCandidate = gridRootElement.getRootNode();
                const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;
                const headStyleElements = root.querySelectorAll("style, link[rel='stylesheet']");
                for(let i = 0; i < headStyleElements.length; i += 1){
                    const node = headStyleElements[i];
                    if (node.tagName === 'STYLE') {
                        const newHeadStyleElements = printDoc.createElement(node.tagName);
                        const sheet = node.sheet;
                        if (sheet) {
                            let styleCSS = '';
                            // NOTE: for-of is not supported by IE
                            for(let j = 0; j < sheet.cssRules.length; j += 1){
                                if (typeof sheet.cssRules[j].cssText === 'string') {
                                    styleCSS += `${sheet.cssRules[j].cssText}\r\n`;
                                }
                            }
                            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));
                            printDoc.head.appendChild(newHeadStyleElements);
                        }
                    } else if (node.getAttribute('href')) {
                        // If `href` tag is empty, avoid loading these links
                        const newHeadStyleElements = printDoc.createElement(node.tagName);
                        for(let j = 0; j < node.attributes.length; j += 1){
                            const attr = node.attributes[j];
                            if (attr) {
                                newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');
                            }
                        }
                        stylesheetLoadPromises.push(new Promise({
                            "useGridPrintExport.useCallback[handlePrintWindowLoad]": (resolve)=>{
                                newHeadStyleElements.addEventListener('load', {
                                    "useGridPrintExport.useCallback[handlePrintWindowLoad]": ()=>resolve()
                                }["useGridPrintExport.useCallback[handlePrintWindowLoad]"]);
                            }
                        }["useGridPrintExport.useCallback[handlePrintWindowLoad]"]));
                        printDoc.head.appendChild(newHeadStyleElements);
                    }
                }
            }
            // Trigger print
            if ("TURBOPACK compile-time truthy", 1) {
                // wait for remote stylesheets to load
                Promise.all(stylesheetLoadPromises).then({
                    "useGridPrintExport.useCallback[handlePrintWindowLoad]": ()=>{
                        printWindow.contentWindow.print();
                    }
                }["useGridPrintExport.useCallback[handlePrintWindowLoad]"]);
            }
        }
    }["useGridPrintExport.useCallback[handlePrintWindowLoad]"], [
        apiRef,
        doc,
        props
    ]);
    const handlePrintWindowAfterPrint = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPrintExport.useCallback[handlePrintWindowAfterPrint]": (printWindow)=>{
            // Remove the print iframe
            doc.current.body.removeChild(printWindow);
            // Revert grid to previous state
            apiRef.current.restoreState(previousGridState.current || {});
            if (!previousGridState.current?.columns?.columnVisibilityModel) {
                // if the apiRef.current.exportState(); did not exported the column visibility, we update it
                apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);
            }
            apiRef.current.setState({
                "useGridPrintExport.useCallback[handlePrintWindowAfterPrint]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        virtualization: previousVirtualizationState.current
                    })
            }["useGridPrintExport.useCallback[handlePrintWindowAfterPrint]"]);
            apiRef.current.setRows(previousRows.current);
            // Clear local state
            previousGridState.current = null;
            previousColumnVisibility.current = {};
            previousRows.current = [];
        }
    }["useGridPrintExport.useCallback[handlePrintWindowAfterPrint]"], [
        apiRef
    ]);
    const exportDataAsPrint = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPrintExport.useCallback[exportDataAsPrint]": async (options)=>{
            logger.debug(`Export data as Print`);
            if (!apiRef.current.rootElementRef.current) {
                throw new Error('MUI X: No grid root element available.');
            }
            previousGridState.current = apiRef.current.exportState();
            // It appends that the visibility model is not exported, especially if columnVisibility is not controlled
            previousColumnVisibility.current = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$columns$2f$gridColumnsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridColumnVisibilityModelSelector"])(apiRef);
            previousRows.current = apiRef.current.getSortedRows().filter({
                "useGridPrintExport.useCallback[exportDataAsPrint]": (row)=>!row[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GRID_ID_AUTOGENERATED"]]
            }["useGridPrintExport.useCallback[exportDataAsPrint]"]);
            if (props.pagination) {
                const visibleRowCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedRowCountSelector"])(apiRef);
                const paginationModel = {
                    page: 0,
                    pageSize: visibleRowCount
                };
                apiRef.current.setState({
                    "useGridPrintExport.useCallback[exportDataAsPrint]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                            pagination: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.pagination, {
                                paginationModel: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$pagination$2f$useGridPaginationModel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDerivedPaginationModel"])(state.pagination, // Using signature `DataGridPro` to allow more than 100 rows in the print export
                                'DataGridPro', paginationModel)
                            })
                        })
                }["useGridPrintExport.useCallback[exportDataAsPrint]"]);
            }
            previousVirtualizationState.current = apiRef.current.state.virtualization;
            apiRef.current.setState({
                "useGridPrintExport.useCallback[exportDataAsPrint]": (state)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state, {
                        virtualization: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, state.virtualization, {
                            enabled: false,
                            enabledForColumns: false
                        })
                    })
            }["useGridPrintExport.useCallback[exportDataAsPrint]"]);
            await updateGridColumnsForPrint(options?.fields, options?.allColumns, options?.includeCheckboxes);
            updateGridRowsForPrint(options?.getRowsToExport ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultGetRowsToExport"]);
            await raf(); // wait for the state changes to take action
            const printWindow = buildPrintWindow(options?.fileName);
            if ("TURBOPACK compile-time falsy", 0) {
                "TURBOPACK unreachable";
            } else {
                printWindow.onload = ({
                    "useGridPrintExport.useCallback[exportDataAsPrint]": ()=>{
                        handlePrintWindowLoad(printWindow, options);
                        const mediaQueryList = printWindow.contentWindow.matchMedia('print');
                        mediaQueryList.addEventListener('change', {
                            "useGridPrintExport.useCallback[exportDataAsPrint]": (mql)=>{
                                const isAfterPrint = mql.matches === false;
                                if (isAfterPrint) {
                                    handlePrintWindowAfterPrint(printWindow);
                                }
                            }
                        }["useGridPrintExport.useCallback[exportDataAsPrint]"]);
                    }
                })["useGridPrintExport.useCallback[exportDataAsPrint]"];
                doc.current.body.appendChild(printWindow);
            }
        }
    }["useGridPrintExport.useCallback[exportDataAsPrint]"], [
        props,
        logger,
        apiRef,
        handlePrintWindowLoad,
        handlePrintWindowAfterPrint,
        updateGridColumnsForPrint,
        updateGridRowsForPrint
    ]);
    const printExportApi = {
        exportDataAsPrint
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, printExportApi, 'public');
    /**
   * PRE-PROCESSING
   */ const addExportMenuButtons = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridPrintExport.useCallback[addExportMenuButtons]": (initialValue, options)=>{
            if (options.printOptions?.disableToolbarButton) {
                return initialValue;
            }
            return [
                ...initialValue,
                {
                    component: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$components$2f$toolbar$2f$GridToolbarExport$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GridPrintExportMenuItem"], {
                        options: options.printOptions
                    }),
                    componentName: 'printExport'
                }
            ];
        }
    }["useGridPrintExport.useCallback[addExportMenuButtons]"], []);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$core$2f$pipeProcessing$2f$useGridRegisterPipeProcessor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRegisterPipeProcessor"])(apiRef, 'exportMenu', addExportMenuButtons);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridClipboard": (()=>useGridClipboard)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/utils/keyboardUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$serializers$2f$csvSerializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridNativeEventListener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
;
;
;
;
function writeToClipboardPolyfill(data) {
    const span = document.createElement('span');
    span.style.whiteSpace = 'pre';
    span.style.userSelect = 'all';
    span.style.opacity = '0px';
    span.textContent = data;
    document.body.appendChild(span);
    const range = document.createRange();
    range.selectNode(span);
    const selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(range);
    try {
        document.execCommand('copy');
    } finally{
        document.body.removeChild(span);
    }
}
function copyToClipboard(data) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(data).catch(()=>{
            writeToClipboardPolyfill(data);
        });
    } else {
        writeToClipboardPolyfill(data);
    }
}
function hasNativeSelection(element) {
    // When getSelection is called on an <iframe> that is not displayed Firefox will return null.
    if (window.getSelection()?.toString()) {
        return true;
    }
    // window.getSelection() returns an empty string in Firefox for selections inside a form element.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.
    // Instead, we can use element.selectionStart that is only defined on form elements.
    if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {
        return true;
    }
    return false;
}
const useGridClipboard = (apiRef, props)=>{
    const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;
    const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;
    const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;
    const handleCopy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridClipboard.useCallback[handleCopy]": (event)=>{
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$utils$2f$keyboardUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCopyShortcut"])(event)) {
                return;
            }
            // Do nothing if there's a native selection
            if (hasNativeSelection(event.target)) {
                return;
            }
            let textToCopy = '';
            const selectedRows = apiRef.current.getSelectedRows();
            if (selectedRows.size > 0) {
                textToCopy = apiRef.current.getDataAsCsv({
                    includeHeaders: false,
                    delimiter: clipboardCopyCellDelimiter,
                    shouldAppendQuotes: false,
                    escapeFormulas: false
                });
            } else {
                const focusedCell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$focus$2f$gridFocusStateSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridFocusCellSelector"])(apiRef);
                if (focusedCell) {
                    const cellParams = apiRef.current.getCellParams(focusedCell.id, focusedCell.field);
                    textToCopy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$export$2f$serializers$2f$csvSerializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["serializeCellValue"])(cellParams, {
                        csvOptions: {
                            delimiter: clipboardCopyCellDelimiter,
                            shouldAppendQuotes: false,
                            escapeFormulas: false
                        },
                        ignoreValueFormatter
                    });
                }
            }
            textToCopy = apiRef.current.unstable_applyPipeProcessors('clipboardCopy', textToCopy);
            if (textToCopy) {
                copyToClipboard(textToCopy);
                apiRef.current.publishEvent('clipboardCopy', textToCopy);
            }
        }
    }["useGridClipboard.useCallback[handleCopy]"], [
        apiRef,
        ignoreValueFormatter,
        clipboardCopyCellDelimiter
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridNativeEventListener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridNativeEventListener"])(apiRef, apiRef.current.rootElementRef, 'keydown', handleCopy);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'clipboardCopy', props.onClipboardCopy);
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/events/useGridEvents.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridEvents": (()=>useGridEvents)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js [app-client] (ecmascript)");
;
function useGridEvents(apiRef, props) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnHeaderClick', props.onColumnHeaderClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnHeaderContextMenu', props.onColumnHeaderContextMenu);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnHeaderDoubleClick', props.onColumnHeaderDoubleClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnHeaderOver', props.onColumnHeaderOver);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnHeaderOut', props.onColumnHeaderOut);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnHeaderEnter', props.onColumnHeaderEnter);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'columnHeaderLeave', props.onColumnHeaderLeave);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'cellClick', props.onCellClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'cellDoubleClick', props.onCellDoubleClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'cellKeyDown', props.onCellKeyDown);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'preferencePanelClose', props.onPreferencePanelClose);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'preferencePanelOpen', props.onPreferencePanelOpen);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'menuOpen', props.onMenuOpen);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'menuClose', props.onMenuClose);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'rowDoubleClick', props.onRowDoubleClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'rowClick', props.onRowClick);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiEventHandler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiOptionHandler"])(apiRef, 'stateChange', props.onStateChange);
}
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/statePersistence/useGridStatePersistence.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridStatePersistence": (()=>useGridStatePersistence)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js [app-client] (ecmascript)");
;
;
const useGridStatePersistence = (apiRef)=>{
    const exportState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStatePersistence.useCallback[exportState]": (params = {})=>{
            const stateToExport = apiRef.current.unstable_applyPipeProcessors('exportState', {}, params);
            return stateToExport;
        }
    }["useGridStatePersistence.useCallback[exportState]"], [
        apiRef
    ]);
    const restoreState = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useCallback({
        "useGridStatePersistence.useCallback[restoreState]": (stateToRestore)=>{
            const response = apiRef.current.unstable_applyPipeProcessors('restoreState', {
                callbacks: []
            }, {
                stateToRestore
            });
            response.callbacks.forEach({
                "useGridStatePersistence.useCallback[restoreState]": (callback)=>{
                    callback();
                }
            }["useGridStatePersistence.useCallback[restoreState]"]);
            apiRef.current.forceUpdate();
        }
    }["useGridStatePersistence.useCallback[restoreState]"], [
        apiRef
    ]);
    const statePersistenceApi = {
        exportState,
        restoreState
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiMethod$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiMethod"])(apiRef, statePersistenceApi, 'public');
};
}}),
"[project]/node_modules/@mui/x-data-grid/hooks/features/overlays/useGridOverlays.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useGridOverlays": (()=>useGridOverlays)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js [app-client] (ecmascript)");
;
;
;
;
;
;
const useGridOverlays = ()=>{
    const apiRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridApiContext$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridApiContext"])();
    const rootProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridRootProps$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridRootProps"])();
    const totalRowCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowCountSelector"]);
    const visibleRowCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$filter$2f$gridFilterSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridExpandedRowCountSelector"]);
    const pinnedRowsCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridPinnedRowsCountSelector"]);
    const noRows = totalRowCount === 0 && pinnedRowsCount === 0;
    const loading = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$utils$2f$useGridSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useGridSelector"])(apiRef, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$mui$2f$x$2d$data$2d$grid$2f$hooks$2f$features$2f$rows$2f$gridRowsSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gridRowsLoadingSelector"]);
    const showNoRowsOverlay = !loading && noRows;
    const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;
    let overlayType = null;
    let loadingOverlayVariant = null;
    if (showNoRowsOverlay) {
        overlayType = 'noRowsOverlay';
    }
    if (showNoResultsOverlay) {
        overlayType = 'noResultsOverlay';
    }
    if (loading) {
        overlayType = 'loadingOverlay';
        loadingOverlayVariant = rootProps.slotProps?.loadingOverlay?.[noRows ? 'noRowsVariant' : 'variant'] || null;
    }
    return {
        overlayType,
        loadingOverlayVariant
    };
};
}}),
}]);

//# sourceMappingURL=node_modules_%40mui_x-data-grid_hooks_b5ed6b._.js.map